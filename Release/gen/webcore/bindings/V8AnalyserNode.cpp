/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8AnalyserNode.h"

#if ENABLE(WEB_AUDIO)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AudioNode.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8Float32Array.h"
#include "V8Uint8Array.h"
#include <wtf/Float32Array.h>
#include <wtf/Uint8Array.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8AnalyserNode::info = { V8AnalyserNode::GetTemplate, V8AnalyserNode::derefObject, 0, 0, V8AnalyserNode::installPerContextPrototypeProperties, &V8AudioNode::info, WrapperTypeObjectPrototype };

namespace AnalyserNodeV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> fftSizeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AnalyserNode* imp = V8AnalyserNode::toNative(info.Holder());
    return v8UnsignedInteger(imp->fftSize(), info.GetIsolate());
}

static void fftSizeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    AnalyserNode* imp = V8AnalyserNode::toNative(info.Holder());
    unsigned v = toUInt32(value);
    ExceptionCode ec = 0;
    imp->setFftSize(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> frequencyBinCountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AnalyserNode* imp = V8AnalyserNode::toNative(info.Holder());
    return v8UnsignedInteger(imp->frequencyBinCount(), info.GetIsolate());
}

static v8::Handle<v8::Value> minDecibelsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AnalyserNode* imp = V8AnalyserNode::toNative(info.Holder());
    return v8::Number::New(imp->minDecibels());
}

static void minDecibelsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    AnalyserNode* imp = V8AnalyserNode::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setMinDecibels(v);
    return;
}

static v8::Handle<v8::Value> maxDecibelsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AnalyserNode* imp = V8AnalyserNode::toNative(info.Holder());
    return v8::Number::New(imp->maxDecibels());
}

static void maxDecibelsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    AnalyserNode* imp = V8AnalyserNode::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setMaxDecibels(v);
    return;
}

static v8::Handle<v8::Value> smoothingTimeConstantAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AnalyserNode* imp = V8AnalyserNode::toNative(info.Holder());
    return v8::Number::New(imp->smoothingTimeConstant());
}

static void smoothingTimeConstantAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    AnalyserNode* imp = V8AnalyserNode::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setSmoothingTimeConstant(v);
    return;
}

static v8::Handle<v8::Value> getFloatFrequencyDataCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AnalyserNode* imp = V8AnalyserNode::toNative(args.Holder());
    V8TRYCATCH(Float32Array*, array, V8Float32Array::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Float32Array::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->getFloatFrequencyData(array);
    return v8Undefined();
}

static v8::Handle<v8::Value> getByteFrequencyDataCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AnalyserNode* imp = V8AnalyserNode::toNative(args.Holder());
    V8TRYCATCH(Uint8Array*, array, V8Uint8Array::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Uint8Array::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->getByteFrequencyData(array);
    return v8Undefined();
}

static v8::Handle<v8::Value> getByteTimeDomainDataCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AnalyserNode* imp = V8AnalyserNode::toNative(args.Holder());
    V8TRYCATCH(Uint8Array*, array, V8Uint8Array::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Uint8Array::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->getByteTimeDomainData(array);
    return v8Undefined();
}

} // namespace AnalyserNodeV8Internal

static const V8DOMConfiguration::BatchedAttribute V8AnalyserNodeAttrs[] = {
    // Attribute 'fftSize' (Type: 'attribute' ExtAttr: '')
    {"fftSize", AnalyserNodeV8Internal::fftSizeAttrGetter, AnalyserNodeV8Internal::fftSizeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'frequencyBinCount' (Type: 'readonly attribute' ExtAttr: '')
    {"frequencyBinCount", AnalyserNodeV8Internal::frequencyBinCountAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'minDecibels' (Type: 'attribute' ExtAttr: '')
    {"minDecibels", AnalyserNodeV8Internal::minDecibelsAttrGetter, AnalyserNodeV8Internal::minDecibelsAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'maxDecibels' (Type: 'attribute' ExtAttr: '')
    {"maxDecibels", AnalyserNodeV8Internal::maxDecibelsAttrGetter, AnalyserNodeV8Internal::maxDecibelsAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'smoothingTimeConstant' (Type: 'attribute' ExtAttr: '')
    {"smoothingTimeConstant", AnalyserNodeV8Internal::smoothingTimeConstantAttrGetter, AnalyserNodeV8Internal::smoothingTimeConstantAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8AnalyserNodeTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "AnalyserNode", V8AudioNode::GetTemplate(), V8AnalyserNode::internalFieldCount,
        V8AnalyserNodeAttrs, WTF_ARRAY_LENGTH(V8AnalyserNodeAttrs),
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'getFloatFrequencyData'
    const int getFloatFrequencyDataArgc = 1;
    v8::Handle<v8::FunctionTemplate> getFloatFrequencyDataArgv[getFloatFrequencyDataArgc] = { V8Float32Array::GetRawTemplate() };
    v8::Handle<v8::Signature> getFloatFrequencyDataSignature = v8::Signature::New(desc, getFloatFrequencyDataArgc, getFloatFrequencyDataArgv);
    proto->Set(v8::String::NewSymbol("getFloatFrequencyData"), v8::FunctionTemplate::New(AnalyserNodeV8Internal::getFloatFrequencyDataCallback, v8Undefined(), getFloatFrequencyDataSignature));

    // Custom Signature 'getByteFrequencyData'
    const int getByteFrequencyDataArgc = 1;
    v8::Handle<v8::FunctionTemplate> getByteFrequencyDataArgv[getByteFrequencyDataArgc] = { V8Uint8Array::GetRawTemplate() };
    v8::Handle<v8::Signature> getByteFrequencyDataSignature = v8::Signature::New(desc, getByteFrequencyDataArgc, getByteFrequencyDataArgv);
    proto->Set(v8::String::NewSymbol("getByteFrequencyData"), v8::FunctionTemplate::New(AnalyserNodeV8Internal::getByteFrequencyDataCallback, v8Undefined(), getByteFrequencyDataSignature));

    // Custom Signature 'getByteTimeDomainData'
    const int getByteTimeDomainDataArgc = 1;
    v8::Handle<v8::FunctionTemplate> getByteTimeDomainDataArgv[getByteTimeDomainDataArgc] = { V8Uint8Array::GetRawTemplate() };
    v8::Handle<v8::Signature> getByteTimeDomainDataSignature = v8::Signature::New(desc, getByteTimeDomainDataArgc, getByteTimeDomainDataArgv);
    proto->Set(v8::String::NewSymbol("getByteTimeDomainData"), v8::FunctionTemplate::New(AnalyserNodeV8Internal::getByteTimeDomainDataCallback, v8Undefined(), getByteTimeDomainDataSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8AnalyserNode::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8AnalyserNode::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8AnalyserNodeTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8AnalyserNode::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8AnalyserNode::createWrapper(PassRefPtr<AnalyserNode> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<AudioNode*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8AnalyserNode::derefObject(void* object)
{
    static_cast<AnalyserNode*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(WEB_AUDIO)
