/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8InternalSettings.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8InternalSettingsGenerated.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8InternalSettings::info = { V8InternalSettings::GetTemplate, V8InternalSettings::derefObject, 0, 0, V8InternalSettings::installPerContextPrototypeProperties, &V8InternalSettingsGenerated::info, WrapperTypeObjectPrototype };

namespace InternalSettingsV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> setMockScrollbarsEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setMockScrollbarsEnabled(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setFixedElementsLayoutRelativeToFrameCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setFixedElementsLayoutRelativeToFrame(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setUnifiedTextCheckingEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setUnifiedTextCheckingEnabled(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> unifiedTextCheckingEnabledCallback(const v8::Arguments& args)
{
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    bool result = imp->unifiedTextCheckingEnabled(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setTouchEventEmulationEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setTouchEventEmulationEnabled(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setDeviceSupportsTouchCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setDeviceSupportsTouch(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setDeviceSupportsMouseCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setDeviceSupportsMouse(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setShadowDOMEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setShadowDOMEnabled(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setAuthorShadowDOMForAnyElementEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    V8TRYCATCH(bool, isEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAuthorShadowDOMForAnyElementEnabled(isEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setStyleScopedEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    V8TRYCATCH(bool, isEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setStyleScopedEnabled(isEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setStandardFontFamilyCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, family, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, script, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    imp->setStandardFontFamily(family, script, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setSerifFontFamilyCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, family, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, script, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    imp->setSerifFontFamily(family, script, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setSansSerifFontFamilyCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, family, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, script, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    imp->setSansSerifFontFamily(family, script, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setFixedFontFamilyCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, family, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, script, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    imp->setFixedFontFamily(family, script, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setCursiveFontFamilyCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, family, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, script, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    imp->setCursiveFontFamily(family, script, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setFantasyFontFamilyCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, family, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, script, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    imp->setFantasyFontFamily(family, script, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setPictographFontFamilyCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, family, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, script, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    imp->setPictographFontFamily(family, script, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setTextAutosizingEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setTextAutosizingEnabled(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setTextAutosizingWindowSizeOverrideCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, width, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, height, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    imp->setTextAutosizingWindowSizeOverride(width, height, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setTextAutosizingFontScaleFactorCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(float, fontScaleFactor, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    imp->setTextAutosizingFontScaleFactor(fontScaleFactor, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setResolutionOverrideCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, dotsPerCSSInchHorizontally, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, dotsPerCSSInchVertically, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    imp->setResolutionOverride(dotsPerCSSInchHorizontally, dotsPerCSSInchVertically, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setMediaTypeOverrideCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, mediaTypeOverride, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->setMediaTypeOverride(mediaTypeOverride, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setEnableScrollAnimatorCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setEnableScrollAnimator(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> scrollAnimatorEnabledCallback(const v8::Arguments& args)
{
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    bool result = imp->scrollAnimatorEnabled(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setCSSExclusionsEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setCSSExclusionsEnabled(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setCSSVariablesEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setCSSVariablesEnabled(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> cssVariablesEnabledCallback(const v8::Arguments& args)
{
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    bool result = imp->cssVariablesEnabled(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setCanStartMediaCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setCanStartMedia(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setMediaPlaybackRequiresUserGestureCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setMediaPlaybackRequiresUserGesture(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setEditingBehaviorCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, behavior, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->setEditingBehavior(behavior, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setFixedPositionCreatesStackingContextCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, creates, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setFixedPositionCreatesStackingContext(creates, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setSyncXHRInDocumentsEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setSyncXHRInDocumentsEnabled(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setWindowFocusRestrictedCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, restricted, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setWindowFocusRestricted(restricted, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setDialogElementEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setDialogElementEnabled(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setLangAttributeAwareFormControlUIEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setLangAttributeAwareFormControlUIEnabled(enabled);
    return v8Undefined();
}

#if ENABLE(VIDEO_TRACK)

static v8::Handle<v8::Value> setShouldDisplayTrackKindCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, kind, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->BooleanValue());
    imp->setShouldDisplayTrackKind(kind, enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

#endif // ENABLE(VIDEO_TRACK)

#if ENABLE(VIDEO_TRACK)

static v8::Handle<v8::Value> shouldDisplayTrackKindCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, trackKind, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    bool result = imp->shouldDisplayTrackKind(trackKind, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

#endif // ENABLE(VIDEO_TRACK)

static v8::Handle<v8::Value> setMemoryInfoEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setMemoryInfoEnabled(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setStorageBlockingPolicyCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, policy, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->setStorageBlockingPolicy(policy, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setImagesEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettings* imp = V8InternalSettings::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, enabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setImagesEnabled(enabled, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace InternalSettingsV8Internal

static const V8DOMConfiguration::BatchedCallback V8InternalSettingsCallbacks[] = {
    {"setMockScrollbarsEnabled", InternalSettingsV8Internal::setMockScrollbarsEnabledCallback},
    {"setFixedElementsLayoutRelativeToFrame", InternalSettingsV8Internal::setFixedElementsLayoutRelativeToFrameCallback},
    {"setUnifiedTextCheckingEnabled", InternalSettingsV8Internal::setUnifiedTextCheckingEnabledCallback},
    {"unifiedTextCheckingEnabled", InternalSettingsV8Internal::unifiedTextCheckingEnabledCallback},
    {"setTouchEventEmulationEnabled", InternalSettingsV8Internal::setTouchEventEmulationEnabledCallback},
    {"setDeviceSupportsTouch", InternalSettingsV8Internal::setDeviceSupportsTouchCallback},
    {"setDeviceSupportsMouse", InternalSettingsV8Internal::setDeviceSupportsMouseCallback},
    {"setShadowDOMEnabled", InternalSettingsV8Internal::setShadowDOMEnabledCallback},
    {"setAuthorShadowDOMForAnyElementEnabled", InternalSettingsV8Internal::setAuthorShadowDOMForAnyElementEnabledCallback},
    {"setStyleScopedEnabled", InternalSettingsV8Internal::setStyleScopedEnabledCallback},
    {"setStandardFontFamily", InternalSettingsV8Internal::setStandardFontFamilyCallback},
    {"setSerifFontFamily", InternalSettingsV8Internal::setSerifFontFamilyCallback},
    {"setSansSerifFontFamily", InternalSettingsV8Internal::setSansSerifFontFamilyCallback},
    {"setFixedFontFamily", InternalSettingsV8Internal::setFixedFontFamilyCallback},
    {"setCursiveFontFamily", InternalSettingsV8Internal::setCursiveFontFamilyCallback},
    {"setFantasyFontFamily", InternalSettingsV8Internal::setFantasyFontFamilyCallback},
    {"setPictographFontFamily", InternalSettingsV8Internal::setPictographFontFamilyCallback},
    {"setTextAutosizingEnabled", InternalSettingsV8Internal::setTextAutosizingEnabledCallback},
    {"setTextAutosizingWindowSizeOverride", InternalSettingsV8Internal::setTextAutosizingWindowSizeOverrideCallback},
    {"setTextAutosizingFontScaleFactor", InternalSettingsV8Internal::setTextAutosizingFontScaleFactorCallback},
    {"setResolutionOverride", InternalSettingsV8Internal::setResolutionOverrideCallback},
    {"setMediaTypeOverride", InternalSettingsV8Internal::setMediaTypeOverrideCallback},
    {"setEnableScrollAnimator", InternalSettingsV8Internal::setEnableScrollAnimatorCallback},
    {"scrollAnimatorEnabled", InternalSettingsV8Internal::scrollAnimatorEnabledCallback},
    {"setCSSExclusionsEnabled", InternalSettingsV8Internal::setCSSExclusionsEnabledCallback},
    {"setCSSVariablesEnabled", InternalSettingsV8Internal::setCSSVariablesEnabledCallback},
    {"cssVariablesEnabled", InternalSettingsV8Internal::cssVariablesEnabledCallback},
    {"setCanStartMedia", InternalSettingsV8Internal::setCanStartMediaCallback},
    {"setMediaPlaybackRequiresUserGesture", InternalSettingsV8Internal::setMediaPlaybackRequiresUserGestureCallback},
    {"setEditingBehavior", InternalSettingsV8Internal::setEditingBehaviorCallback},
    {"setFixedPositionCreatesStackingContext", InternalSettingsV8Internal::setFixedPositionCreatesStackingContextCallback},
    {"setSyncXHRInDocumentsEnabled", InternalSettingsV8Internal::setSyncXHRInDocumentsEnabledCallback},
    {"setWindowFocusRestricted", InternalSettingsV8Internal::setWindowFocusRestrictedCallback},
    {"setDialogElementEnabled", InternalSettingsV8Internal::setDialogElementEnabledCallback},
    {"setLangAttributeAwareFormControlUIEnabled", InternalSettingsV8Internal::setLangAttributeAwareFormControlUIEnabledCallback},
#if ENABLE(VIDEO_TRACK)
    {"setShouldDisplayTrackKind", InternalSettingsV8Internal::setShouldDisplayTrackKindCallback},
#endif
#if ENABLE(VIDEO_TRACK)
    {"shouldDisplayTrackKind", InternalSettingsV8Internal::shouldDisplayTrackKindCallback},
#endif
    {"setMemoryInfoEnabled", InternalSettingsV8Internal::setMemoryInfoEnabledCallback},
    {"setStorageBlockingPolicy", InternalSettingsV8Internal::setStorageBlockingPolicyCallback},
    {"setImagesEnabled", InternalSettingsV8Internal::setImagesEnabledCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8InternalSettingsTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "InternalSettings", V8InternalSettingsGenerated::GetTemplate(), V8InternalSettings::internalFieldCount,
        0, 0,
        V8InternalSettingsCallbacks, WTF_ARRAY_LENGTH(V8InternalSettingsCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8InternalSettings::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8InternalSettings::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8InternalSettingsTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8InternalSettings::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8InternalSettings::createWrapper(PassRefPtr<InternalSettings> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<InternalSettingsGenerated*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8InternalSettings::derefObject(void* object)
{
    static_cast<InternalSettings*>(object)->deref();
}

} // namespace WebCore
