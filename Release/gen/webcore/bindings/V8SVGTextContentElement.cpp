/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGTextContentElement.h"

#if ENABLE(SVG)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "SVGPropertyTearOff.h"
#include "StylePropertySet.h"
#include "V8Binding.h"
#include "V8CSSStyleDeclaration.h"
#include "V8CSSValue.h"
#include "V8DOMWrapper.h"
#include "V8SVGAnimatedBoolean.h"
#include "V8SVGAnimatedEnumeration.h"
#include "V8SVGAnimatedLength.h"
#include "V8SVGAnimatedString.h"
#include "V8SVGElement.h"
#include "V8SVGPoint.h"
#include "V8SVGRect.h"
#include "V8SVGStringList.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8SVGTextContentElement::info = { V8SVGTextContentElement::GetTemplate, V8SVGTextContentElement::derefObject, 0, 0, V8SVGTextContentElement::installPerContextPrototypeProperties, &V8SVGElement::info, WrapperTypeObjectPrototype };

namespace SVGTextContentElementV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> textLengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(info.Holder());
    return toV8Fast(imp->textLengthAnimated(), info, imp);
}

static v8::Handle<v8::Value> lengthAdjustAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(info.Holder());
    return toV8Fast(static_pointer_cast<SVGAnimatedEnumeration>(imp->lengthAdjustAnimated()), info, imp);
}

static v8::Handle<v8::Value> requiredFeaturesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(info.Holder());
    return toV8Fast(WTF::getPtr(SVGStaticListPropertyTearOff<SVGStringList>::create(imp, imp->requiredFeatures())), info, imp);
}

static v8::Handle<v8::Value> requiredExtensionsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(info.Holder());
    return toV8Fast(WTF::getPtr(SVGStaticListPropertyTearOff<SVGStringList>::create(imp, imp->requiredExtensions())), info, imp);
}

static v8::Handle<v8::Value> systemLanguageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(info.Holder());
    return toV8Fast(WTF::getPtr(SVGStaticListPropertyTearOff<SVGStringList>::create(imp, imp->systemLanguage())), info, imp);
}

static v8::Handle<v8::Value> xmllangAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(info.Holder());
    return v8String(imp->xmllang(), info.GetIsolate());
}

static void xmllangAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setXmllang(v);
    return;
}

static v8::Handle<v8::Value> xmlspaceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(info.Holder());
    return v8String(imp->xmlspace(), info.GetIsolate());
}

static void xmlspaceAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setXmlspace(v);
    return;
}

static v8::Handle<v8::Value> externalResourcesRequiredAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(info.Holder());
    return toV8Fast(imp->externalResourcesRequiredAnimated(), info, imp);
}

static v8::Handle<v8::Value> classNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(info.Holder());
    return toV8Fast(imp->classNameAnimated(), info, imp);
}

static v8::Handle<v8::Value> styleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(info.Holder());
    return toV8Fast(imp->style(), info, imp);
}

static v8::Handle<v8::Value> getNumberOfCharsCallback(const v8::Arguments& args)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(args.Holder());
    return v8Integer(imp->getNumberOfChars(), args.GetIsolate());
}

static v8::Handle<v8::Value> getComputedTextLengthCallback(const v8::Arguments& args)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(args.Holder());
    return v8::Number::New(imp->getComputedTextLength());
}

static v8::Handle<v8::Value> getSubStringLengthCallback(const v8::Arguments& args)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, offset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (UNLIKELY(offset < 0)) {
        ec = INDEX_SIZE_ERR;
        goto fail;
    }
    V8TRYCATCH(int, length, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    if (UNLIKELY(length < 0)) {
        ec = INDEX_SIZE_ERR;
        goto fail;
    }
    float result = imp->getSubStringLength(offset, length, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Number::New(result);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getStartPositionOfCharCallback(const v8::Arguments& args)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, offset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (UNLIKELY(offset < 0)) {
        ec = INDEX_SIZE_ERR;
        goto fail;
    }
    FloatPoint result = imp->getStartPositionOfChar(offset, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(WTF::getPtr(SVGPropertyTearOff<FloatPoint>::create(result)), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getEndPositionOfCharCallback(const v8::Arguments& args)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, offset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (UNLIKELY(offset < 0)) {
        ec = INDEX_SIZE_ERR;
        goto fail;
    }
    FloatPoint result = imp->getEndPositionOfChar(offset, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(WTF::getPtr(SVGPropertyTearOff<FloatPoint>::create(result)), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getExtentOfCharCallback(const v8::Arguments& args)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, offset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (UNLIKELY(offset < 0)) {
        ec = INDEX_SIZE_ERR;
        goto fail;
    }
    FloatRect result = imp->getExtentOfChar(offset, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(WTF::getPtr(SVGPropertyTearOff<FloatRect>::create(result)), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getRotationOfCharCallback(const v8::Arguments& args)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, offset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (UNLIKELY(offset < 0)) {
        ec = INDEX_SIZE_ERR;
        goto fail;
    }
    float result = imp->getRotationOfChar(offset, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Number::New(result);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getCharNumAtPositionCallback(const v8::Arguments& args)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(args.Holder());
    V8TRYCATCH(RefPtr<SVGPropertyTearOff<FloatPoint> >, point, V8SVGPoint::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8SVGPoint::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    if (!point)
        return setDOMException(WebCore::TYPE_MISMATCH_ERR, args.GetIsolate());
    return v8Integer(imp->getCharNumAtPosition(point->propertyReference()), args.GetIsolate());
}

static v8::Handle<v8::Value> selectSubStringCallback(const v8::Arguments& args)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, offset, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (UNLIKELY(offset < 0)) {
        ec = INDEX_SIZE_ERR;
        goto fail;
    }
    V8TRYCATCH(int, length, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    if (UNLIKELY(length < 0)) {
        ec = INDEX_SIZE_ERR;
        goto fail;
    }
    imp->selectSubString(offset, length, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> hasExtensionCallback(const v8::Arguments& args)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, extension, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->hasExtension(extension), args.GetIsolate());
}

static v8::Handle<v8::Value> getPresentationAttributeCallback(const v8::Arguments& args)
{
    SVGTextContentElement* imp = V8SVGTextContentElement::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8Fast(imp->getPresentationAttribute(name), args, imp);
}

} // namespace SVGTextContentElementV8Internal

static const V8DOMConfiguration::BatchedAttribute V8SVGTextContentElementAttrs[] = {
    // Attribute 'textLength' (Type: 'readonly attribute' ExtAttr: '')
    {"textLength", SVGTextContentElementV8Internal::textLengthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'lengthAdjust' (Type: 'readonly attribute' ExtAttr: '')
    {"lengthAdjust", SVGTextContentElementV8Internal::lengthAdjustAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'requiredFeatures' (Type: 'readonly attribute' ExtAttr: '')
    {"requiredFeatures", SVGTextContentElementV8Internal::requiredFeaturesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'requiredExtensions' (Type: 'readonly attribute' ExtAttr: '')
    {"requiredExtensions", SVGTextContentElementV8Internal::requiredExtensionsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'systemLanguage' (Type: 'readonly attribute' ExtAttr: '')
    {"systemLanguage", SVGTextContentElementV8Internal::systemLanguageAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xmllang' (Type: 'attribute' ExtAttr: '')
    {"xmllang", SVGTextContentElementV8Internal::xmllangAttrGetter, SVGTextContentElementV8Internal::xmllangAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xmlspace' (Type: 'attribute' ExtAttr: '')
    {"xmlspace", SVGTextContentElementV8Internal::xmlspaceAttrGetter, SVGTextContentElementV8Internal::xmlspaceAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'externalResourcesRequired' (Type: 'readonly attribute' ExtAttr: '')
    {"externalResourcesRequired", SVGTextContentElementV8Internal::externalResourcesRequiredAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'className' (Type: 'readonly attribute' ExtAttr: '')
    {"className", SVGTextContentElementV8Internal::classNameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'style' (Type: 'readonly attribute' ExtAttr: '')
    {"style", SVGTextContentElementV8Internal::styleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8SVGTextContentElementCallbacks[] = {
    {"getNumberOfChars", SVGTextContentElementV8Internal::getNumberOfCharsCallback},
    {"getComputedTextLength", SVGTextContentElementV8Internal::getComputedTextLengthCallback},
    {"getSubStringLength", SVGTextContentElementV8Internal::getSubStringLengthCallback},
    {"getStartPositionOfChar", SVGTextContentElementV8Internal::getStartPositionOfCharCallback},
    {"getEndPositionOfChar", SVGTextContentElementV8Internal::getEndPositionOfCharCallback},
    {"getExtentOfChar", SVGTextContentElementV8Internal::getExtentOfCharCallback},
    {"getRotationOfChar", SVGTextContentElementV8Internal::getRotationOfCharCallback},
    {"selectSubString", SVGTextContentElementV8Internal::selectSubStringCallback},
    {"hasExtension", SVGTextContentElementV8Internal::hasExtensionCallback},
    {"getPresentationAttribute", SVGTextContentElementV8Internal::getPresentationAttributeCallback},
};

static const V8DOMConfiguration::BatchedConstant V8SVGTextContentElementConsts[] = {
    {"LENGTHADJUST_UNKNOWN", static_cast<signed int>(0)},
    {"LENGTHADJUST_SPACING", static_cast<signed int>(1)},
    {"LENGTHADJUST_SPACINGANDGLYPHS", static_cast<signed int>(2)},
};


COMPILE_ASSERT(0 == SVGTextContentElement::LENGTHADJUST_UNKNOWN, SVGTextContentElementEnumLENGTHADJUST_UNKNOWNIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == SVGTextContentElement::LENGTHADJUST_SPACING, SVGTextContentElementEnumLENGTHADJUST_SPACINGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == SVGTextContentElement::LENGTHADJUST_SPACINGANDGLYPHS, SVGTextContentElementEnumLENGTHADJUST_SPACINGANDGLYPHSIsWrongUseDoNotCheckConstants);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGTextContentElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "SVGTextContentElement", V8SVGElement::GetTemplate(), V8SVGTextContentElement::internalFieldCount,
        V8SVGTextContentElementAttrs, WTF_ARRAY_LENGTH(V8SVGTextContentElementAttrs),
        V8SVGTextContentElementCallbacks, WTF_ARRAY_LENGTH(V8SVGTextContentElementCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'getCharNumAtPosition'
    const int getCharNumAtPositionArgc = 1;
    v8::Handle<v8::FunctionTemplate> getCharNumAtPositionArgv[getCharNumAtPositionArgc] = { V8SVGPoint::GetRawTemplate() };
    v8::Handle<v8::Signature> getCharNumAtPositionSignature = v8::Signature::New(desc, getCharNumAtPositionArgc, getCharNumAtPositionArgv);
    proto->Set(v8::String::NewSymbol("getCharNumAtPosition"), v8::FunctionTemplate::New(SVGTextContentElementV8Internal::getCharNumAtPositionCallback, v8Undefined(), getCharNumAtPositionSignature));
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8SVGTextContentElementConsts, WTF_ARRAY_LENGTH(V8SVGTextContentElementConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGTextContentElement::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8SVGTextContentElement::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8SVGTextContentElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8SVGTextContentElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGTextContentElement::createWrapper(PassRefPtr<SVGTextContentElement> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<Node*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8SVGTextContentElement::derefObject(void* object)
{
    static_cast<SVGTextContentElement*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
