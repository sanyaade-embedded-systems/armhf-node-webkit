/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8AudioBuffer.h"

#if ENABLE(WEB_AUDIO)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8Float32Array.h"
#include <wtf/Float32Array.h>
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8AudioBuffer::info = { V8AudioBuffer::GetTemplate, V8AudioBuffer::derefObject, 0, 0, V8AudioBuffer::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace AudioBufferV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> lengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioBuffer* imp = V8AudioBuffer::toNative(info.Holder());
    return v8Integer(imp->length(), info.GetIsolate());
}

static v8::Handle<v8::Value> durationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioBuffer* imp = V8AudioBuffer::toNative(info.Holder());
    return v8::Number::New(imp->duration());
}

static v8::Handle<v8::Value> sampleRateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioBuffer* imp = V8AudioBuffer::toNative(info.Holder());
    return v8::Number::New(imp->sampleRate());
}

static v8::Handle<v8::Value> gainAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioBuffer* imp = V8AudioBuffer::toNative(info.Holder());
    return v8::Number::New(imp->gain());
}

static void gainAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    AudioBuffer* imp = V8AudioBuffer::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setGain(v);
    return;
}

static v8::Handle<v8::Value> numberOfChannelsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioBuffer* imp = V8AudioBuffer::toNative(info.Holder());
    return v8UnsignedInteger(imp->numberOfChannels(), info.GetIsolate());
}

static v8::Handle<v8::Value> getChannelDataCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioBuffer* imp = V8AudioBuffer::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, channelIndex, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    RefPtr<Float32Array> result = imp->getChannelData(channelIndex, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace AudioBufferV8Internal

static const V8DOMConfiguration::BatchedAttribute V8AudioBufferAttrs[] = {
    // Attribute 'length' (Type: 'readonly attribute' ExtAttr: '')
    {"length", AudioBufferV8Internal::lengthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'duration' (Type: 'readonly attribute' ExtAttr: '')
    {"duration", AudioBufferV8Internal::durationAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'sampleRate' (Type: 'readonly attribute' ExtAttr: '')
    {"sampleRate", AudioBufferV8Internal::sampleRateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'gain' (Type: 'attribute' ExtAttr: '')
    {"gain", AudioBufferV8Internal::gainAttrGetter, AudioBufferV8Internal::gainAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'numberOfChannels' (Type: 'readonly attribute' ExtAttr: '')
    {"numberOfChannels", AudioBufferV8Internal::numberOfChannelsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8AudioBufferCallbacks[] = {
    {"getChannelData", AudioBufferV8Internal::getChannelDataCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8AudioBufferTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "AudioBuffer", v8::Persistent<v8::FunctionTemplate>(), V8AudioBuffer::internalFieldCount,
        V8AudioBufferAttrs, WTF_ARRAY_LENGTH(V8AudioBufferAttrs),
        V8AudioBufferCallbacks, WTF_ARRAY_LENGTH(V8AudioBufferCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8AudioBuffer::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8AudioBuffer::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8AudioBufferTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8AudioBuffer::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8AudioBuffer::createWrapper(PassRefPtr<AudioBuffer> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8AudioBuffer::derefObject(void* object)
{
    static_cast<AudioBuffer*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(WEB_AUDIO)
