/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8NodeFilter.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8Node.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8NodeFilter::info = { V8NodeFilter::GetTemplate, V8NodeFilter::derefObject, 0, 0, V8NodeFilter::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace NodeFilterV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> acceptNodeCallback(const v8::Arguments& args)
{
    NodeFilter* imp = V8NodeFilter::toNative(args.Holder());
    V8TRYCATCH(Node*, n, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    int result = imp->acceptNode(&state, n);
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return v8Integer(result, args.GetIsolate());
}

} // namespace NodeFilterV8Internal

static const V8DOMConfiguration::BatchedConstant V8NodeFilterConsts[] = {
    {"FILTER_ACCEPT", static_cast<signed int>(1)},
    {"FILTER_REJECT", static_cast<signed int>(2)},
    {"FILTER_SKIP", static_cast<signed int>(3)},
    {"SHOW_ALL", static_cast<signed int>(0xFFFFFFFF)},
    {"SHOW_ELEMENT", static_cast<signed int>(0x00000001)},
    {"SHOW_ATTRIBUTE", static_cast<signed int>(0x00000002)},
    {"SHOW_TEXT", static_cast<signed int>(0x00000004)},
    {"SHOW_CDATA_SECTION", static_cast<signed int>(0x00000008)},
    {"SHOW_ENTITY_REFERENCE", static_cast<signed int>(0x00000010)},
    {"SHOW_ENTITY", static_cast<signed int>(0x00000020)},
    {"SHOW_PROCESSING_INSTRUCTION", static_cast<signed int>(0x00000040)},
    {"SHOW_COMMENT", static_cast<signed int>(0x00000080)},
    {"SHOW_DOCUMENT", static_cast<signed int>(0x00000100)},
    {"SHOW_DOCUMENT_TYPE", static_cast<signed int>(0x00000200)},
    {"SHOW_DOCUMENT_FRAGMENT", static_cast<signed int>(0x00000400)},
    {"SHOW_NOTATION", static_cast<signed int>(0x00000800)},
};


COMPILE_ASSERT(1 == NodeFilter::FILTER_ACCEPT, NodeFilterEnumFILTER_ACCEPTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == NodeFilter::FILTER_REJECT, NodeFilterEnumFILTER_REJECTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == NodeFilter::FILTER_SKIP, NodeFilterEnumFILTER_SKIPIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0xFFFFFFFF == NodeFilter::SHOW_ALL, NodeFilterEnumSHOW_ALLIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000001 == NodeFilter::SHOW_ELEMENT, NodeFilterEnumSHOW_ELEMENTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000002 == NodeFilter::SHOW_ATTRIBUTE, NodeFilterEnumSHOW_ATTRIBUTEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000004 == NodeFilter::SHOW_TEXT, NodeFilterEnumSHOW_TEXTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000008 == NodeFilter::SHOW_CDATA_SECTION, NodeFilterEnumSHOW_CDATA_SECTIONIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000010 == NodeFilter::SHOW_ENTITY_REFERENCE, NodeFilterEnumSHOW_ENTITY_REFERENCEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000020 == NodeFilter::SHOW_ENTITY, NodeFilterEnumSHOW_ENTITYIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000040 == NodeFilter::SHOW_PROCESSING_INSTRUCTION, NodeFilterEnumSHOW_PROCESSING_INSTRUCTIONIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000080 == NodeFilter::SHOW_COMMENT, NodeFilterEnumSHOW_COMMENTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000100 == NodeFilter::SHOW_DOCUMENT, NodeFilterEnumSHOW_DOCUMENTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000200 == NodeFilter::SHOW_DOCUMENT_TYPE, NodeFilterEnumSHOW_DOCUMENT_TYPEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000400 == NodeFilter::SHOW_DOCUMENT_FRAGMENT, NodeFilterEnumSHOW_DOCUMENT_FRAGMENTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x00000800 == NodeFilter::SHOW_NOTATION, NodeFilterEnumSHOW_NOTATIONIsWrongUseDoNotCheckConstants);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8NodeFilterTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "NodeFilter", v8::Persistent<v8::FunctionTemplate>(), V8NodeFilter::internalFieldCount,
        0, 0,
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'acceptNode'
    const int acceptNodeArgc = 1;
    v8::Handle<v8::FunctionTemplate> acceptNodeArgv[acceptNodeArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> acceptNodeSignature = v8::Signature::New(desc, acceptNodeArgc, acceptNodeArgv);
    proto->Set(v8::String::NewSymbol("acceptNode"), v8::FunctionTemplate::New(NodeFilterV8Internal::acceptNodeCallback, v8Undefined(), acceptNodeSignature));
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8NodeFilterConsts, WTF_ARRAY_LENGTH(V8NodeFilterConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8NodeFilter::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8NodeFilter::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8NodeFilterTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8NodeFilter::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8NodeFilter::createWrapper(PassRefPtr<NodeFilter> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8NodeFilter::derefObject(void* object)
{
    static_cast<NodeFilter*>(object)->deref();
}

} // namespace WebCore
