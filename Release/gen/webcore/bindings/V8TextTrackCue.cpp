/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8TextTrackCue.h"

#if ENABLE(VIDEO_TRACK)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8DocumentFragment.h"
#include "V8Event.h"
#include "V8TextTrack.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8TextTrackCue::info = { V8TextTrackCue::GetTemplate, V8TextTrackCue::derefObject, 0, 0, V8TextTrackCue::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace TextTrackCueV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> trackAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    RefPtr<TextTrack> result = imp->track();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "track", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> idAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    return v8String(imp->id(), info.GetIsolate());
}

static void idAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setId(v);
    return;
}

static v8::Handle<v8::Value> startTimeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    return v8::Number::New(imp->startTime());
}

static void startTimeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    double v = static_cast<double>(value->NumberValue());
    ExceptionCode ec = 0;
    imp->setStartTime(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> endTimeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    return v8::Number::New(imp->endTime());
}

static void endTimeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    double v = static_cast<double>(value->NumberValue());
    ExceptionCode ec = 0;
    imp->setEndTime(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> pauseOnExitAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    return v8Boolean(imp->pauseOnExit(), info.GetIsolate());
}

static void pauseOnExitAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setPauseOnExit(v);
    return;
}

static v8::Handle<v8::Value> verticalAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    return v8String(imp->vertical(), info.GetIsolate());
}

static void verticalAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    ExceptionCode ec = 0;
    imp->setVertical(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> snapToLinesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    return v8Boolean(imp->snapToLines(), info.GetIsolate());
}

static void snapToLinesAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setSnapToLines(v);
    return;
}

static v8::Handle<v8::Value> lineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    return v8Integer(imp->line(), info.GetIsolate());
}

static void lineAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    int v = toInt32(value);
    ExceptionCode ec = 0;
    imp->setLine(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> positionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    return v8Integer(imp->position(), info.GetIsolate());
}

static void positionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    int v = toInt32(value);
    ExceptionCode ec = 0;
    imp->setPosition(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> sizeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    return v8Integer(imp->size(), info.GetIsolate());
}

static void sizeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    int v = toInt32(value);
    ExceptionCode ec = 0;
    imp->setSize(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> alignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    return v8String(imp->align(), info.GetIsolate());
}

static void alignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    ExceptionCode ec = 0;
    imp->setAlign(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> textAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    return v8String(imp->text(), info.GetIsolate());
}

static void textAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setText(v);
    return;
}

static v8::Handle<v8::Value> onenterAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    return imp->onenter() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onenter())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onenterAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onenter(), value, V8TextTrackCue::eventListenerCacheIndex);
    imp->setOnenter(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onexitAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    return imp->onexit() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onexit())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onexitAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onexit(), value, V8TextTrackCue::eventListenerCacheIndex);
    imp->setOnexit(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> getCueAsHTMLCallback(const v8::Arguments& args)
{
    TextTrackCue* imp = V8TextTrackCue::toNative(args.Holder());
    return toV8(imp->getCueAsHTML(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> addEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOrCreate);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8TextTrackCue::toNative(args.Holder())->addEventListener(stringResource, listener, args[2]->BooleanValue());
        createHiddenDependency(args.Holder(), args[1], V8TextTrackCue::eventListenerCacheIndex);
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> removeEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOnly);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8TextTrackCue::toNative(args.Holder())->removeEventListener(stringResource, listener.get(), args[2]->BooleanValue());
        removeHiddenDependency(args.Holder(), args[1], V8TextTrackCue::eventListenerCacheIndex);
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    TextTrackCue* imp = V8TextTrackCue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Event*, evt, V8Event::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    bool result = imp->dispatchEvent(evt, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace TextTrackCueV8Internal

static const V8DOMConfiguration::BatchedAttribute V8TextTrackCueAttrs[] = {
    // Attribute 'track' (Type: 'readonly attribute' ExtAttr: '')
    {"track", TextTrackCueV8Internal::trackAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'id' (Type: 'attribute' ExtAttr: '')
    {"id", TextTrackCueV8Internal::idAttrGetter, TextTrackCueV8Internal::idAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'startTime' (Type: 'attribute' ExtAttr: '')
    {"startTime", TextTrackCueV8Internal::startTimeAttrGetter, TextTrackCueV8Internal::startTimeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'endTime' (Type: 'attribute' ExtAttr: '')
    {"endTime", TextTrackCueV8Internal::endTimeAttrGetter, TextTrackCueV8Internal::endTimeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'pauseOnExit' (Type: 'attribute' ExtAttr: '')
    {"pauseOnExit", TextTrackCueV8Internal::pauseOnExitAttrGetter, TextTrackCueV8Internal::pauseOnExitAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'vertical' (Type: 'attribute' ExtAttr: '')
    {"vertical", TextTrackCueV8Internal::verticalAttrGetter, TextTrackCueV8Internal::verticalAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'snapToLines' (Type: 'attribute' ExtAttr: '')
    {"snapToLines", TextTrackCueV8Internal::snapToLinesAttrGetter, TextTrackCueV8Internal::snapToLinesAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'line' (Type: 'attribute' ExtAttr: '')
    {"line", TextTrackCueV8Internal::lineAttrGetter, TextTrackCueV8Internal::lineAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'position' (Type: 'attribute' ExtAttr: '')
    {"position", TextTrackCueV8Internal::positionAttrGetter, TextTrackCueV8Internal::positionAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'size' (Type: 'attribute' ExtAttr: '')
    {"size", TextTrackCueV8Internal::sizeAttrGetter, TextTrackCueV8Internal::sizeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'align' (Type: 'attribute' ExtAttr: '')
    {"align", TextTrackCueV8Internal::alignAttrGetter, TextTrackCueV8Internal::alignAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'text' (Type: 'attribute' ExtAttr: '')
    {"text", TextTrackCueV8Internal::textAttrGetter, TextTrackCueV8Internal::textAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onenter' (Type: 'attribute' ExtAttr: '')
    {"onenter", TextTrackCueV8Internal::onenterAttrGetter, TextTrackCueV8Internal::onenterAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onexit' (Type: 'attribute' ExtAttr: '')
    {"onexit", TextTrackCueV8Internal::onexitAttrGetter, TextTrackCueV8Internal::onexitAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8TextTrackCueCallbacks[] = {
    {"getCueAsHTML", TextTrackCueV8Internal::getCueAsHTMLCallback},
    {"addEventListener", TextTrackCueV8Internal::addEventListenerCallback},
    {"removeEventListener", TextTrackCueV8Internal::removeEventListenerCallback},
};

v8::Handle<v8::Value> V8TextTrackCue::constructorCallback(const v8::Arguments& args)
{
    
    if (!args.IsConstructCall())
        return throwTypeError("DOM object constructor cannot be called as a function.");

    if (ConstructorMode::current() == ConstructorMode::WrapExistingObject)
        return args.Holder();
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    V8TRYCATCH(double, startTime, static_cast<double>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(double, endTime, static_cast<double>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, text, MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined));

    ScriptExecutionContext* context = getScriptExecutionContext();

    RefPtr<TextTrackCue> impl = TextTrackCue::create(context, startTime, endTime, text);
    v8::Handle<v8::Object> wrapper = args.Holder();

    V8DOMWrapper::associateObjectWithWrapper(impl.release(), &info, wrapper, args.GetIsolate());
    return wrapper;
}

static v8::Persistent<v8::FunctionTemplate> ConfigureV8TextTrackCueTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::webkitVideoTrackEnabled())
        defaultSignature = V8DOMConfiguration::configureTemplate(desc, "", v8::Persistent<v8::FunctionTemplate>(), V8TextTrackCue::internalFieldCount, 0, 0, 0, 0);
    else
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "TextTrackCue", v8::Persistent<v8::FunctionTemplate>(), V8TextTrackCue::internalFieldCount,
        V8TextTrackCueAttrs, WTF_ARRAY_LENGTH(V8TextTrackCueAttrs),
        V8TextTrackCueCallbacks, WTF_ARRAY_LENGTH(V8TextTrackCueCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    desc->SetCallHandler(V8TextTrackCue::constructorCallback);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'dispatchEvent'
    const int dispatchEventArgc = 1;
    v8::Handle<v8::FunctionTemplate> dispatchEventArgv[dispatchEventArgc] = { V8Event::GetRawTemplate() };
    v8::Handle<v8::Signature> dispatchEventSignature = v8::Signature::New(desc, dispatchEventArgc, dispatchEventArgv);
    proto->Set(v8::String::NewSymbol("dispatchEvent"), v8::FunctionTemplate::New(TextTrackCueV8Internal::dispatchEventCallback, v8Undefined(), dispatchEventSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8TextTrackCue::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8TextTrackCue::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8TextTrackCueTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8TextTrackCue::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8TextTrackCue::createWrapper(PassRefPtr<TextTrackCue> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8TextTrackCue::derefObject(void* object)
{
    static_cast<TextTrackCue*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(VIDEO_TRACK)
