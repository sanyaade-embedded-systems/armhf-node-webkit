/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8MediaController.h"

#if ENABLE(VIDEO)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8Event.h"
#include "V8TimeRanges.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8MediaController::info = { V8MediaController::GetTemplate, V8MediaController::derefObject, 0, 0, V8MediaController::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace MediaControllerV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> bufferedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    RefPtr<TimeRanges> result = imp->buffered();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "buffered", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> seekableAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    RefPtr<TimeRanges> result = imp->seekable();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "seekable", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> durationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    return v8::Number::New(imp->duration());
}

static v8::Handle<v8::Value> currentTimeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    return v8::Number::New(imp->currentTime());
}

static void currentTimeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    double v = static_cast<double>(value->NumberValue());
    ExceptionCode ec = 0;
    imp->setCurrentTime(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> pausedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    return v8Boolean(imp->paused(), info.GetIsolate());
}

static v8::Handle<v8::Value> playedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    RefPtr<TimeRanges> result = imp->played();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "played", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> playbackStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    return v8String(imp->playbackState(), info.GetIsolate());
}

static v8::Handle<v8::Value> defaultPlaybackRateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    return v8::Number::New(imp->defaultPlaybackRate());
}

static void defaultPlaybackRateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    double v = static_cast<double>(value->NumberValue());
    imp->setDefaultPlaybackRate(v);
    return;
}

static v8::Handle<v8::Value> playbackRateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    return v8::Number::New(imp->playbackRate());
}

static void playbackRateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    double v = static_cast<double>(value->NumberValue());
    imp->setPlaybackRate(v);
    return;
}

static v8::Handle<v8::Value> volumeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    return v8::Number::New(imp->volume());
}

static void volumeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    double v = static_cast<double>(value->NumberValue());
    ExceptionCode ec = 0;
    imp->setVolume(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> mutedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    return v8Boolean(imp->muted(), info.GetIsolate());
}

static void mutedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    MediaController* imp = V8MediaController::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setMuted(v);
    return;
}

static v8::Handle<v8::Value> playCallback(const v8::Arguments& args)
{
    MediaController* imp = V8MediaController::toNative(args.Holder());
    imp->play();
    return v8Undefined();
}

static v8::Handle<v8::Value> pauseCallback(const v8::Arguments& args)
{
    MediaController* imp = V8MediaController::toNative(args.Holder());
    imp->pause();
    return v8Undefined();
}

static v8::Handle<v8::Value> unpauseCallback(const v8::Arguments& args)
{
    MediaController* imp = V8MediaController::toNative(args.Holder());
    imp->unpause();
    return v8Undefined();
}

static v8::Handle<v8::Value> addEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOrCreate);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8MediaController::toNative(args.Holder())->addEventListener(stringResource, listener, args[2]->BooleanValue());
        createHiddenDependency(args.Holder(), args[1], V8MediaController::eventListenerCacheIndex);
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> removeEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOnly);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8MediaController::toNative(args.Holder())->removeEventListener(stringResource, listener.get(), args[2]->BooleanValue());
        removeHiddenDependency(args.Holder(), args[1], V8MediaController::eventListenerCacheIndex);
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    MediaController* imp = V8MediaController::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Event*, evt, V8Event::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    bool result = imp->dispatchEvent(evt, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace MediaControllerV8Internal

static const V8DOMConfiguration::BatchedAttribute V8MediaControllerAttrs[] = {
    // Attribute 'buffered' (Type: 'readonly attribute' ExtAttr: '')
    {"buffered", MediaControllerV8Internal::bufferedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'seekable' (Type: 'readonly attribute' ExtAttr: '')
    {"seekable", MediaControllerV8Internal::seekableAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'duration' (Type: 'readonly attribute' ExtAttr: '')
    {"duration", MediaControllerV8Internal::durationAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'currentTime' (Type: 'attribute' ExtAttr: '')
    {"currentTime", MediaControllerV8Internal::currentTimeAttrGetter, MediaControllerV8Internal::currentTimeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'paused' (Type: 'readonly attribute' ExtAttr: '')
    {"paused", MediaControllerV8Internal::pausedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'played' (Type: 'readonly attribute' ExtAttr: '')
    {"played", MediaControllerV8Internal::playedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'playbackState' (Type: 'readonly attribute' ExtAttr: '')
    {"playbackState", MediaControllerV8Internal::playbackStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultPlaybackRate' (Type: 'attribute' ExtAttr: '')
    {"defaultPlaybackRate", MediaControllerV8Internal::defaultPlaybackRateAttrGetter, MediaControllerV8Internal::defaultPlaybackRateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'playbackRate' (Type: 'attribute' ExtAttr: '')
    {"playbackRate", MediaControllerV8Internal::playbackRateAttrGetter, MediaControllerV8Internal::playbackRateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'volume' (Type: 'attribute' ExtAttr: '')
    {"volume", MediaControllerV8Internal::volumeAttrGetter, MediaControllerV8Internal::volumeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'muted' (Type: 'attribute' ExtAttr: '')
    {"muted", MediaControllerV8Internal::mutedAttrGetter, MediaControllerV8Internal::mutedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8MediaControllerCallbacks[] = {
    {"play", MediaControllerV8Internal::playCallback},
    {"pause", MediaControllerV8Internal::pauseCallback},
    {"unpause", MediaControllerV8Internal::unpauseCallback},
    {"addEventListener", MediaControllerV8Internal::addEventListenerCallback},
    {"removeEventListener", MediaControllerV8Internal::removeEventListenerCallback},
};

v8::Handle<v8::Value> V8MediaController::constructorCallback(const v8::Arguments& args)
{
    
    if (!args.IsConstructCall())
        return throwTypeError("DOM object constructor cannot be called as a function.");

    if (ConstructorMode::current() == ConstructorMode::WrapExistingObject)
        return args.Holder();

    ScriptExecutionContext* context = getScriptExecutionContext();

    RefPtr<MediaController> impl = MediaController::create(context);
    v8::Handle<v8::Object> wrapper = args.Holder();

    V8DOMWrapper::associateObjectWithWrapper(impl.release(), &info, wrapper, args.GetIsolate());
    return wrapper;
}

static v8::Persistent<v8::FunctionTemplate> ConfigureV8MediaControllerTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "MediaController", v8::Persistent<v8::FunctionTemplate>(), V8MediaController::internalFieldCount,
        V8MediaControllerAttrs, WTF_ARRAY_LENGTH(V8MediaControllerAttrs),
        V8MediaControllerCallbacks, WTF_ARRAY_LENGTH(V8MediaControllerCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    desc->SetCallHandler(V8MediaController::constructorCallback);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'dispatchEvent'
    const int dispatchEventArgc = 1;
    v8::Handle<v8::FunctionTemplate> dispatchEventArgv[dispatchEventArgc] = { V8Event::GetRawTemplate() };
    v8::Handle<v8::Signature> dispatchEventSignature = v8::Signature::New(desc, dispatchEventArgc, dispatchEventArgv);
    proto->Set(v8::String::NewSymbol("dispatchEvent"), v8::FunctionTemplate::New(MediaControllerV8Internal::dispatchEventCallback, v8Undefined(), dispatchEventSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8MediaController::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8MediaController::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8MediaControllerTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8MediaController::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8MediaController::createWrapper(PassRefPtr<MediaController> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8MediaController::derefObject(void* object)
{
    static_cast<MediaController*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(VIDEO)
