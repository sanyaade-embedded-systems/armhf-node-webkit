/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8MediaStreamTrack.h"

#if ENABLE(MEDIA_STREAM)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8Event.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8MediaStreamTrack::info = { V8MediaStreamTrack::GetTemplate, V8MediaStreamTrack::derefObject, V8MediaStreamTrack::toActiveDOMObject, 0, V8MediaStreamTrack::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace MediaStreamTrackV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> kindAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaStreamTrack* imp = V8MediaStreamTrack::toNative(info.Holder());
    return v8String(imp->kind(), info.GetIsolate());
}

static v8::Handle<v8::Value> labelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaStreamTrack* imp = V8MediaStreamTrack::toNative(info.Holder());
    return v8String(imp->label(), info.GetIsolate());
}

static v8::Handle<v8::Value> enabledAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaStreamTrack* imp = V8MediaStreamTrack::toNative(info.Holder());
    return v8Boolean(imp->enabled(), info.GetIsolate());
}

static void enabledAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    MediaStreamTrack* imp = V8MediaStreamTrack::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setEnabled(v);
    return;
}

static v8::Handle<v8::Value> readyStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaStreamTrack* imp = V8MediaStreamTrack::toNative(info.Holder());
    return v8Integer(imp->readyState(), info.GetIsolate());
}

static v8::Handle<v8::Value> onmuteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaStreamTrack* imp = V8MediaStreamTrack::toNative(info.Holder());
    return imp->onmute() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmute())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmuteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    MediaStreamTrack* imp = V8MediaStreamTrack::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmute(), value, V8MediaStreamTrack::eventListenerCacheIndex);
    imp->setOnmute(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onunmuteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaStreamTrack* imp = V8MediaStreamTrack::toNative(info.Holder());
    return imp->onunmute() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onunmute())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onunmuteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    MediaStreamTrack* imp = V8MediaStreamTrack::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onunmute(), value, V8MediaStreamTrack::eventListenerCacheIndex);
    imp->setOnunmute(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onendedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    MediaStreamTrack* imp = V8MediaStreamTrack::toNative(info.Holder());
    return imp->onended() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onended())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onendedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    MediaStreamTrack* imp = V8MediaStreamTrack::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onended(), value, V8MediaStreamTrack::eventListenerCacheIndex);
    imp->setOnended(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> addEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOrCreate);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8MediaStreamTrack::toNative(args.Holder())->addEventListener(stringResource, listener, args[2]->BooleanValue());
        createHiddenDependency(args.Holder(), args[1], V8MediaStreamTrack::eventListenerCacheIndex);
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> removeEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOnly);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8MediaStreamTrack::toNative(args.Holder())->removeEventListener(stringResource, listener.get(), args[2]->BooleanValue());
        removeHiddenDependency(args.Holder(), args[1], V8MediaStreamTrack::eventListenerCacheIndex);
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    MediaStreamTrack* imp = V8MediaStreamTrack::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Event*, event, V8Event::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    bool result = imp->dispatchEvent(event, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace MediaStreamTrackV8Internal

static const V8DOMConfiguration::BatchedAttribute V8MediaStreamTrackAttrs[] = {
    // Attribute 'kind' (Type: 'readonly attribute' ExtAttr: '')
    {"kind", MediaStreamTrackV8Internal::kindAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'label' (Type: 'readonly attribute' ExtAttr: '')
    {"label", MediaStreamTrackV8Internal::labelAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'enabled' (Type: 'attribute' ExtAttr: '')
    {"enabled", MediaStreamTrackV8Internal::enabledAttrGetter, MediaStreamTrackV8Internal::enabledAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'readyState' (Type: 'readonly attribute' ExtAttr: '')
    {"readyState", MediaStreamTrackV8Internal::readyStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onmute' (Type: 'attribute' ExtAttr: '')
    {"onmute", MediaStreamTrackV8Internal::onmuteAttrGetter, MediaStreamTrackV8Internal::onmuteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onunmute' (Type: 'attribute' ExtAttr: '')
    {"onunmute", MediaStreamTrackV8Internal::onunmuteAttrGetter, MediaStreamTrackV8Internal::onunmuteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onended' (Type: 'attribute' ExtAttr: '')
    {"onended", MediaStreamTrackV8Internal::onendedAttrGetter, MediaStreamTrackV8Internal::onendedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8MediaStreamTrackCallbacks[] = {
    {"addEventListener", MediaStreamTrackV8Internal::addEventListenerCallback},
    {"removeEventListener", MediaStreamTrackV8Internal::removeEventListenerCallback},
};

static const V8DOMConfiguration::BatchedConstant V8MediaStreamTrackConsts[] = {
    {"LIVE", static_cast<signed int>(0)},
    {"MUTED", static_cast<signed int>(1)},
    {"ENDED", static_cast<signed int>(2)},
};


COMPILE_ASSERT(0 == MediaStreamTrack::LIVE, MediaStreamTrackEnumLIVEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == MediaStreamTrack::MUTED, MediaStreamTrackEnumMUTEDIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == MediaStreamTrack::ENDED, MediaStreamTrackEnumENDEDIsWrongUseDoNotCheckConstants);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8MediaStreamTrackTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "MediaStreamTrack", v8::Persistent<v8::FunctionTemplate>(), V8MediaStreamTrack::internalFieldCount,
        V8MediaStreamTrackAttrs, WTF_ARRAY_LENGTH(V8MediaStreamTrackAttrs),
        V8MediaStreamTrackCallbacks, WTF_ARRAY_LENGTH(V8MediaStreamTrackCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'dispatchEvent'
    const int dispatchEventArgc = 1;
    v8::Handle<v8::FunctionTemplate> dispatchEventArgv[dispatchEventArgc] = { V8Event::GetRawTemplate() };
    v8::Handle<v8::Signature> dispatchEventSignature = v8::Signature::New(desc, dispatchEventArgc, dispatchEventArgv);
    proto->Set(v8::String::NewSymbol("dispatchEvent"), v8::FunctionTemplate::New(MediaStreamTrackV8Internal::dispatchEventCallback, v8Undefined(), dispatchEventSignature));
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8MediaStreamTrackConsts, WTF_ARRAY_LENGTH(V8MediaStreamTrackConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8MediaStreamTrack::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8MediaStreamTrack::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8MediaStreamTrackTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8MediaStreamTrack::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}

ActiveDOMObject* V8MediaStreamTrack::toActiveDOMObject(v8::Handle<v8::Object> object)
{
    return toNative(object);
}      

v8::Handle<v8::Object> V8MediaStreamTrack::createWrapper(PassRefPtr<MediaStreamTrack> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8MediaStreamTrack::derefObject(void* object)
{
    static_cast<MediaStreamTrack*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(MEDIA_STREAM)
