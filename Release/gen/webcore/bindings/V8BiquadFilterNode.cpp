/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8BiquadFilterNode.h"

#if ENABLE(WEB_AUDIO)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AudioNode.h"
#include "V8AudioParam.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8Float32Array.h"
#include <wtf/Float32Array.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8BiquadFilterNode::info = { V8BiquadFilterNode::GetTemplate, V8BiquadFilterNode::derefObject, 0, 0, V8BiquadFilterNode::installPerContextPrototypeProperties, &V8AudioNode::info, WrapperTypeObjectPrototype };

namespace BiquadFilterNodeV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    BiquadFilterNode* imp = V8BiquadFilterNode::toNative(info.Holder());
    return v8String(imp->type(), info.GetIsolate());
}

static v8::Handle<v8::Value> frequencyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    BiquadFilterNode* imp = V8BiquadFilterNode::toNative(info.Holder());
    RefPtr<AudioParam> result = imp->frequency();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "frequency", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> detuneAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    BiquadFilterNode* imp = V8BiquadFilterNode::toNative(info.Holder());
    RefPtr<AudioParam> result = imp->detune();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "detune", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> QAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    BiquadFilterNode* imp = V8BiquadFilterNode::toNative(info.Holder());
    RefPtr<AudioParam> result = imp->q();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "Q", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> gainAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    BiquadFilterNode* imp = V8BiquadFilterNode::toNative(info.Holder());
    RefPtr<AudioParam> result = imp->gain();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "gain", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> getFrequencyResponseCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    BiquadFilterNode* imp = V8BiquadFilterNode::toNative(args.Holder());
    V8TRYCATCH(Float32Array*, frequencyHz, V8Float32Array::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Float32Array::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(Float32Array*, magResponse, V8Float32Array::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8Float32Array::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    V8TRYCATCH(Float32Array*, phaseResponse, V8Float32Array::HasInstance(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)) ? V8Float32Array::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined))) : 0);
    imp->getFrequencyResponse(frequencyHz, magResponse, phaseResponse);
    return v8Undefined();
}

} // namespace BiquadFilterNodeV8Internal

static const V8DOMConfiguration::BatchedAttribute V8BiquadFilterNodeAttrs[] = {
    // Attribute 'type' (Type: 'attribute' ExtAttr: 'CustomSetter')
    {"type", BiquadFilterNodeV8Internal::typeAttrGetter, V8BiquadFilterNode::typeAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'frequency' (Type: 'readonly attribute' ExtAttr: '')
    {"frequency", BiquadFilterNodeV8Internal::frequencyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'detune' (Type: 'readonly attribute' ExtAttr: '')
    {"detune", BiquadFilterNodeV8Internal::detuneAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'Q' (Type: 'readonly attribute' ExtAttr: '')
    {"Q", BiquadFilterNodeV8Internal::QAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'gain' (Type: 'readonly attribute' ExtAttr: '')
    {"gain", BiquadFilterNodeV8Internal::gainAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedConstant V8BiquadFilterNodeConsts[] = {
    {"LOWPASS", static_cast<signed int>(0)},
    {"HIGHPASS", static_cast<signed int>(1)},
    {"BANDPASS", static_cast<signed int>(2)},
    {"LOWSHELF", static_cast<signed int>(3)},
    {"HIGHSHELF", static_cast<signed int>(4)},
    {"PEAKING", static_cast<signed int>(5)},
    {"NOTCH", static_cast<signed int>(6)},
    {"ALLPASS", static_cast<signed int>(7)},
};


COMPILE_ASSERT(0 == BiquadFilterNode::LOWPASS, BiquadFilterNodeEnumLOWPASSIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == BiquadFilterNode::HIGHPASS, BiquadFilterNodeEnumHIGHPASSIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == BiquadFilterNode::BANDPASS, BiquadFilterNodeEnumBANDPASSIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == BiquadFilterNode::LOWSHELF, BiquadFilterNodeEnumLOWSHELFIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(4 == BiquadFilterNode::HIGHSHELF, BiquadFilterNodeEnumHIGHSHELFIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(5 == BiquadFilterNode::PEAKING, BiquadFilterNodeEnumPEAKINGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(6 == BiquadFilterNode::NOTCH, BiquadFilterNodeEnumNOTCHIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(7 == BiquadFilterNode::ALLPASS, BiquadFilterNodeEnumALLPASSIsWrongUseDoNotCheckConstants);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8BiquadFilterNodeTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "BiquadFilterNode", V8AudioNode::GetTemplate(), V8BiquadFilterNode::internalFieldCount,
        V8BiquadFilterNodeAttrs, WTF_ARRAY_LENGTH(V8BiquadFilterNodeAttrs),
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'getFrequencyResponse'
    const int getFrequencyResponseArgc = 3;
    v8::Handle<v8::FunctionTemplate> getFrequencyResponseArgv[getFrequencyResponseArgc] = { V8Float32Array::GetRawTemplate(), V8Float32Array::GetRawTemplate(), V8Float32Array::GetRawTemplate() };
    v8::Handle<v8::Signature> getFrequencyResponseSignature = v8::Signature::New(desc, getFrequencyResponseArgc, getFrequencyResponseArgv);
    proto->Set(v8::String::NewSymbol("getFrequencyResponse"), v8::FunctionTemplate::New(BiquadFilterNodeV8Internal::getFrequencyResponseCallback, v8Undefined(), getFrequencyResponseSignature));
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8BiquadFilterNodeConsts, WTF_ARRAY_LENGTH(V8BiquadFilterNodeConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8BiquadFilterNode::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8BiquadFilterNode::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8BiquadFilterNodeTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8BiquadFilterNode::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8BiquadFilterNode::createWrapper(PassRefPtr<BiquadFilterNode> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<AudioNode*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8BiquadFilterNode::derefObject(void* object)
{
    static_cast<BiquadFilterNode*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(WEB_AUDIO)
