/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLTextAreaElement.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8HTMLElement.h"
#include "V8HTMLFormElement.h"
#include "V8NodeList.h"
#include "V8ValidityState.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8HTMLTextAreaElement::info = { V8HTMLTextAreaElement::GetTemplate, V8HTMLTextAreaElement::derefObject, 0, 0, V8HTMLTextAreaElement::installPerContextPrototypeProperties, &V8HTMLElement::info, WrapperTypeObjectPrototype };

namespace HTMLTextAreaElementV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> autofocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::autofocusAttr), info.GetIsolate());
}

static void autofocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::autofocusAttr, v);
    return;
}

static v8::Handle<v8::Value> colsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8Integer(imp->cols(), info.GetIsolate());
}

static void colsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    int v = toInt32(value);
    imp->setCols(v);
    return;
}

static v8::Handle<v8::Value> dirNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::dirnameAttr), info.GetIsolate());
}

static void dirNameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::dirnameAttr, stringResource);
}

static v8::Handle<v8::Value> disabledAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::disabledAttr), info.GetIsolate());
}

static void disabledAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, v);
    return;
}

static v8::Handle<v8::Value> formAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return toV8Fast(imp->form(), info, imp);
}

static v8::Handle<v8::Value> maxLengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8Integer(imp->maxLength(), info.GetIsolate());
}

static void maxLengthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    int v = toInt32(value);
    ExceptionCode ec = 0;
    imp->setMaxLength(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->getNameAttribute(), info.GetIsolate());
}

static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::nameAttr, stringResource);
}

static v8::Handle<v8::Value> placeholderAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::placeholderAttr), info.GetIsolate());
}

static void placeholderAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::placeholderAttr, stringResource);
}

static v8::Handle<v8::Value> readOnlyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::readonlyAttr), info.GetIsolate());
}

static void readOnlyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::readonlyAttr, v);
    return;
}

static v8::Handle<v8::Value> requiredAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::requiredAttr), info.GetIsolate());
}

static void requiredAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::requiredAttr, v);
    return;
}

static v8::Handle<v8::Value> rowsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8Integer(imp->rows(), info.GetIsolate());
}

static void rowsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    int v = toInt32(value);
    imp->setRows(v);
    return;
}

static v8::Handle<v8::Value> wrapAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::wrapAttr), info.GetIsolate());
}

static void wrapAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::wrapAttr, stringResource);
}

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8String(imp->type(), info.GetIsolate());
}

static v8::Handle<v8::Value> defaultValueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8String(imp->defaultValue(), info.GetIsolate());
}

static void defaultValueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setDefaultValue(v);
    return;
}

static v8::Handle<v8::Value> valueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8String(imp->value(), info.GetIsolate());
}

static void valueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setValue(v);
    return;
}

static v8::Handle<v8::Value> textLengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8UnsignedInteger(imp->textLength(), info.GetIsolate());
}

static v8::Handle<v8::Value> willValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8Boolean(imp->willValidate(), info.GetIsolate());
}

static v8::Handle<v8::Value> validityAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return toV8Fast(imp->validity(), info, imp);
}

static v8::Handle<v8::Value> validationMessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8String(imp->validationMessage(), info.GetIsolate());
}

static v8::Handle<v8::Value> labelsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return toV8Fast(imp->labels(), info, imp);
}

static v8::Handle<v8::Value> selectionStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8Integer(imp->selectionStart(), info.GetIsolate());
}

static void selectionStartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    int v = toInt32(value);
    imp->setSelectionStart(v);
    return;
}

static v8::Handle<v8::Value> selectionEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8Integer(imp->selectionEnd(), info.GetIsolate());
}

static void selectionEndAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    int v = toInt32(value);
    imp->setSelectionEnd(v);
    return;
}

static v8::Handle<v8::Value> selectionDirectionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    return v8String(imp->selectionDirection(), info.GetIsolate());
}

static void selectionDirectionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setSelectionDirection(v);
    return;
}

static v8::Handle<v8::Value> checkValidityCallback(const v8::Arguments& args)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(args.Holder());
    return v8Boolean(imp->checkValidity(), args.GetIsolate());
}

static v8::Handle<v8::Value> setCustomValidityCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithUndefinedOrNullCheck>, error, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->setCustomValidity(error);
    return v8Undefined();
}

static v8::Handle<v8::Value> selectCallback(const v8::Arguments& args)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(args.Holder());
    imp->select();
    return v8Undefined();
}

static v8::Handle<v8::Value> setRangeText1Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, replacement, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->setRangeText(replacement, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setRangeText2Callback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, replacement, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(unsigned, start, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, end, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, selectionMode, MAYBE_MISSING_PARAMETER(args, 3, DefaultIsNullString));
    imp->setRangeText(replacement, start, end, selectionMode, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setRangeTextCallback(const v8::Arguments& args)
{
    if (args.Length() == 1)
        return setRangeText1Callback(args);
    if (args.Length() == 3 || args.Length() == 4)
        return setRangeText2Callback(args);
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> setSelectionRangeCallback(const v8::Arguments& args)
{
    HTMLTextAreaElement* imp = V8HTMLTextAreaElement::toNative(args.Holder());
    V8TRYCATCH(int, start, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, end, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    if (args.Length() <= 2) {
        imp->setSelectionRange(start, end);
        return v8Undefined();
    }
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, direction, MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined));
    imp->setSelectionRange(start, end, direction);
    return v8Undefined();
}

} // namespace HTMLTextAreaElementV8Internal

static const V8DOMConfiguration::BatchedAttribute V8HTMLTextAreaElementAttrs[] = {
    // Attribute 'autofocus' (Type: 'attribute' ExtAttr: 'Reflect')
    {"autofocus", HTMLTextAreaElementV8Internal::autofocusAttrGetter, HTMLTextAreaElementV8Internal::autofocusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'cols' (Type: 'attribute' ExtAttr: '')
    {"cols", HTMLTextAreaElementV8Internal::colsAttrGetter, HTMLTextAreaElementV8Internal::colsAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'dirName' (Type: 'attribute' ExtAttr: 'Reflect')
    {"dirName", HTMLTextAreaElementV8Internal::dirNameAttrGetter, HTMLTextAreaElementV8Internal::dirNameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'disabled' (Type: 'attribute' ExtAttr: 'Reflect')
    {"disabled", HTMLTextAreaElementV8Internal::disabledAttrGetter, HTMLTextAreaElementV8Internal::disabledAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'form' (Type: 'readonly attribute' ExtAttr: '')
    {"form", HTMLTextAreaElementV8Internal::formAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'maxLength' (Type: 'attribute' ExtAttr: '')
    {"maxLength", HTMLTextAreaElementV8Internal::maxLengthAttrGetter, HTMLTextAreaElementV8Internal::maxLengthAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'name' (Type: 'attribute' ExtAttr: 'Reflect')
    {"name", HTMLTextAreaElementV8Internal::nameAttrGetter, HTMLTextAreaElementV8Internal::nameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'placeholder' (Type: 'attribute' ExtAttr: 'Reflect')
    {"placeholder", HTMLTextAreaElementV8Internal::placeholderAttrGetter, HTMLTextAreaElementV8Internal::placeholderAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'readOnly' (Type: 'attribute' ExtAttr: 'Reflect')
    {"readOnly", HTMLTextAreaElementV8Internal::readOnlyAttrGetter, HTMLTextAreaElementV8Internal::readOnlyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'required' (Type: 'attribute' ExtAttr: 'Reflect')
    {"required", HTMLTextAreaElementV8Internal::requiredAttrGetter, HTMLTextAreaElementV8Internal::requiredAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'rows' (Type: 'attribute' ExtAttr: '')
    {"rows", HTMLTextAreaElementV8Internal::rowsAttrGetter, HTMLTextAreaElementV8Internal::rowsAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'wrap' (Type: 'attribute' ExtAttr: 'Reflect')
    {"wrap", HTMLTextAreaElementV8Internal::wrapAttrGetter, HTMLTextAreaElementV8Internal::wrapAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'type' (Type: 'readonly attribute' ExtAttr: '')
    {"type", HTMLTextAreaElementV8Internal::typeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultValue' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"defaultValue", HTMLTextAreaElementV8Internal::defaultValueAttrGetter, HTMLTextAreaElementV8Internal::defaultValueAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'value' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"value", HTMLTextAreaElementV8Internal::valueAttrGetter, HTMLTextAreaElementV8Internal::valueAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'textLength' (Type: 'readonly attribute' ExtAttr: '')
    {"textLength", HTMLTextAreaElementV8Internal::textLengthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'willValidate' (Type: 'readonly attribute' ExtAttr: '')
    {"willValidate", HTMLTextAreaElementV8Internal::willValidateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'validity' (Type: 'readonly attribute' ExtAttr: '')
    {"validity", HTMLTextAreaElementV8Internal::validityAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'validationMessage' (Type: 'readonly attribute' ExtAttr: '')
    {"validationMessage", HTMLTextAreaElementV8Internal::validationMessageAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'labels' (Type: 'readonly attribute' ExtAttr: '')
    {"labels", HTMLTextAreaElementV8Internal::labelsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'selectionStart' (Type: 'attribute' ExtAttr: '')
    {"selectionStart", HTMLTextAreaElementV8Internal::selectionStartAttrGetter, HTMLTextAreaElementV8Internal::selectionStartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'selectionEnd' (Type: 'attribute' ExtAttr: '')
    {"selectionEnd", HTMLTextAreaElementV8Internal::selectionEndAttrGetter, HTMLTextAreaElementV8Internal::selectionEndAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'selectionDirection' (Type: 'attribute' ExtAttr: '')
    {"selectionDirection", HTMLTextAreaElementV8Internal::selectionDirectionAttrGetter, HTMLTextAreaElementV8Internal::selectionDirectionAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8HTMLTextAreaElementCallbacks[] = {
    {"checkValidity", HTMLTextAreaElementV8Internal::checkValidityCallback},
    {"setCustomValidity", HTMLTextAreaElementV8Internal::setCustomValidityCallback},
    {"select", HTMLTextAreaElementV8Internal::selectCallback},
    {"setRangeText", HTMLTextAreaElementV8Internal::setRangeTextCallback},
    {"setSelectionRange", HTMLTextAreaElementV8Internal::setSelectionRangeCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLTextAreaElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "HTMLTextAreaElement", V8HTMLElement::GetTemplate(), V8HTMLTextAreaElement::internalFieldCount,
        V8HTMLTextAreaElementAttrs, WTF_ARRAY_LENGTH(V8HTMLTextAreaElementAttrs),
        V8HTMLTextAreaElementCallbacks, WTF_ARRAY_LENGTH(V8HTMLTextAreaElementCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLTextAreaElement::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLTextAreaElement::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLTextAreaElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLTextAreaElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLTextAreaElement::createWrapper(PassRefPtr<HTMLTextAreaElement> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<Node*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8HTMLTextAreaElement::derefObject(void* object)
{
    static_cast<HTMLTextAreaElement*>(object)->deref();
}

} // namespace WebCore
