/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGComponentTransferFunctionElement.h"

#if ENABLE(FILTERS) && ENABLE(SVG)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8SVGAnimatedEnumeration.h"
#include "V8SVGAnimatedNumber.h"
#include "V8SVGAnimatedNumberList.h"
#include "V8SVGElement.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8SVGComponentTransferFunctionElement::info = { V8SVGComponentTransferFunctionElement::GetTemplate, V8SVGComponentTransferFunctionElement::derefObject, 0, 0, V8SVGComponentTransferFunctionElement::installPerContextPrototypeProperties, &V8SVGElement::info, WrapperTypeObjectPrototype };

namespace SVGComponentTransferFunctionElementV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGComponentTransferFunctionElement* imp = V8SVGComponentTransferFunctionElement::toNative(info.Holder());
    return toV8Fast(static_pointer_cast<SVGAnimatedEnumeration>(imp->typeAnimated()), info, imp);
}

static v8::Handle<v8::Value> tableValuesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGComponentTransferFunctionElement* imp = V8SVGComponentTransferFunctionElement::toNative(info.Holder());
    return toV8Fast(imp->tableValuesAnimated(), info, imp);
}

static v8::Handle<v8::Value> slopeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGComponentTransferFunctionElement* imp = V8SVGComponentTransferFunctionElement::toNative(info.Holder());
    return toV8Fast(imp->slopeAnimated(), info, imp);
}

static v8::Handle<v8::Value> interceptAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGComponentTransferFunctionElement* imp = V8SVGComponentTransferFunctionElement::toNative(info.Holder());
    return toV8Fast(imp->interceptAnimated(), info, imp);
}

static v8::Handle<v8::Value> amplitudeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGComponentTransferFunctionElement* imp = V8SVGComponentTransferFunctionElement::toNative(info.Holder());
    return toV8Fast(imp->amplitudeAnimated(), info, imp);
}

static v8::Handle<v8::Value> exponentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGComponentTransferFunctionElement* imp = V8SVGComponentTransferFunctionElement::toNative(info.Holder());
    return toV8Fast(imp->exponentAnimated(), info, imp);
}

static v8::Handle<v8::Value> offsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGComponentTransferFunctionElement* imp = V8SVGComponentTransferFunctionElement::toNative(info.Holder());
    return toV8Fast(imp->offsetAnimated(), info, imp);
}

} // namespace SVGComponentTransferFunctionElementV8Internal

static const V8DOMConfiguration::BatchedAttribute V8SVGComponentTransferFunctionElementAttrs[] = {
    // Attribute 'type' (Type: 'readonly attribute' ExtAttr: '')
    {"type", SVGComponentTransferFunctionElementV8Internal::typeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'tableValues' (Type: 'readonly attribute' ExtAttr: '')
    {"tableValues", SVGComponentTransferFunctionElementV8Internal::tableValuesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'slope' (Type: 'readonly attribute' ExtAttr: '')
    {"slope", SVGComponentTransferFunctionElementV8Internal::slopeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'intercept' (Type: 'readonly attribute' ExtAttr: '')
    {"intercept", SVGComponentTransferFunctionElementV8Internal::interceptAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'amplitude' (Type: 'readonly attribute' ExtAttr: '')
    {"amplitude", SVGComponentTransferFunctionElementV8Internal::amplitudeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'exponent' (Type: 'readonly attribute' ExtAttr: '')
    {"exponent", SVGComponentTransferFunctionElementV8Internal::exponentAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'offset' (Type: 'readonly attribute' ExtAttr: '')
    {"offset", SVGComponentTransferFunctionElementV8Internal::offsetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedConstant V8SVGComponentTransferFunctionElementConsts[] = {
    {"SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN", static_cast<signed int>(0)},
    {"SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY", static_cast<signed int>(1)},
    {"SVG_FECOMPONENTTRANSFER_TYPE_TABLE", static_cast<signed int>(2)},
    {"SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE", static_cast<signed int>(3)},
    {"SVG_FECOMPONENTTRANSFER_TYPE_LINEAR", static_cast<signed int>(4)},
    {"SVG_FECOMPONENTTRANSFER_TYPE_GAMMA", static_cast<signed int>(5)},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGComponentTransferFunctionElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "SVGComponentTransferFunctionElement", V8SVGElement::GetTemplate(), V8SVGComponentTransferFunctionElement::internalFieldCount,
        V8SVGComponentTransferFunctionElementAttrs, WTF_ARRAY_LENGTH(V8SVGComponentTransferFunctionElementAttrs),
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8SVGComponentTransferFunctionElementConsts, WTF_ARRAY_LENGTH(V8SVGComponentTransferFunctionElementConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGComponentTransferFunctionElement::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8SVGComponentTransferFunctionElement::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8SVGComponentTransferFunctionElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8SVGComponentTransferFunctionElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGComponentTransferFunctionElement::createWrapper(PassRefPtr<SVGComponentTransferFunctionElement> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<Node*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8SVGComponentTransferFunctionElement::derefObject(void* object)
{
    static_cast<SVGComponentTransferFunctionElement*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(FILTERS) && ENABLE(SVG)
