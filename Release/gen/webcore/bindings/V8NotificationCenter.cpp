/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8NotificationCenter.h"

#if ENABLE(LEGACY_NOTIFICATIONS)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "FeatureObserver.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8Notification.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8NotificationCenter::info = { V8NotificationCenter::GetTemplate, V8NotificationCenter::derefObject, V8NotificationCenter::toActiveDOMObject, 0, V8NotificationCenter::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace NotificationCenterV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> createHTMLNotificationCallback(const v8::Arguments& args)
{
    FeatureObserver::observe(activeDOMWindow(BindingState::instance()), FeatureObserver::LegacyHTMLNotifications);
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    NotificationCenter* imp = V8NotificationCenter::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    RefPtr<Notification> result = imp->createHTMLNotification(url, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createNotificationCallback(const v8::Arguments& args)
{
    FeatureObserver::observe(activeDOMWindow(BindingState::instance()), FeatureObserver::LegacyTextNotifications);
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    NotificationCenter* imp = V8NotificationCenter::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, iconUrl, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, title, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, body, MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined));
    RefPtr<Notification> result = imp->createNotification(iconUrl, title, body, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> checkPermissionCallback(const v8::Arguments& args)
{
    NotificationCenter* imp = V8NotificationCenter::toNative(args.Holder());
    return v8Integer(imp->checkPermission(), args.GetIsolate());
}

} // namespace NotificationCenterV8Internal

static const V8DOMConfiguration::BatchedCallback V8NotificationCenterCallbacks[] = {
    {"createNotification", NotificationCenterV8Internal::createNotificationCallback},
    {"checkPermission", NotificationCenterV8Internal::checkPermissionCallback},
    {"requestPermission", V8NotificationCenter::requestPermissionCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8NotificationCenterTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "NotificationCenter", v8::Persistent<v8::FunctionTemplate>(), V8NotificationCenter::internalFieldCount,
        0, 0,
        V8NotificationCenterCallbacks, WTF_ARRAY_LENGTH(V8NotificationCenterCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8NotificationCenter::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8NotificationCenter::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8NotificationCenterTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8NotificationCenter::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}

void V8NotificationCenter::installPerContextPrototypeProperties(v8::Handle<v8::Object> proto)
{
    UNUSED_PARAM(proto);
    v8::Local<v8::Signature> defaultSignature = v8::Signature::New(GetTemplate());
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.

    ScriptExecutionContext* context = toScriptExecutionContext(proto->CreationContext());
    if (context && context->isDocument() && ContextFeatures::htmlNotificationsEnabled(static_cast<Document*>(context))) {
        proto->Set(v8::String::NewSymbol("createHTMLNotification"), v8::FunctionTemplate::New(NotificationCenterV8Internal::createHTMLNotificationCallback, v8Undefined(), defaultSignature)->GetFunction());
    }
}
ActiveDOMObject* V8NotificationCenter::toActiveDOMObject(v8::Handle<v8::Object> object)
{
    return toNative(object);
}      

v8::Handle<v8::Object> V8NotificationCenter::createWrapper(PassRefPtr<NotificationCenter> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8NotificationCenter::derefObject(void* object)
{
    static_cast<NotificationCenter*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(LEGACY_NOTIFICATIONS)
