/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8InternalSettingsGenerated.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8InternalSettingsGenerated::info = { V8InternalSettingsGenerated::GetTemplate, V8InternalSettingsGenerated::derefObject, 0, 0, V8InternalSettingsGenerated::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace InternalSettingsGeneratedV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> setAccelerated2dCanvasEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, accelerated2dCanvasEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAccelerated2dCanvasEnabled(accelerated2dCanvasEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAcceleratedCompositingFor3DTransformsEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, acceleratedCompositingFor3DTransformsEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAcceleratedCompositingFor3DTransformsEnabled(acceleratedCompositingFor3DTransformsEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAcceleratedCompositingForAnimationEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, acceleratedCompositingForAnimationEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAcceleratedCompositingForAnimationEnabled(acceleratedCompositingForAnimationEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAcceleratedCompositingForCanvasEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, acceleratedCompositingForCanvasEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAcceleratedCompositingForCanvasEnabled(acceleratedCompositingForCanvasEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAcceleratedCompositingForFixedPositionEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, acceleratedCompositingForFixedPositionEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAcceleratedCompositingForFixedPositionEnabled(acceleratedCompositingForFixedPositionEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAcceleratedCompositingForOverflowScrollEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, acceleratedCompositingForOverflowScrollEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAcceleratedCompositingForOverflowScrollEnabled(acceleratedCompositingForOverflowScrollEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAcceleratedCompositingForPluginsEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, acceleratedCompositingForPluginsEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAcceleratedCompositingForPluginsEnabled(acceleratedCompositingForPluginsEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAcceleratedCompositingForScrollableFramesEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, acceleratedCompositingForScrollableFramesEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAcceleratedCompositingForScrollableFramesEnabled(acceleratedCompositingForScrollableFramesEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAcceleratedCompositingForVideoEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, acceleratedCompositingForVideoEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAcceleratedCompositingForVideoEnabled(acceleratedCompositingForVideoEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAcceleratedDrawingEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, acceleratedDrawingEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAcceleratedDrawingEnabled(acceleratedDrawingEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAcceleratedFiltersEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, acceleratedFiltersEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAcceleratedFiltersEnabled(acceleratedFiltersEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAllowCustomScrollbarInMainFrameCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, allowCustomScrollbarInMainFrame, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAllowCustomScrollbarInMainFrame(allowCustomScrollbarInMainFrame);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAllowDisplayOfInsecureContentCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, allowDisplayOfInsecureContent, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAllowDisplayOfInsecureContent(allowDisplayOfInsecureContent);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAllowFileAccessFromFileURLsCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, allowFileAccessFromFileURLs, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAllowFileAccessFromFileURLs(allowFileAccessFromFileURLs);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAllowRunningOfInsecureContentCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, allowRunningOfInsecureContent, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAllowRunningOfInsecureContent(allowRunningOfInsecureContent);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAllowScriptsToCloseWindowsCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, allowScriptsToCloseWindows, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAllowScriptsToCloseWindows(allowScriptsToCloseWindows);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAllowUniversalAccessFromFileURLsCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, allowUniversalAccessFromFileURLs, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAllowUniversalAccessFromFileURLs(allowUniversalAccessFromFileURLs);
    return v8Undefined();
}

static v8::Handle<v8::Value> setApplyPageScaleFactorInCompositorCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, applyPageScaleFactorInCompositor, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setApplyPageScaleFactorInCompositor(applyPageScaleFactorInCompositor);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAsynchronousSpellCheckingEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, asynchronousSpellCheckingEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setAsynchronousSpellCheckingEnabled(asynchronousSpellCheckingEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setBackspaceKeyNavigationEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, backspaceKeyNavigationEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setBackspaceKeyNavigationEnabled(backspaceKeyNavigationEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setCanvasUsesAcceleratedDrawingCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, canvasUsesAcceleratedDrawing, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setCanvasUsesAcceleratedDrawing(canvasUsesAcceleratedDrawing);
    return v8Undefined();
}

static v8::Handle<v8::Value> setCaretBrowsingEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, caretBrowsingEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setCaretBrowsingEnabled(caretBrowsingEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setCookieEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, cookieEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setCookieEnabled(cookieEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setCrossOriginCheckInGetMatchedCSSRulesDisabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, crossOriginCheckInGetMatchedCSSRulesDisabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setCrossOriginCheckInGetMatchedCSSRulesDisabled(crossOriginCheckInGetMatchedCSSRulesDisabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setCSSGridLayoutEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, cssGridLayoutEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setCSSGridLayoutEnabled(cssGridLayoutEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setDefaultTextEncodingNameCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, defaultTextEncodingName, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->setDefaultTextEncodingName(defaultTextEncodingName);
    return v8Undefined();
}

static v8::Handle<v8::Value> setDeferred2dCanvasEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, deferred2dCanvasEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setDeferred2dCanvasEnabled(deferred2dCanvasEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setDeveloperExtrasEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, developerExtrasEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setDeveloperExtrasEnabled(developerExtrasEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setDeviceHeightCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(int, deviceHeight, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->setDeviceHeight(deviceHeight);
    return v8Undefined();
}

static v8::Handle<v8::Value> setDeviceSupportsMouseCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, deviceSupportsMouse, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setDeviceSupportsMouse(deviceSupportsMouse);
    return v8Undefined();
}

static v8::Handle<v8::Value> setDeviceSupportsTouchCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, deviceSupportsTouch, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setDeviceSupportsTouch(deviceSupportsTouch);
    return v8Undefined();
}

static v8::Handle<v8::Value> setDeviceWidthCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(int, deviceWidth, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->setDeviceWidth(deviceWidth);
    return v8Undefined();
}

static v8::Handle<v8::Value> setDiagnosticLoggingEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, diagnosticLoggingEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setDiagnosticLoggingEnabled(diagnosticLoggingEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setDownloadableBinaryFontsEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, downloadableBinaryFontsEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setDownloadableBinaryFontsEnabled(downloadableBinaryFontsEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setEnforceCSSMIMETypeInNoQuirksModeCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, enforceCSSMIMETypeInNoQuirksMode, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setEnforceCSSMIMETypeInNoQuirksMode(enforceCSSMIMETypeInNoQuirksMode);
    return v8Undefined();
}

static v8::Handle<v8::Value> setExperimentalNotificationsEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, experimentalNotificationsEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setExperimentalNotificationsEnabled(experimentalNotificationsEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setFixedElementsLayoutRelativeToFrameCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, fixedElementsLayoutRelativeToFrame, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setFixedElementsLayoutRelativeToFrame(fixedElementsLayoutRelativeToFrame);
    return v8Undefined();
}

static v8::Handle<v8::Value> setFixedPositionCreatesStackingContextCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, fixedPositionCreatesStackingContext, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setFixedPositionCreatesStackingContext(fixedPositionCreatesStackingContext);
    return v8Undefined();
}

static v8::Handle<v8::Value> setForceCompositingModeCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, forceCompositingMode, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setForceCompositingMode(forceCompositingMode);
    return v8Undefined();
}

static v8::Handle<v8::Value> setForceFTPDirectoryListingsCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, forceFTPDirectoryListings, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setForceFTPDirectoryListings(forceFTPDirectoryListings);
    return v8Undefined();
}

static v8::Handle<v8::Value> setFrameFlatteningEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, frameFlatteningEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setFrameFlatteningEnabled(frameFlatteningEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setFTPDirectoryTemplatePathCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, ftpDirectoryTemplatePath, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->setFTPDirectoryTemplatePath(ftpDirectoryTemplatePath);
    return v8Undefined();
}

static v8::Handle<v8::Value> setFullScreenEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, fullScreenEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setFullScreenEnabled(fullScreenEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setHyperlinkAuditingEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, hyperlinkAuditingEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setHyperlinkAuditingEnabled(hyperlinkAuditingEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setIncrementalRenderingSuppressionTimeoutInSecondsCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(double, incrementalRenderingSuppressionTimeoutInSeconds, static_cast<double>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    imp->setIncrementalRenderingSuppressionTimeoutInSeconds(incrementalRenderingSuppressionTimeoutInSeconds);
    return v8Undefined();
}

static v8::Handle<v8::Value> setInteractiveFormValidationEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, interactiveFormValidationEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setInteractiveFormValidationEnabled(interactiveFormValidationEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setJavaScriptCanAccessClipboardCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, javaScriptCanAccessClipboard, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setJavaScriptCanAccessClipboard(javaScriptCanAccessClipboard);
    return v8Undefined();
}

static v8::Handle<v8::Value> setJavaScriptCanOpenWindowsAutomaticallyCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, javaScriptCanOpenWindowsAutomatically, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setJavaScriptCanOpenWindowsAutomatically(javaScriptCanOpenWindowsAutomatically);
    return v8Undefined();
}

static v8::Handle<v8::Value> setJavaScriptExperimentsEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, javaScriptExperimentsEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setJavaScriptExperimentsEnabled(javaScriptExperimentsEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setLayoutFallbackWidthCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(int, layoutFallbackWidth, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->setLayoutFallbackWidth(layoutFallbackWidth);
    return v8Undefined();
}

static v8::Handle<v8::Value> setLoadDeferringEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, loadDeferringEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setLoadDeferringEnabled(loadDeferringEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setLoadsSiteIconsIgnoringImageLoadingSettingCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, loadsSiteIconsIgnoringImageLoadingSetting, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setLoadsSiteIconsIgnoringImageLoadingSetting(loadsSiteIconsIgnoringImageLoadingSetting);
    return v8Undefined();
}

static v8::Handle<v8::Value> setLocalFileContentSniffingEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, localFileContentSniffingEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setLocalFileContentSniffingEnabled(localFileContentSniffingEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setLocalStorageDatabasePathCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, localStorageDatabasePath, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->setLocalStorageDatabasePath(localStorageDatabasePath);
    return v8Undefined();
}

static v8::Handle<v8::Value> setLocalStorageEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, localStorageEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setLocalStorageEnabled(localStorageEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setMaximumDecodedImageSizeCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(unsigned, maximumDecodedImageSize, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->setMaximumDecodedImageSize(maximumDecodedImageSize);
    return v8Undefined();
}

static v8::Handle<v8::Value> setMaximumHTMLParserDOMTreeDepthCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(unsigned, maximumHTMLParserDOMTreeDepth, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->setMaximumHTMLParserDOMTreeDepth(maximumHTMLParserDOMTreeDepth);
    return v8Undefined();
}

static v8::Handle<v8::Value> setMediaPlaybackAllowsInlineCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, mediaPlaybackAllowsInline, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setMediaPlaybackAllowsInline(mediaPlaybackAllowsInline);
    return v8Undefined();
}

static v8::Handle<v8::Value> setMediaPlaybackRequiresUserGestureCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, mediaPlaybackRequiresUserGesture, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setMediaPlaybackRequiresUserGesture(mediaPlaybackRequiresUserGesture);
    return v8Undefined();
}

static v8::Handle<v8::Value> setMemoryInfoEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, memoryInfoEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setMemoryInfoEnabled(memoryInfoEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setMinimumAccelerated2dCanvasSizeCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(int, minimumAccelerated2dCanvasSize, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->setMinimumAccelerated2dCanvasSize(minimumAccelerated2dCanvasSize);
    return v8Undefined();
}

static v8::Handle<v8::Value> setNeedsDidFinishLoadOrderQuirkCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, needsDidFinishLoadOrderQuirk, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setNeedsDidFinishLoadOrderQuirk(needsDidFinishLoadOrderQuirk);
    return v8Undefined();
}

static v8::Handle<v8::Value> setNeedsIsLoadingInAPISenseQuirkCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, needsIsLoadingInAPISenseQuirk, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setNeedsIsLoadingInAPISenseQuirk(needsIsLoadingInAPISenseQuirk);
    return v8Undefined();
}

static v8::Handle<v8::Value> setNeedsKeyboardEventDisambiguationQuirksCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, needsKeyboardEventDisambiguationQuirks, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setNeedsKeyboardEventDisambiguationQuirks(needsKeyboardEventDisambiguationQuirks);
    return v8Undefined();
}

static v8::Handle<v8::Value> setNeedsLeopardMailQuirksCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, needsLeopardMailQuirks, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setNeedsLeopardMailQuirks(needsLeopardMailQuirks);
    return v8Undefined();
}

static v8::Handle<v8::Value> setNeedsSiteSpecificQuirksCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, needsSiteSpecificQuirks, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setNeedsSiteSpecificQuirks(needsSiteSpecificQuirks);
    return v8Undefined();
}

static v8::Handle<v8::Value> setNotificationsEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, notificationsEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setNotificationsEnabled(notificationsEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setOfflineWebApplicationCacheEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, offlineWebApplicationCacheEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setOfflineWebApplicationCacheEnabled(offlineWebApplicationCacheEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setOpenGLMultisamplingEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, openGLMultisamplingEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setOpenGLMultisamplingEnabled(openGLMultisamplingEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setPageCacheSupportsPluginsCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, pageCacheSupportsPlugins, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setPageCacheSupportsPlugins(pageCacheSupportsPlugins);
    return v8Undefined();
}

static v8::Handle<v8::Value> setPaginateDuringLayoutEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, paginateDuringLayoutEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setPaginateDuringLayoutEnabled(paginateDuringLayoutEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setPasswordEchoDurationInSecondsCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(double, passwordEchoDurationInSeconds, static_cast<double>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    imp->setPasswordEchoDurationInSeconds(passwordEchoDurationInSeconds);
    return v8Undefined();
}

static v8::Handle<v8::Value> setPasswordEchoEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, passwordEchoEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setPasswordEchoEnabled(passwordEchoEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setPlugInSnapshottingEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, plugInSnapshottingEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setPlugInSnapshottingEnabled(plugInSnapshottingEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setPrivilegedWebGLExtensionsEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, privilegedWebGLExtensionsEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setPrivilegedWebGLExtensionsEnabled(privilegedWebGLExtensionsEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setQuantizedMemoryInfoEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, quantizedMemoryInfoEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setQuantizedMemoryInfoEnabled(quantizedMemoryInfoEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setRegionBasedColumnsEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, regionBasedColumnsEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setRegionBasedColumnsEnabled(regionBasedColumnsEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setRequestAnimationFrameEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, requestAnimationFrameEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setRequestAnimationFrameEnabled(requestAnimationFrameEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setScrollingCoordinatorEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, scrollingCoordinatorEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setScrollingCoordinatorEnabled(scrollingCoordinatorEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setSessionStorageQuotaCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(unsigned, sessionStorageQuota, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->setSessionStorageQuota(sessionStorageQuota);
    return v8Undefined();
}

static v8::Handle<v8::Value> setShouldDisplayCaptionsCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, shouldDisplayCaptions, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setShouldDisplayCaptions(shouldDisplayCaptions);
    return v8Undefined();
}

static v8::Handle<v8::Value> setShouldDisplaySubtitlesCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, shouldDisplaySubtitles, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setShouldDisplaySubtitles(shouldDisplaySubtitles);
    return v8Undefined();
}

static v8::Handle<v8::Value> setShouldDisplayTextDescriptionsCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, shouldDisplayTextDescriptions, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setShouldDisplayTextDescriptions(shouldDisplayTextDescriptions);
    return v8Undefined();
}

static v8::Handle<v8::Value> setShouldInjectUserScriptsInInitialEmptyDocumentCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, shouldInjectUserScriptsInInitialEmptyDocument, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setShouldInjectUserScriptsInInitialEmptyDocument(shouldInjectUserScriptsInInitialEmptyDocument);
    return v8Undefined();
}

static v8::Handle<v8::Value> setShouldPrintBackgroundsCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, shouldPrintBackgrounds, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setShouldPrintBackgrounds(shouldPrintBackgrounds);
    return v8Undefined();
}

static v8::Handle<v8::Value> setShouldRespectImageOrientationCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, shouldRespectImageOrientation, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setShouldRespectImageOrientation(shouldRespectImageOrientation);
    return v8Undefined();
}

static v8::Handle<v8::Value> setShowsToolTipOverTruncatedTextCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, showsToolTipOverTruncatedText, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setShowsToolTipOverTruncatedText(showsToolTipOverTruncatedText);
    return v8Undefined();
}

static v8::Handle<v8::Value> setShowsURLsInToolTipsCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, showsURLsInToolTips, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setShowsURLsInToolTips(showsURLsInToolTips);
    return v8Undefined();
}

static v8::Handle<v8::Value> setShrinksStandaloneImagesToFitCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, shrinksStandaloneImagesToFit, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setShrinksStandaloneImagesToFit(shrinksStandaloneImagesToFit);
    return v8Undefined();
}

static v8::Handle<v8::Value> setSpatialNavigationEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, spatialNavigationEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setSpatialNavigationEnabled(spatialNavigationEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setSupportsMultipleWindowsCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, supportsMultipleWindows, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setSupportsMultipleWindows(supportsMultipleWindows);
    return v8Undefined();
}

static v8::Handle<v8::Value> setSuppressesIncrementalRenderingCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, suppressesIncrementalRendering, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setSuppressesIncrementalRendering(suppressesIncrementalRendering);
    return v8Undefined();
}

static v8::Handle<v8::Value> setSyncXHRInDocumentsEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, syncXHRInDocumentsEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setSyncXHRInDocumentsEnabled(syncXHRInDocumentsEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setTouchAdjustmentEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, touchAdjustmentEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setTouchAdjustmentEnabled(touchAdjustmentEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setTouchDragDropEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, touchDragDropEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setTouchDragDropEnabled(touchDragDropEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setTreatsAnyTextCSSLinkAsStylesheetCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, treatsAnyTextCSSLinkAsStylesheet, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setTreatsAnyTextCSSLinkAsStylesheet(treatsAnyTextCSSLinkAsStylesheet);
    return v8Undefined();
}

static v8::Handle<v8::Value> setUsePreHTML5ParserQuirksCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, usePreHTML5ParserQuirks, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setUsePreHTML5ParserQuirks(usePreHTML5ParserQuirks);
    return v8Undefined();
}

static v8::Handle<v8::Value> setUsesDashboardBackwardCompatibilityModeCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, usesDashboardBackwardCompatibilityMode, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setUsesDashboardBackwardCompatibilityMode(usesDashboardBackwardCompatibilityMode);
    return v8Undefined();
}

static v8::Handle<v8::Value> setUsesEncodingDetectorCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, usesEncodingDetector, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setUsesEncodingDetector(usesEncodingDetector);
    return v8Undefined();
}

static v8::Handle<v8::Value> setValidationMessageTimerMagnificationCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(int, validationMessageTimerMagnification, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->setValidationMessageTimerMagnification(validationMessageTimerMagnification);
    return v8Undefined();
}

static v8::Handle<v8::Value> setVisualWordMovementEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, visualWordMovementEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setVisualWordMovementEnabled(visualWordMovementEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setWantsBalancedSetDefersLoadingBehaviorCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, wantsBalancedSetDefersLoadingBehavior, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setWantsBalancedSetDefersLoadingBehavior(wantsBalancedSetDefersLoadingBehavior);
    return v8Undefined();
}

static v8::Handle<v8::Value> setWebArchiveDebugModeEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, webArchiveDebugModeEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setWebArchiveDebugModeEnabled(webArchiveDebugModeEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setWebAudioEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, webAudioEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setWebAudioEnabled(webAudioEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setWebGLEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, webGLEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setWebGLEnabled(webGLEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setWebGLErrorsToConsoleEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, webGLErrorsToConsoleEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setWebGLErrorsToConsoleEnabled(webGLErrorsToConsoleEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setWebSecurityEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, webSecurityEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setWebSecurityEnabled(webSecurityEnabled);
    return v8Undefined();
}

static v8::Handle<v8::Value> setWindowFocusRestrictedCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, windowFocusRestricted, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setWindowFocusRestricted(windowFocusRestricted);
    return v8Undefined();
}

static v8::Handle<v8::Value> setXSSAuditorEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InternalSettingsGenerated* imp = V8InternalSettingsGenerated::toNative(args.Holder());
    V8TRYCATCH(bool, xssAuditorEnabled, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->setXSSAuditorEnabled(xssAuditorEnabled);
    return v8Undefined();
}

} // namespace InternalSettingsGeneratedV8Internal

static const V8DOMConfiguration::BatchedCallback V8InternalSettingsGeneratedCallbacks[] = {
    {"setAccelerated2dCanvasEnabled", InternalSettingsGeneratedV8Internal::setAccelerated2dCanvasEnabledCallback},
    {"setAcceleratedCompositingFor3DTransformsEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingFor3DTransformsEnabledCallback},
    {"setAcceleratedCompositingForAnimationEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForAnimationEnabledCallback},
    {"setAcceleratedCompositingForCanvasEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForCanvasEnabledCallback},
    {"setAcceleratedCompositingForFixedPositionEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForFixedPositionEnabledCallback},
    {"setAcceleratedCompositingForOverflowScrollEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForOverflowScrollEnabledCallback},
    {"setAcceleratedCompositingForPluginsEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForPluginsEnabledCallback},
    {"setAcceleratedCompositingForScrollableFramesEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForScrollableFramesEnabledCallback},
    {"setAcceleratedCompositingForVideoEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedCompositingForVideoEnabledCallback},
    {"setAcceleratedDrawingEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedDrawingEnabledCallback},
    {"setAcceleratedFiltersEnabled", InternalSettingsGeneratedV8Internal::setAcceleratedFiltersEnabledCallback},
    {"setAllowCustomScrollbarInMainFrame", InternalSettingsGeneratedV8Internal::setAllowCustomScrollbarInMainFrameCallback},
    {"setAllowDisplayOfInsecureContent", InternalSettingsGeneratedV8Internal::setAllowDisplayOfInsecureContentCallback},
    {"setAllowFileAccessFromFileURLs", InternalSettingsGeneratedV8Internal::setAllowFileAccessFromFileURLsCallback},
    {"setAllowRunningOfInsecureContent", InternalSettingsGeneratedV8Internal::setAllowRunningOfInsecureContentCallback},
    {"setAllowScriptsToCloseWindows", InternalSettingsGeneratedV8Internal::setAllowScriptsToCloseWindowsCallback},
    {"setAllowUniversalAccessFromFileURLs", InternalSettingsGeneratedV8Internal::setAllowUniversalAccessFromFileURLsCallback},
    {"setApplyPageScaleFactorInCompositor", InternalSettingsGeneratedV8Internal::setApplyPageScaleFactorInCompositorCallback},
    {"setAsynchronousSpellCheckingEnabled", InternalSettingsGeneratedV8Internal::setAsynchronousSpellCheckingEnabledCallback},
    {"setBackspaceKeyNavigationEnabled", InternalSettingsGeneratedV8Internal::setBackspaceKeyNavigationEnabledCallback},
    {"setCanvasUsesAcceleratedDrawing", InternalSettingsGeneratedV8Internal::setCanvasUsesAcceleratedDrawingCallback},
    {"setCaretBrowsingEnabled", InternalSettingsGeneratedV8Internal::setCaretBrowsingEnabledCallback},
    {"setCookieEnabled", InternalSettingsGeneratedV8Internal::setCookieEnabledCallback},
    {"setCrossOriginCheckInGetMatchedCSSRulesDisabled", InternalSettingsGeneratedV8Internal::setCrossOriginCheckInGetMatchedCSSRulesDisabledCallback},
    {"setCSSGridLayoutEnabled", InternalSettingsGeneratedV8Internal::setCSSGridLayoutEnabledCallback},
    {"setDefaultTextEncodingName", InternalSettingsGeneratedV8Internal::setDefaultTextEncodingNameCallback},
    {"setDeferred2dCanvasEnabled", InternalSettingsGeneratedV8Internal::setDeferred2dCanvasEnabledCallback},
    {"setDeveloperExtrasEnabled", InternalSettingsGeneratedV8Internal::setDeveloperExtrasEnabledCallback},
    {"setDeviceHeight", InternalSettingsGeneratedV8Internal::setDeviceHeightCallback},
    {"setDeviceSupportsMouse", InternalSettingsGeneratedV8Internal::setDeviceSupportsMouseCallback},
    {"setDeviceSupportsTouch", InternalSettingsGeneratedV8Internal::setDeviceSupportsTouchCallback},
    {"setDeviceWidth", InternalSettingsGeneratedV8Internal::setDeviceWidthCallback},
    {"setDiagnosticLoggingEnabled", InternalSettingsGeneratedV8Internal::setDiagnosticLoggingEnabledCallback},
    {"setDownloadableBinaryFontsEnabled", InternalSettingsGeneratedV8Internal::setDownloadableBinaryFontsEnabledCallback},
    {"setEnforceCSSMIMETypeInNoQuirksMode", InternalSettingsGeneratedV8Internal::setEnforceCSSMIMETypeInNoQuirksModeCallback},
    {"setExperimentalNotificationsEnabled", InternalSettingsGeneratedV8Internal::setExperimentalNotificationsEnabledCallback},
    {"setFixedElementsLayoutRelativeToFrame", InternalSettingsGeneratedV8Internal::setFixedElementsLayoutRelativeToFrameCallback},
    {"setFixedPositionCreatesStackingContext", InternalSettingsGeneratedV8Internal::setFixedPositionCreatesStackingContextCallback},
    {"setForceCompositingMode", InternalSettingsGeneratedV8Internal::setForceCompositingModeCallback},
    {"setForceFTPDirectoryListings", InternalSettingsGeneratedV8Internal::setForceFTPDirectoryListingsCallback},
    {"setFrameFlatteningEnabled", InternalSettingsGeneratedV8Internal::setFrameFlatteningEnabledCallback},
    {"setFTPDirectoryTemplatePath", InternalSettingsGeneratedV8Internal::setFTPDirectoryTemplatePathCallback},
    {"setFullScreenEnabled", InternalSettingsGeneratedV8Internal::setFullScreenEnabledCallback},
    {"setHyperlinkAuditingEnabled", InternalSettingsGeneratedV8Internal::setHyperlinkAuditingEnabledCallback},
    {"setIncrementalRenderingSuppressionTimeoutInSeconds", InternalSettingsGeneratedV8Internal::setIncrementalRenderingSuppressionTimeoutInSecondsCallback},
    {"setInteractiveFormValidationEnabled", InternalSettingsGeneratedV8Internal::setInteractiveFormValidationEnabledCallback},
    {"setJavaScriptCanAccessClipboard", InternalSettingsGeneratedV8Internal::setJavaScriptCanAccessClipboardCallback},
    {"setJavaScriptCanOpenWindowsAutomatically", InternalSettingsGeneratedV8Internal::setJavaScriptCanOpenWindowsAutomaticallyCallback},
    {"setJavaScriptExperimentsEnabled", InternalSettingsGeneratedV8Internal::setJavaScriptExperimentsEnabledCallback},
    {"setLayoutFallbackWidth", InternalSettingsGeneratedV8Internal::setLayoutFallbackWidthCallback},
    {"setLoadDeferringEnabled", InternalSettingsGeneratedV8Internal::setLoadDeferringEnabledCallback},
    {"setLoadsSiteIconsIgnoringImageLoadingSetting", InternalSettingsGeneratedV8Internal::setLoadsSiteIconsIgnoringImageLoadingSettingCallback},
    {"setLocalFileContentSniffingEnabled", InternalSettingsGeneratedV8Internal::setLocalFileContentSniffingEnabledCallback},
    {"setLocalStorageDatabasePath", InternalSettingsGeneratedV8Internal::setLocalStorageDatabasePathCallback},
    {"setLocalStorageEnabled", InternalSettingsGeneratedV8Internal::setLocalStorageEnabledCallback},
    {"setMaximumDecodedImageSize", InternalSettingsGeneratedV8Internal::setMaximumDecodedImageSizeCallback},
    {"setMaximumHTMLParserDOMTreeDepth", InternalSettingsGeneratedV8Internal::setMaximumHTMLParserDOMTreeDepthCallback},
    {"setMediaPlaybackAllowsInline", InternalSettingsGeneratedV8Internal::setMediaPlaybackAllowsInlineCallback},
    {"setMediaPlaybackRequiresUserGesture", InternalSettingsGeneratedV8Internal::setMediaPlaybackRequiresUserGestureCallback},
    {"setMemoryInfoEnabled", InternalSettingsGeneratedV8Internal::setMemoryInfoEnabledCallback},
    {"setMinimumAccelerated2dCanvasSize", InternalSettingsGeneratedV8Internal::setMinimumAccelerated2dCanvasSizeCallback},
    {"setNeedsDidFinishLoadOrderQuirk", InternalSettingsGeneratedV8Internal::setNeedsDidFinishLoadOrderQuirkCallback},
    {"setNeedsIsLoadingInAPISenseQuirk", InternalSettingsGeneratedV8Internal::setNeedsIsLoadingInAPISenseQuirkCallback},
    {"setNeedsKeyboardEventDisambiguationQuirks", InternalSettingsGeneratedV8Internal::setNeedsKeyboardEventDisambiguationQuirksCallback},
    {"setNeedsLeopardMailQuirks", InternalSettingsGeneratedV8Internal::setNeedsLeopardMailQuirksCallback},
    {"setNeedsSiteSpecificQuirks", InternalSettingsGeneratedV8Internal::setNeedsSiteSpecificQuirksCallback},
    {"setNotificationsEnabled", InternalSettingsGeneratedV8Internal::setNotificationsEnabledCallback},
    {"setOfflineWebApplicationCacheEnabled", InternalSettingsGeneratedV8Internal::setOfflineWebApplicationCacheEnabledCallback},
    {"setOpenGLMultisamplingEnabled", InternalSettingsGeneratedV8Internal::setOpenGLMultisamplingEnabledCallback},
    {"setPageCacheSupportsPlugins", InternalSettingsGeneratedV8Internal::setPageCacheSupportsPluginsCallback},
    {"setPaginateDuringLayoutEnabled", InternalSettingsGeneratedV8Internal::setPaginateDuringLayoutEnabledCallback},
    {"setPasswordEchoDurationInSeconds", InternalSettingsGeneratedV8Internal::setPasswordEchoDurationInSecondsCallback},
    {"setPasswordEchoEnabled", InternalSettingsGeneratedV8Internal::setPasswordEchoEnabledCallback},
    {"setPlugInSnapshottingEnabled", InternalSettingsGeneratedV8Internal::setPlugInSnapshottingEnabledCallback},
    {"setPrivilegedWebGLExtensionsEnabled", InternalSettingsGeneratedV8Internal::setPrivilegedWebGLExtensionsEnabledCallback},
    {"setQuantizedMemoryInfoEnabled", InternalSettingsGeneratedV8Internal::setQuantizedMemoryInfoEnabledCallback},
    {"setRegionBasedColumnsEnabled", InternalSettingsGeneratedV8Internal::setRegionBasedColumnsEnabledCallback},
    {"setRequestAnimationFrameEnabled", InternalSettingsGeneratedV8Internal::setRequestAnimationFrameEnabledCallback},
    {"setScrollingCoordinatorEnabled", InternalSettingsGeneratedV8Internal::setScrollingCoordinatorEnabledCallback},
    {"setSessionStorageQuota", InternalSettingsGeneratedV8Internal::setSessionStorageQuotaCallback},
    {"setShouldDisplayCaptions", InternalSettingsGeneratedV8Internal::setShouldDisplayCaptionsCallback},
    {"setShouldDisplaySubtitles", InternalSettingsGeneratedV8Internal::setShouldDisplaySubtitlesCallback},
    {"setShouldDisplayTextDescriptions", InternalSettingsGeneratedV8Internal::setShouldDisplayTextDescriptionsCallback},
    {"setShouldInjectUserScriptsInInitialEmptyDocument", InternalSettingsGeneratedV8Internal::setShouldInjectUserScriptsInInitialEmptyDocumentCallback},
    {"setShouldPrintBackgrounds", InternalSettingsGeneratedV8Internal::setShouldPrintBackgroundsCallback},
    {"setShouldRespectImageOrientation", InternalSettingsGeneratedV8Internal::setShouldRespectImageOrientationCallback},
    {"setShowsToolTipOverTruncatedText", InternalSettingsGeneratedV8Internal::setShowsToolTipOverTruncatedTextCallback},
    {"setShowsURLsInToolTips", InternalSettingsGeneratedV8Internal::setShowsURLsInToolTipsCallback},
    {"setShrinksStandaloneImagesToFit", InternalSettingsGeneratedV8Internal::setShrinksStandaloneImagesToFitCallback},
    {"setSpatialNavigationEnabled", InternalSettingsGeneratedV8Internal::setSpatialNavigationEnabledCallback},
    {"setSupportsMultipleWindows", InternalSettingsGeneratedV8Internal::setSupportsMultipleWindowsCallback},
    {"setSuppressesIncrementalRendering", InternalSettingsGeneratedV8Internal::setSuppressesIncrementalRenderingCallback},
    {"setSyncXHRInDocumentsEnabled", InternalSettingsGeneratedV8Internal::setSyncXHRInDocumentsEnabledCallback},
    {"setTouchAdjustmentEnabled", InternalSettingsGeneratedV8Internal::setTouchAdjustmentEnabledCallback},
    {"setTouchDragDropEnabled", InternalSettingsGeneratedV8Internal::setTouchDragDropEnabledCallback},
    {"setTreatsAnyTextCSSLinkAsStylesheet", InternalSettingsGeneratedV8Internal::setTreatsAnyTextCSSLinkAsStylesheetCallback},
    {"setUsePreHTML5ParserQuirks", InternalSettingsGeneratedV8Internal::setUsePreHTML5ParserQuirksCallback},
    {"setUsesDashboardBackwardCompatibilityMode", InternalSettingsGeneratedV8Internal::setUsesDashboardBackwardCompatibilityModeCallback},
    {"setUsesEncodingDetector", InternalSettingsGeneratedV8Internal::setUsesEncodingDetectorCallback},
    {"setValidationMessageTimerMagnification", InternalSettingsGeneratedV8Internal::setValidationMessageTimerMagnificationCallback},
    {"setVisualWordMovementEnabled", InternalSettingsGeneratedV8Internal::setVisualWordMovementEnabledCallback},
    {"setWantsBalancedSetDefersLoadingBehavior", InternalSettingsGeneratedV8Internal::setWantsBalancedSetDefersLoadingBehaviorCallback},
    {"setWebArchiveDebugModeEnabled", InternalSettingsGeneratedV8Internal::setWebArchiveDebugModeEnabledCallback},
    {"setWebAudioEnabled", InternalSettingsGeneratedV8Internal::setWebAudioEnabledCallback},
    {"setWebGLEnabled", InternalSettingsGeneratedV8Internal::setWebGLEnabledCallback},
    {"setWebGLErrorsToConsoleEnabled", InternalSettingsGeneratedV8Internal::setWebGLErrorsToConsoleEnabledCallback},
    {"setWebSecurityEnabled", InternalSettingsGeneratedV8Internal::setWebSecurityEnabledCallback},
    {"setWindowFocusRestricted", InternalSettingsGeneratedV8Internal::setWindowFocusRestrictedCallback},
    {"setXSSAuditorEnabled", InternalSettingsGeneratedV8Internal::setXSSAuditorEnabledCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8InternalSettingsGeneratedTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "InternalSettingsGenerated", v8::Persistent<v8::FunctionTemplate>(), V8InternalSettingsGenerated::internalFieldCount,
        0, 0,
        V8InternalSettingsGeneratedCallbacks, WTF_ARRAY_LENGTH(V8InternalSettingsGeneratedCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8InternalSettingsGenerated::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8InternalSettingsGenerated::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8InternalSettingsGeneratedTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8InternalSettingsGenerated::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8InternalSettingsGenerated::createWrapper(PassRefPtr<InternalSettingsGenerated> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8InternalSettingsGenerated::derefObject(void* object)
{
    static_cast<InternalSettingsGenerated*>(object)->deref();
}

} // namespace WebCore
