/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Notification.h"

#if ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "Dictionary.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8Event.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8Notification::info = { V8Notification::GetTemplate, V8Notification::derefObject, V8Notification::toActiveDOMObject, 0, V8Notification::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace NotificationV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> permissionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    return v8String(Notification::permission(scriptContext), info.GetIsolate());
}

static v8::Handle<v8::Value> onshowAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    return imp->onshow() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onshow())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onshowAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onshow(), value, V8Notification::eventListenerCacheIndex);
    imp->setOnshow(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondisplayAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    return imp->ondisplay() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondisplay())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondisplayAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondisplay(), value, V8Notification::eventListenerCacheIndex);
    imp->setOndisplay(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8Notification::eventListenerCacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncloseAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    return imp->onclose() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onclose())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oncloseAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onclose(), value, V8Notification::eventListenerCacheIndex);
    imp->setOnclose(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    return imp->onclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onclick(), value, V8Notification::eventListenerCacheIndex);
    imp->setOnclick(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> dirAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    return v8String(imp->dir(), info.GetIsolate());
}

static void dirAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setDir(v);
    return;
}

static v8::Handle<v8::Value> replaceIdAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    return v8String(imp->replaceId(), info.GetIsolate());
}

static void replaceIdAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setReplaceId(v);
    return;
}

static v8::Handle<v8::Value> tagAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    return v8String(imp->tag(), info.GetIsolate());
}

static void tagAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Notification* imp = V8Notification::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setTag(v);
    return;
}

static v8::Handle<v8::Value> showCallback(const v8::Arguments& args)
{
    Notification* imp = V8Notification::toNative(args.Holder());
    imp->show();
    return v8Undefined();
}

static v8::Handle<v8::Value> cancelCallback(const v8::Arguments& args)
{
    Notification* imp = V8Notification::toNative(args.Holder());
    imp->cancel();
    return v8Undefined();
}

static v8::Handle<v8::Value> closeCallback(const v8::Arguments& args)
{
    Notification* imp = V8Notification::toNative(args.Holder());
    imp->close();
    return v8Undefined();
}

static v8::Handle<v8::Value> addEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOrCreate);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8Notification::toNative(args.Holder())->addEventListener(stringResource, listener, args[2]->BooleanValue());
        createHiddenDependency(args.Holder(), args[1], V8Notification::eventListenerCacheIndex);
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> removeEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOnly);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8Notification::toNative(args.Holder())->removeEventListener(stringResource, listener.get(), args[2]->BooleanValue());
        removeHiddenDependency(args.Holder(), args[1], V8Notification::eventListenerCacheIndex);
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Notification* imp = V8Notification::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Event*, evt, V8Event::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    bool result = imp->dispatchEvent(evt, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace NotificationV8Internal

static const V8DOMConfiguration::BatchedAttribute V8NotificationAttrs[] = {
    // Attribute 'permission' (Type: 'readonly attribute' ExtAttr: 'CallWith')
    {"permission", NotificationV8Internal::permissionAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onshow' (Type: 'attribute' ExtAttr: '')
    {"onshow", NotificationV8Internal::onshowAttrGetter, NotificationV8Internal::onshowAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'ondisplay' (Type: 'attribute' ExtAttr: '')
    {"ondisplay", NotificationV8Internal::ondisplayAttrGetter, NotificationV8Internal::ondisplayAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: '')
    {"onerror", NotificationV8Internal::onerrorAttrGetter, NotificationV8Internal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onclose' (Type: 'attribute' ExtAttr: '')
    {"onclose", NotificationV8Internal::oncloseAttrGetter, NotificationV8Internal::oncloseAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onclick' (Type: 'attribute' ExtAttr: '')
    {"onclick", NotificationV8Internal::onclickAttrGetter, NotificationV8Internal::onclickAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'dir' (Type: 'attribute' ExtAttr: '')
    {"dir", NotificationV8Internal::dirAttrGetter, NotificationV8Internal::dirAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'replaceId' (Type: 'attribute' ExtAttr: '')
    {"replaceId", NotificationV8Internal::replaceIdAttrGetter, NotificationV8Internal::replaceIdAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'tag' (Type: 'attribute' ExtAttr: '')
    {"tag", NotificationV8Internal::tagAttrGetter, NotificationV8Internal::tagAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8NotificationCallbacks[] = {
    {"show", NotificationV8Internal::showCallback},
    {"cancel", NotificationV8Internal::cancelCallback},
    {"close", NotificationV8Internal::closeCallback},
    {"addEventListener", NotificationV8Internal::addEventListenerCallback},
    {"removeEventListener", NotificationV8Internal::removeEventListenerCallback},
};

v8::Handle<v8::Value> V8Notification::constructorCallback(const v8::Arguments& args)
{
    
    if (!args.IsConstructCall())
        return throwTypeError("DOM object constructor cannot be called as a function.");

    if (ConstructorMode::current() == ConstructorMode::WrapExistingObject)
        return args.Holder();
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, title, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(Dictionary, options, Dictionary(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined), args.GetIsolate()));
    if (!options.isUndefinedOrNull() && !options.isObject())
        return throwTypeError("Not an object.", args.GetIsolate());

    ScriptExecutionContext* context = getScriptExecutionContext();

    RefPtr<Notification> impl = Notification::create(context, title, options);
    v8::Handle<v8::Object> wrapper = args.Holder();

    V8DOMWrapper::associateObjectWithWrapper(impl.release(), &info, wrapper, args.GetIsolate());
    return wrapper;
}

static v8::Persistent<v8::FunctionTemplate> ConfigureV8NotificationTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "Notification", v8::Persistent<v8::FunctionTemplate>(), V8Notification::internalFieldCount,
        V8NotificationAttrs, WTF_ARRAY_LENGTH(V8NotificationAttrs),
        V8NotificationCallbacks, WTF_ARRAY_LENGTH(V8NotificationCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    desc->SetCallHandler(V8Notification::constructorCallback);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    desc->Set(v8::String::NewSymbol("requestPermission"), v8::FunctionTemplate::New(V8Notification::requestPermissionCallback, v8Undefined(), v8::Local<v8::Signature>()));

    // Custom Signature 'dispatchEvent'
    const int dispatchEventArgc = 1;
    v8::Handle<v8::FunctionTemplate> dispatchEventArgv[dispatchEventArgc] = { V8Event::GetRawTemplate() };
    v8::Handle<v8::Signature> dispatchEventSignature = v8::Signature::New(desc, dispatchEventArgc, dispatchEventArgv);
    proto->Set(v8::String::NewSymbol("dispatchEvent"), v8::FunctionTemplate::New(NotificationV8Internal::dispatchEventCallback, v8Undefined(), dispatchEventSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Notification::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Notification::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8NotificationTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Notification::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}

ActiveDOMObject* V8Notification::toActiveDOMObject(v8::Handle<v8::Object> object)
{
    return toNative(object);
}      

v8::Handle<v8::Object> V8Notification::createWrapper(PassRefPtr<Notification> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8Notification::derefObject(void* object)
{
    static_cast<Notification*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)
