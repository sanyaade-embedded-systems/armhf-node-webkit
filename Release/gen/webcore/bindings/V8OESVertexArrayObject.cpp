/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8OESVertexArrayObject.h"

#if ENABLE(WEBGL)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8WebGLVertexArrayObjectOES.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8OESVertexArrayObject::info = { V8OESVertexArrayObject::GetTemplate, V8OESVertexArrayObject::derefObject, 0, 0, V8OESVertexArrayObject::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace OESVertexArrayObjectV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> createVertexArrayOESCallback(const v8::Arguments& args)
{
    OESVertexArrayObject* imp = V8OESVertexArrayObject::toNative(args.Holder());
    return toV8(imp->createVertexArrayOES(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> deleteVertexArrayOESCallback(const v8::Arguments& args)
{
    OESVertexArrayObject* imp = V8OESVertexArrayObject::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLVertexArrayObjectOES::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLVertexArrayObjectOES*, arrayObject, V8WebGLVertexArrayObjectOES::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLVertexArrayObjectOES::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->deleteVertexArrayOES(arrayObject);
    return v8Undefined();
}

static v8::Handle<v8::Value> isVertexArrayOESCallback(const v8::Arguments& args)
{
    OESVertexArrayObject* imp = V8OESVertexArrayObject::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLVertexArrayObjectOES::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLVertexArrayObjectOES*, arrayObject, V8WebGLVertexArrayObjectOES::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLVertexArrayObjectOES::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    return v8Boolean(imp->isVertexArrayOES(arrayObject), args.GetIsolate());
}

static v8::Handle<v8::Value> bindVertexArrayOESCallback(const v8::Arguments& args)
{
    OESVertexArrayObject* imp = V8OESVertexArrayObject::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLVertexArrayObjectOES::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLVertexArrayObjectOES*, arrayObject, V8WebGLVertexArrayObjectOES::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLVertexArrayObjectOES::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->bindVertexArrayOES(arrayObject, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace OESVertexArrayObjectV8Internal

static const V8DOMConfiguration::BatchedCallback V8OESVertexArrayObjectCallbacks[] = {
    {"createVertexArrayOES", OESVertexArrayObjectV8Internal::createVertexArrayOESCallback},
    {"deleteVertexArrayOES", OESVertexArrayObjectV8Internal::deleteVertexArrayOESCallback},
    {"isVertexArrayOES", OESVertexArrayObjectV8Internal::isVertexArrayOESCallback},
    {"bindVertexArrayOES", OESVertexArrayObjectV8Internal::bindVertexArrayOESCallback},
};

static const V8DOMConfiguration::BatchedConstant V8OESVertexArrayObjectConsts[] = {
    {"VERTEX_ARRAY_BINDING_OES", static_cast<signed int>(0x85B5)},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8OESVertexArrayObjectTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "OESVertexArrayObject", v8::Persistent<v8::FunctionTemplate>(), V8OESVertexArrayObject::internalFieldCount,
        0, 0,
        V8OESVertexArrayObjectCallbacks, WTF_ARRAY_LENGTH(V8OESVertexArrayObjectCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8OESVertexArrayObjectConsts, WTF_ARRAY_LENGTH(V8OESVertexArrayObjectConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8OESVertexArrayObject::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8OESVertexArrayObject::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8OESVertexArrayObjectTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8OESVertexArrayObject::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8OESVertexArrayObject::createWrapper(PassRefPtr<OESVertexArrayObject> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8OESVertexArrayObject::derefObject(void* object)
{
    static_cast<OESVertexArrayObject*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(WEBGL)
