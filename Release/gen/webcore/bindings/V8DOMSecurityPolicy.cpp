/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8DOMSecurityPolicy.h"

#if ENABLE(CSP_NEXT)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMStringList.h"
#include "V8DOMWrapper.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8DOMSecurityPolicy::info = { V8DOMSecurityPolicy::GetTemplate, V8DOMSecurityPolicy::derefObject, 0, 0, V8DOMSecurityPolicy::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace DOMSecurityPolicyV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> allowsEvalAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(info.Holder());
    return v8Boolean(imp->allowsEval(), info.GetIsolate());
}

static v8::Handle<v8::Value> allowsInlineScriptAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(info.Holder());
    return v8Boolean(imp->allowsInlineScript(), info.GetIsolate());
}

static v8::Handle<v8::Value> allowsInlineStyleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(info.Holder());
    return v8Boolean(imp->allowsInlineStyle(), info.GetIsolate());
}

static v8::Handle<v8::Value> isActiveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(info.Holder());
    return v8Boolean(imp->isActive(), info.GetIsolate());
}

static v8::Handle<v8::Value> reportURIsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(info.Holder());
    RefPtr<DOMStringList> result = imp->reportURIs();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "reportURIs", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> allowsConnectionToCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->allowsConnectionTo(url), args.GetIsolate());
}

static v8::Handle<v8::Value> allowsFontFromCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->allowsFontFrom(url), args.GetIsolate());
}

static v8::Handle<v8::Value> allowsFormActionCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->allowsFormAction(url), args.GetIsolate());
}

static v8::Handle<v8::Value> allowsFrameFromCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->allowsFrameFrom(url), args.GetIsolate());
}

static v8::Handle<v8::Value> allowsImageFromCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->allowsImageFrom(url), args.GetIsolate());
}

static v8::Handle<v8::Value> allowsMediaFromCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->allowsMediaFrom(url), args.GetIsolate());
}

static v8::Handle<v8::Value> allowsObjectFromCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->allowsObjectFrom(url), args.GetIsolate());
}

static v8::Handle<v8::Value> allowsPluginTypeCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, type, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->allowsPluginType(type), args.GetIsolate());
}

static v8::Handle<v8::Value> allowsScriptFromCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->allowsScriptFrom(url), args.GetIsolate());
}

static v8::Handle<v8::Value> allowsStyleFromCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    DOMSecurityPolicy* imp = V8DOMSecurityPolicy::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->allowsStyleFrom(url), args.GetIsolate());
}

} // namespace DOMSecurityPolicyV8Internal

static const V8DOMConfiguration::BatchedAttribute V8DOMSecurityPolicyAttrs[] = {
    // Attribute 'allowsEval' (Type: 'readonly attribute' ExtAttr: '')
    {"allowsEval", DOMSecurityPolicyV8Internal::allowsEvalAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'allowsInlineScript' (Type: 'readonly attribute' ExtAttr: '')
    {"allowsInlineScript", DOMSecurityPolicyV8Internal::allowsInlineScriptAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'allowsInlineStyle' (Type: 'readonly attribute' ExtAttr: '')
    {"allowsInlineStyle", DOMSecurityPolicyV8Internal::allowsInlineStyleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'isActive' (Type: 'readonly attribute' ExtAttr: '')
    {"isActive", DOMSecurityPolicyV8Internal::isActiveAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'reportURIs' (Type: 'readonly attribute' ExtAttr: '')
    {"reportURIs", DOMSecurityPolicyV8Internal::reportURIsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8DOMSecurityPolicyCallbacks[] = {
    {"allowsConnectionTo", DOMSecurityPolicyV8Internal::allowsConnectionToCallback},
    {"allowsFontFrom", DOMSecurityPolicyV8Internal::allowsFontFromCallback},
    {"allowsFormAction", DOMSecurityPolicyV8Internal::allowsFormActionCallback},
    {"allowsFrameFrom", DOMSecurityPolicyV8Internal::allowsFrameFromCallback},
    {"allowsImageFrom", DOMSecurityPolicyV8Internal::allowsImageFromCallback},
    {"allowsMediaFrom", DOMSecurityPolicyV8Internal::allowsMediaFromCallback},
    {"allowsObjectFrom", DOMSecurityPolicyV8Internal::allowsObjectFromCallback},
    {"allowsPluginType", DOMSecurityPolicyV8Internal::allowsPluginTypeCallback},
    {"allowsScriptFrom", DOMSecurityPolicyV8Internal::allowsScriptFromCallback},
    {"allowsStyleFrom", DOMSecurityPolicyV8Internal::allowsStyleFromCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8DOMSecurityPolicyTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "SecurityPolicy", v8::Persistent<v8::FunctionTemplate>(), V8DOMSecurityPolicy::internalFieldCount,
        V8DOMSecurityPolicyAttrs, WTF_ARRAY_LENGTH(V8DOMSecurityPolicyAttrs),
        V8DOMSecurityPolicyCallbacks, WTF_ARRAY_LENGTH(V8DOMSecurityPolicyCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8DOMSecurityPolicy::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8DOMSecurityPolicy::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8DOMSecurityPolicyTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8DOMSecurityPolicy::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8DOMSecurityPolicy::createWrapper(PassRefPtr<DOMSecurityPolicy> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8DOMSecurityPolicy::derefObject(void* object)
{
    static_cast<DOMSecurityPolicy*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(CSP_NEXT)
