/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8CSSPrimitiveValue.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8CSSValue.h"
#include "V8Counter.h"
#include "V8DOMWrapper.h"
#include "V8RGBColor.h"
#include "V8Rect.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8CSSPrimitiveValue::info = { V8CSSPrimitiveValue::GetTemplate, V8CSSPrimitiveValue::derefObject, 0, 0, V8CSSPrimitiveValue::installPerContextPrototypeProperties, &V8CSSValue::info, WrapperTypeObjectPrototype };

namespace CSSPrimitiveValueV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> primitiveTypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(info.Holder());
    return v8Integer(imp->primitiveType(), info.GetIsolate());
}

static v8::Handle<v8::Value> setFloatValueCallback(const v8::Arguments& args)
{
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, unitType, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(float, floatValue, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->setFloatValue(unitType, floatValue, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getFloatValueCallback(const v8::Arguments& args)
{
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, unitType, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    float result = imp->getFloatValue(unitType, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8::Number::New(result);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setStringValueCallback(const v8::Arguments& args)
{
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, stringType, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, stringValue, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    imp->setStringValue(stringType, stringValue, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getStringValueCallback(const v8::Arguments& args)
{
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    String result = imp->getStringValue(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8String(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getCounterValueCallback(const v8::Arguments& args)
{
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    RefPtr<Counter> result = imp->getCounterValue(ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getRectValueCallback(const v8::Arguments& args)
{
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    RefPtr<Rect> result = imp->getRectValue(ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getRGBColorValueCallback(const v8::Arguments& args)
{
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    RefPtr<RGBColor> result = imp->getRGBColorValue(ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace CSSPrimitiveValueV8Internal

static const V8DOMConfiguration::BatchedAttribute V8CSSPrimitiveValueAttrs[] = {
    // Attribute 'primitiveType' (Type: 'readonly attribute' ExtAttr: '')
    {"primitiveType", CSSPrimitiveValueV8Internal::primitiveTypeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8CSSPrimitiveValueCallbacks[] = {
    {"setFloatValue", CSSPrimitiveValueV8Internal::setFloatValueCallback},
    {"getFloatValue", CSSPrimitiveValueV8Internal::getFloatValueCallback},
    {"setStringValue", CSSPrimitiveValueV8Internal::setStringValueCallback},
    {"getStringValue", CSSPrimitiveValueV8Internal::getStringValueCallback},
    {"getCounterValue", CSSPrimitiveValueV8Internal::getCounterValueCallback},
    {"getRectValue", CSSPrimitiveValueV8Internal::getRectValueCallback},
    {"getRGBColorValue", CSSPrimitiveValueV8Internal::getRGBColorValueCallback},
};

static const V8DOMConfiguration::BatchedConstant V8CSSPrimitiveValueConsts[] = {
    {"CSS_UNKNOWN", static_cast<signed int>(0)},
    {"CSS_NUMBER", static_cast<signed int>(1)},
    {"CSS_PERCENTAGE", static_cast<signed int>(2)},
    {"CSS_EMS", static_cast<signed int>(3)},
    {"CSS_EXS", static_cast<signed int>(4)},
    {"CSS_PX", static_cast<signed int>(5)},
    {"CSS_CM", static_cast<signed int>(6)},
    {"CSS_MM", static_cast<signed int>(7)},
    {"CSS_IN", static_cast<signed int>(8)},
    {"CSS_PT", static_cast<signed int>(9)},
    {"CSS_PC", static_cast<signed int>(10)},
    {"CSS_DEG", static_cast<signed int>(11)},
    {"CSS_RAD", static_cast<signed int>(12)},
    {"CSS_GRAD", static_cast<signed int>(13)},
    {"CSS_MS", static_cast<signed int>(14)},
    {"CSS_S", static_cast<signed int>(15)},
    {"CSS_HZ", static_cast<signed int>(16)},
    {"CSS_KHZ", static_cast<signed int>(17)},
    {"CSS_DIMENSION", static_cast<signed int>(18)},
    {"CSS_STRING", static_cast<signed int>(19)},
    {"CSS_URI", static_cast<signed int>(20)},
    {"CSS_IDENT", static_cast<signed int>(21)},
    {"CSS_ATTR", static_cast<signed int>(22)},
    {"CSS_COUNTER", static_cast<signed int>(23)},
    {"CSS_RECT", static_cast<signed int>(24)},
    {"CSS_RGBCOLOR", static_cast<signed int>(25)},
    {"CSS_VW", static_cast<signed int>(26)},
    {"CSS_VH", static_cast<signed int>(27)},
    {"CSS_VMIN", static_cast<signed int>(28)},
};


COMPILE_ASSERT(0 == CSSPrimitiveValue::CSS_UNKNOWN, CSSPrimitiveValueEnumCSS_UNKNOWNIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == CSSPrimitiveValue::CSS_NUMBER, CSSPrimitiveValueEnumCSS_NUMBERIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == CSSPrimitiveValue::CSS_PERCENTAGE, CSSPrimitiveValueEnumCSS_PERCENTAGEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == CSSPrimitiveValue::CSS_EMS, CSSPrimitiveValueEnumCSS_EMSIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(4 == CSSPrimitiveValue::CSS_EXS, CSSPrimitiveValueEnumCSS_EXSIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(5 == CSSPrimitiveValue::CSS_PX, CSSPrimitiveValueEnumCSS_PXIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(6 == CSSPrimitiveValue::CSS_CM, CSSPrimitiveValueEnumCSS_CMIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(7 == CSSPrimitiveValue::CSS_MM, CSSPrimitiveValueEnumCSS_MMIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(8 == CSSPrimitiveValue::CSS_IN, CSSPrimitiveValueEnumCSS_INIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(9 == CSSPrimitiveValue::CSS_PT, CSSPrimitiveValueEnumCSS_PTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(10 == CSSPrimitiveValue::CSS_PC, CSSPrimitiveValueEnumCSS_PCIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(11 == CSSPrimitiveValue::CSS_DEG, CSSPrimitiveValueEnumCSS_DEGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(12 == CSSPrimitiveValue::CSS_RAD, CSSPrimitiveValueEnumCSS_RADIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(13 == CSSPrimitiveValue::CSS_GRAD, CSSPrimitiveValueEnumCSS_GRADIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(14 == CSSPrimitiveValue::CSS_MS, CSSPrimitiveValueEnumCSS_MSIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(15 == CSSPrimitiveValue::CSS_S, CSSPrimitiveValueEnumCSS_SIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(16 == CSSPrimitiveValue::CSS_HZ, CSSPrimitiveValueEnumCSS_HZIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(17 == CSSPrimitiveValue::CSS_KHZ, CSSPrimitiveValueEnumCSS_KHZIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(18 == CSSPrimitiveValue::CSS_DIMENSION, CSSPrimitiveValueEnumCSS_DIMENSIONIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(19 == CSSPrimitiveValue::CSS_STRING, CSSPrimitiveValueEnumCSS_STRINGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(20 == CSSPrimitiveValue::CSS_URI, CSSPrimitiveValueEnumCSS_URIIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(21 == CSSPrimitiveValue::CSS_IDENT, CSSPrimitiveValueEnumCSS_IDENTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(22 == CSSPrimitiveValue::CSS_ATTR, CSSPrimitiveValueEnumCSS_ATTRIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(23 == CSSPrimitiveValue::CSS_COUNTER, CSSPrimitiveValueEnumCSS_COUNTERIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(24 == CSSPrimitiveValue::CSS_RECT, CSSPrimitiveValueEnumCSS_RECTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(25 == CSSPrimitiveValue::CSS_RGBCOLOR, CSSPrimitiveValueEnumCSS_RGBCOLORIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(26 == CSSPrimitiveValue::CSS_VW, CSSPrimitiveValueEnumCSS_VWIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(27 == CSSPrimitiveValue::CSS_VH, CSSPrimitiveValueEnumCSS_VHIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(28 == CSSPrimitiveValue::CSS_VMIN, CSSPrimitiveValueEnumCSS_VMINIsWrongUseDoNotCheckConstants);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8CSSPrimitiveValueTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "CSSPrimitiveValue", V8CSSValue::GetTemplate(), V8CSSPrimitiveValue::internalFieldCount,
        V8CSSPrimitiveValueAttrs, WTF_ARRAY_LENGTH(V8CSSPrimitiveValueAttrs),
        V8CSSPrimitiveValueCallbacks, WTF_ARRAY_LENGTH(V8CSSPrimitiveValueCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8CSSPrimitiveValueConsts, WTF_ARRAY_LENGTH(V8CSSPrimitiveValueConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8CSSPrimitiveValue::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8CSSPrimitiveValue::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8CSSPrimitiveValueTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8CSSPrimitiveValue::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8CSSPrimitiveValue::createWrapper(PassRefPtr<CSSPrimitiveValue> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<CSSValue*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8CSSPrimitiveValue::derefObject(void* object)
{
    static_cast<CSSPrimitiveValue*>(object)->deref();
}

} // namespace WebCore
