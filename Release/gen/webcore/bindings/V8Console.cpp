/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Console.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "ScriptArguments.h"
#include "ScriptCallStackFactory.h"
#include "ScriptProfile.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8MemoryInfo.h"
#include "V8ScriptProfile.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8Console::info = { V8Console::GetTemplate, V8Console::derefObject, 0, 0, V8Console::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace ConsoleV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> profilesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Console* imp = V8Console::toNative(info.Holder());
    return v8Array(imp->profiles(), info.GetIsolate());
}

static v8::Handle<v8::Value> memoryAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Console* imp = V8Console::toNative(info.Holder());
    RefPtr<MemoryInfo> result = imp->memory();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "memory", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> debugCallback(const v8::Arguments& args)
{
    Console* imp = V8Console::toNative(args.Holder());
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    RefPtr<ScriptArguments> scriptArguments(createScriptArguments(args, 0));
    imp->debug(&state, scriptArguments.release());
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> errorCallback(const v8::Arguments& args)
{
    Console* imp = V8Console::toNative(args.Holder());
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    RefPtr<ScriptArguments> scriptArguments(createScriptArguments(args, 0));
    imp->error(&state, scriptArguments.release());
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> infoCallback(const v8::Arguments& args)
{
    Console* imp = V8Console::toNative(args.Holder());
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    RefPtr<ScriptArguments> scriptArguments(createScriptArguments(args, 0));
    imp->info(&state, scriptArguments.release());
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> logCallback(const v8::Arguments& args)
{
    Console* imp = V8Console::toNative(args.Holder());
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    RefPtr<ScriptArguments> scriptArguments(createScriptArguments(args, 0));
    imp->log(&state, scriptArguments.release());
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> warnCallback(const v8::Arguments& args)
{
    Console* imp = V8Console::toNative(args.Holder());
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    RefPtr<ScriptArguments> scriptArguments(createScriptArguments(args, 0));
    imp->warn(&state, scriptArguments.release());
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> dirCallback(const v8::Arguments& args)
{
    Console* imp = V8Console::toNative(args.Holder());
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    RefPtr<ScriptArguments> scriptArguments(createScriptArguments(args, 0));
    imp->dir(&state, scriptArguments.release());
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> dirxmlCallback(const v8::Arguments& args)
{
    Console* imp = V8Console::toNative(args.Holder());
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    RefPtr<ScriptArguments> scriptArguments(createScriptArguments(args, 0));
    imp->dirxml(&state, scriptArguments.release());
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> countCallback(const v8::Arguments& args)
{
    Console* imp = V8Console::toNative(args.Holder());
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    RefPtr<ScriptArguments> scriptArguments(createScriptArguments(args, 0));
    imp->count(&state, scriptArguments.release());
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> markTimelineCallback(const v8::Arguments& args)
{
    Console* imp = V8Console::toNative(args.Holder());
    RefPtr<ScriptArguments> scriptArguments(createScriptArguments(args, 0));
    imp->markTimeline(scriptArguments.release());
    return v8Undefined();
}

static v8::Handle<v8::Value> timeCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Console* imp = V8Console::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithUndefinedOrNullCheck>, title, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->time(title);
    return v8Undefined();
}

static v8::Handle<v8::Value> timeEndCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Console* imp = V8Console::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithUndefinedOrNullCheck>, title, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    imp->timeEnd(&state, title);
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> timeStampCallback(const v8::Arguments& args)
{
    Console* imp = V8Console::toNative(args.Holder());
    RefPtr<ScriptArguments> scriptArguments(createScriptArguments(args, 0));
    imp->timeStamp(scriptArguments.release());
    return v8Undefined();
}

static v8::Handle<v8::Value> groupCallback(const v8::Arguments& args)
{
    Console* imp = V8Console::toNative(args.Holder());
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    RefPtr<ScriptArguments> scriptArguments(createScriptArguments(args, 0));
    imp->group(&state, scriptArguments.release());
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> groupCollapsedCallback(const v8::Arguments& args)
{
    Console* imp = V8Console::toNative(args.Holder());
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    RefPtr<ScriptArguments> scriptArguments(createScriptArguments(args, 0));
    imp->groupCollapsed(&state, scriptArguments.release());
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> groupEndCallback(const v8::Arguments& args)
{
    Console* imp = V8Console::toNative(args.Holder());
    imp->groupEnd();
    return v8Undefined();
}

static v8::Handle<v8::Value> clearCallback(const v8::Arguments& args)
{
    Console* imp = V8Console::toNative(args.Holder());
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    RefPtr<ScriptArguments> scriptArguments(createScriptArguments(args, 0));
    imp->clear(&state, scriptArguments.release());
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return v8Undefined();
}

} // namespace ConsoleV8Internal

static const V8DOMConfiguration::BatchedAttribute V8ConsoleAttrs[] = {
    // Attribute 'profiles' (Type: 'readonly attribute' ExtAttr: '')
    {"profiles", ConsoleV8Internal::profilesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'memory' (Type: 'readonly attribute' ExtAttr: '')
    {"memory", ConsoleV8Internal::memoryAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8ConsoleCallbacks[] = {
    {"debug", ConsoleV8Internal::debugCallback},
    {"error", ConsoleV8Internal::errorCallback},
    {"info", ConsoleV8Internal::infoCallback},
    {"log", ConsoleV8Internal::logCallback},
    {"warn", ConsoleV8Internal::warnCallback},
    {"dir", ConsoleV8Internal::dirCallback},
    {"dirxml", ConsoleV8Internal::dirxmlCallback},
    {"trace", V8Console::traceCallback},
    {"assert", V8Console::assertCallback},
    {"count", ConsoleV8Internal::countCallback},
    {"markTimeline", ConsoleV8Internal::markTimelineCallback},
    {"profile", V8Console::profileCallback},
    {"profileEnd", V8Console::profileEndCallback},
    {"time", ConsoleV8Internal::timeCallback},
    {"timeEnd", ConsoleV8Internal::timeEndCallback},
    {"timeStamp", ConsoleV8Internal::timeStampCallback},
    {"group", ConsoleV8Internal::groupCallback},
    {"groupCollapsed", ConsoleV8Internal::groupCollapsedCallback},
    {"groupEnd", ConsoleV8Internal::groupEndCallback},
    {"clear", ConsoleV8Internal::clearCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8ConsoleTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "Console", v8::Persistent<v8::FunctionTemplate>(), V8Console::internalFieldCount,
        V8ConsoleAttrs, WTF_ARRAY_LENGTH(V8ConsoleAttrs),
        V8ConsoleCallbacks, WTF_ARRAY_LENGTH(V8ConsoleCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Console::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Console::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8ConsoleTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Console::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Console::createWrapper(PassRefPtr<Console> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8Console::derefObject(void* object)
{
    static_cast<Console*>(object)->deref();
}

} // namespace WebCore
