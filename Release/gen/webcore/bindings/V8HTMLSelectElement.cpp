/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLSelectElement.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8Collection.h"
#include "V8DOMWrapper.h"
#include "V8HTMLCollection.h"
#include "V8HTMLElement.h"
#include "V8HTMLFormElement.h"
#include "V8HTMLOptionsCollection.h"
#include "V8Node.h"
#include "V8NodeList.h"
#include "V8ValidityState.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8HTMLSelectElement::info = { V8HTMLSelectElement::GetTemplate, V8HTMLSelectElement::derefObject, 0, 0, V8HTMLSelectElement::installPerContextPrototypeProperties, &V8HTMLElement::info, WrapperTypeObjectPrototype };

namespace HTMLSelectElementV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> autofocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::autofocusAttr), info.GetIsolate());
}

static void autofocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::autofocusAttr, v);
    return;
}

static v8::Handle<v8::Value> disabledAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::disabledAttr), info.GetIsolate());
}

static void disabledAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, v);
    return;
}

static v8::Handle<v8::Value> formAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return toV8Fast(imp->form(), info, imp);
}

static v8::Handle<v8::Value> multipleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return v8Boolean(imp->multiple(), info.GetIsolate());
}

static void multipleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setMultiple(v);
    return;
}

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->getNameAttribute(), info.GetIsolate());
}

static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::nameAttr, stringResource);
}

static v8::Handle<v8::Value> requiredAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::requiredAttr), info.GetIsolate());
}

static void requiredAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::requiredAttr, v);
    return;
}

static v8::Handle<v8::Value> sizeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return v8Integer(imp->size(), info.GetIsolate());
}

static void sizeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    int v = toInt32(value);
    imp->setSize(v);
    return;
}

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return v8String(imp->type(), info.GetIsolate());
}

static v8::Handle<v8::Value> optionsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return toV8Fast(imp->options(), info, imp);
}

static v8::Handle<v8::Value> lengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return v8UnsignedInteger(imp->length(), info.GetIsolate());
}

static void lengthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    unsigned v = toUInt32(value);
    ExceptionCode ec = 0;
    imp->setLength(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> selectedOptionsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return toV8Fast(imp->selectedOptions(), info, imp);
}

static v8::Handle<v8::Value> selectedIndexAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return v8Integer(imp->selectedIndex(), info.GetIsolate());
}

static void selectedIndexAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    int v = toInt32(value);
    imp->setSelectedIndex(v);
    return;
}

static v8::Handle<v8::Value> valueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return v8String(imp->value(), info.GetIsolate());
}

static void valueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setValue(v);
    return;
}

static v8::Handle<v8::Value> willValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return v8Boolean(imp->willValidate(), info.GetIsolate());
}

static v8::Handle<v8::Value> validityAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return toV8Fast(imp->validity(), info, imp);
}

static v8::Handle<v8::Value> validationMessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return v8String(imp->validationMessage(), info.GetIsolate());
}

static v8::Handle<v8::Value> labelsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(info.Holder());
    return toV8Fast(imp->labels(), info, imp);
}

static v8::Handle<v8::Value> itemCallback(const v8::Arguments& args)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, index, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (UNLIKELY(index < 0)) {
        ec = INDEX_SIZE_ERR;
        goto fail;
    }
    return toV8Fast(imp->item(index), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> namedItemCallback(const v8::Arguments& args)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8Fast(imp->namedItem(name), args, imp);
}

static v8::Handle<v8::Value> addCallback(const v8::Arguments& args)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(HTMLElement*, element, V8HTMLElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8HTMLElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(HTMLElement*, before, V8HTMLElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8HTMLElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    imp->add(element, before, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> checkValidityCallback(const v8::Arguments& args)
{
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(args.Holder());
    return v8Boolean(imp->checkValidity(), args.GetIsolate());
}

static v8::Handle<v8::Value> setCustomValidityCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    HTMLSelectElement* imp = V8HTMLSelectElement::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithUndefinedOrNullCheck>, error, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->setCustomValidity(error);
    return v8Undefined();
}

} // namespace HTMLSelectElementV8Internal

static const V8DOMConfiguration::BatchedAttribute V8HTMLSelectElementAttrs[] = {
    // Attribute 'autofocus' (Type: 'attribute' ExtAttr: 'Reflect')
    {"autofocus", HTMLSelectElementV8Internal::autofocusAttrGetter, HTMLSelectElementV8Internal::autofocusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'disabled' (Type: 'attribute' ExtAttr: 'Reflect')
    {"disabled", HTMLSelectElementV8Internal::disabledAttrGetter, HTMLSelectElementV8Internal::disabledAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'form' (Type: 'readonly attribute' ExtAttr: '')
    {"form", HTMLSelectElementV8Internal::formAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'multiple' (Type: 'attribute' ExtAttr: '')
    {"multiple", HTMLSelectElementV8Internal::multipleAttrGetter, HTMLSelectElementV8Internal::multipleAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'name' (Type: 'attribute' ExtAttr: 'Reflect')
    {"name", HTMLSelectElementV8Internal::nameAttrGetter, HTMLSelectElementV8Internal::nameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'required' (Type: 'attribute' ExtAttr: 'Reflect')
    {"required", HTMLSelectElementV8Internal::requiredAttrGetter, HTMLSelectElementV8Internal::requiredAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'size' (Type: 'attribute' ExtAttr: '')
    {"size", HTMLSelectElementV8Internal::sizeAttrGetter, HTMLSelectElementV8Internal::sizeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'type' (Type: 'readonly attribute' ExtAttr: '')
    {"type", HTMLSelectElementV8Internal::typeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'options' (Type: 'readonly attribute' ExtAttr: '')
    {"options", HTMLSelectElementV8Internal::optionsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'length' (Type: 'attribute' ExtAttr: '')
    {"length", HTMLSelectElementV8Internal::lengthAttrGetter, HTMLSelectElementV8Internal::lengthAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'selectedOptions' (Type: 'readonly attribute' ExtAttr: '')
    {"selectedOptions", HTMLSelectElementV8Internal::selectedOptionsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'selectedIndex' (Type: 'attribute' ExtAttr: '')
    {"selectedIndex", HTMLSelectElementV8Internal::selectedIndexAttrGetter, HTMLSelectElementV8Internal::selectedIndexAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'value' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"value", HTMLSelectElementV8Internal::valueAttrGetter, HTMLSelectElementV8Internal::valueAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'willValidate' (Type: 'readonly attribute' ExtAttr: '')
    {"willValidate", HTMLSelectElementV8Internal::willValidateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'validity' (Type: 'readonly attribute' ExtAttr: '')
    {"validity", HTMLSelectElementV8Internal::validityAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'validationMessage' (Type: 'readonly attribute' ExtAttr: '')
    {"validationMessage", HTMLSelectElementV8Internal::validationMessageAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'labels' (Type: 'readonly attribute' ExtAttr: '')
    {"labels", HTMLSelectElementV8Internal::labelsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8HTMLSelectElementCallbacks[] = {
    {"item", HTMLSelectElementV8Internal::itemCallback},
    {"namedItem", HTMLSelectElementV8Internal::namedItemCallback},
    {"remove", V8HTMLSelectElement::removeCallback},
    {"checkValidity", HTMLSelectElementV8Internal::checkValidityCallback},
    {"setCustomValidity", HTMLSelectElementV8Internal::setCustomValidityCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLSelectElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "HTMLSelectElement", V8HTMLElement::GetTemplate(), V8HTMLSelectElement::internalFieldCount,
        V8HTMLSelectElementAttrs, WTF_ARRAY_LENGTH(V8HTMLSelectElementAttrs),
        V8HTMLSelectElementCallbacks, WTF_ARRAY_LENGTH(V8HTMLSelectElementCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    desc->InstanceTemplate()->SetIndexedPropertyHandler(V8HTMLSelectElement::indexedPropertyGetter, V8HTMLSelectElement::indexedPropertySetter, 0, 0, nodeCollectionIndexedPropertyEnumerator<HTMLSelectElement>);

    // Custom Signature 'add'
    const int addArgc = 2;
    v8::Handle<v8::FunctionTemplate> addArgv[addArgc] = { V8HTMLElement::GetRawTemplate(), V8HTMLElement::GetRawTemplate() };
    v8::Handle<v8::Signature> addSignature = v8::Signature::New(desc, addArgc, addArgv);
    proto->Set(v8::String::NewSymbol("add"), v8::FunctionTemplate::New(HTMLSelectElementV8Internal::addCallback, v8Undefined(), addSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLSelectElement::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLSelectElement::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLSelectElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLSelectElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLSelectElement::createWrapper(PassRefPtr<HTMLSelectElement> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<Node*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8HTMLSelectElement::derefObject(void* object)
{
    static_cast<HTMLSelectElement*>(object)->deref();
}

} // namespace WebCore
