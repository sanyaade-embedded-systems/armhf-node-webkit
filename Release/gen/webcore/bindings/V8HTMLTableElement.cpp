/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLTableElement.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8HTMLCollection.h"
#include "V8HTMLElement.h"
#include "V8HTMLTableCaptionElement.h"
#include "V8HTMLTableSectionElement.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8HTMLTableElement::info = { V8HTMLTableElement::GetTemplate, V8HTMLTableElement::derefObject, 0, 0, V8HTMLTableElement::installPerContextPrototypeProperties, &V8HTMLElement::info, WrapperTypeObjectPrototype };

namespace HTMLTableElementV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> captionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return toV8Fast(imp->caption(), info, imp);
}

static void captionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    HTMLTableCaptionElement* v = V8HTMLTableCaptionElement::HasInstance(value) ? V8HTMLTableCaptionElement::toNative(v8::Handle<v8::Object>::Cast(value)) : 0;
    ExceptionCode ec = 0;
    imp->setCaption(WTF::getPtr(v), ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> tHeadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return toV8Fast(imp->tHead(), info, imp);
}

static void tHeadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    HTMLTableSectionElement* v = V8HTMLTableSectionElement::HasInstance(value) ? V8HTMLTableSectionElement::toNative(v8::Handle<v8::Object>::Cast(value)) : 0;
    ExceptionCode ec = 0;
    imp->setTHead(WTF::getPtr(v), ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> tFootAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return toV8Fast(imp->tFoot(), info, imp);
}

static void tFootAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    HTMLTableSectionElement* v = V8HTMLTableSectionElement::HasInstance(value) ? V8HTMLTableSectionElement::toNative(v8::Handle<v8::Object>::Cast(value)) : 0;
    ExceptionCode ec = 0;
    imp->setTFoot(WTF::getPtr(v), ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> rowsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return toV8Fast(imp->rows(), info, imp);
}

static v8::Handle<v8::Value> tBodiesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return toV8Fast(imp->tBodies(), info, imp);
}

static v8::Handle<v8::Value> alignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::alignAttr), info.GetIsolate());
}

static void alignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::alignAttr, stringResource);
}

static v8::Handle<v8::Value> bgColorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::bgcolorAttr), info.GetIsolate());
}

static void bgColorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::bgcolorAttr, stringResource);
}

static v8::Handle<v8::Value> borderAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::borderAttr), info.GetIsolate());
}

static void borderAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::borderAttr, stringResource);
}

static v8::Handle<v8::Value> cellPaddingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::cellpaddingAttr), info.GetIsolate());
}

static void cellPaddingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::cellpaddingAttr, stringResource);
}

static v8::Handle<v8::Value> cellSpacingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::cellspacingAttr), info.GetIsolate());
}

static void cellSpacingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::cellspacingAttr, stringResource);
}

static v8::Handle<v8::Value> frameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::frameAttr), info.GetIsolate());
}

static void frameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::frameAttr, stringResource);
}

static v8::Handle<v8::Value> rulesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::rulesAttr), info.GetIsolate());
}

static void rulesAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::rulesAttr, stringResource);
}

static v8::Handle<v8::Value> summaryAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::summaryAttr), info.GetIsolate());
}

static void summaryAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::summaryAttr, stringResource);
}

static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::widthAttr), info.GetIsolate());
}

static void widthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::widthAttr, stringResource);
}

static v8::Handle<v8::Value> createTHeadCallback(const v8::Arguments& args)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    return toV8Fast(imp->createTHead(), args, imp);
}

static v8::Handle<v8::Value> deleteTHeadCallback(const v8::Arguments& args)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    imp->deleteTHead();
    return v8Undefined();
}

static v8::Handle<v8::Value> createTFootCallback(const v8::Arguments& args)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    return toV8Fast(imp->createTFoot(), args, imp);
}

static v8::Handle<v8::Value> deleteTFootCallback(const v8::Arguments& args)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    imp->deleteTFoot();
    return v8Undefined();
}

static v8::Handle<v8::Value> createTBodyCallback(const v8::Arguments& args)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    return toV8Fast(imp->createTBody(), args, imp);
}

static v8::Handle<v8::Value> createCaptionCallback(const v8::Arguments& args)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    return toV8Fast(imp->createCaption(), args, imp);
}

static v8::Handle<v8::Value> deleteCaptionCallback(const v8::Arguments& args)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    imp->deleteCaption();
    return v8Undefined();
}

static v8::Handle<v8::Value> insertRowCallback(const v8::Arguments& args)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, index, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    RefPtr<HTMLElement> result = imp->insertRow(index, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> deleteRowCallback(const v8::Arguments& args)
{
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, index, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->deleteRow(index, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace HTMLTableElementV8Internal

static const V8DOMConfiguration::BatchedAttribute V8HTMLTableElementAttrs[] = {
    // Attribute 'caption' (Type: 'attribute' ExtAttr: '')
    {"caption", HTMLTableElementV8Internal::captionAttrGetter, HTMLTableElementV8Internal::captionAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'tHead' (Type: 'attribute' ExtAttr: '')
    {"tHead", HTMLTableElementV8Internal::tHeadAttrGetter, HTMLTableElementV8Internal::tHeadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'tFoot' (Type: 'attribute' ExtAttr: '')
    {"tFoot", HTMLTableElementV8Internal::tFootAttrGetter, HTMLTableElementV8Internal::tFootAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'rows' (Type: 'readonly attribute' ExtAttr: '')
    {"rows", HTMLTableElementV8Internal::rowsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'tBodies' (Type: 'readonly attribute' ExtAttr: '')
    {"tBodies", HTMLTableElementV8Internal::tBodiesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'align' (Type: 'attribute' ExtAttr: 'Reflect')
    {"align", HTMLTableElementV8Internal::alignAttrGetter, HTMLTableElementV8Internal::alignAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'bgColor' (Type: 'attribute' ExtAttr: 'Reflect')
    {"bgColor", HTMLTableElementV8Internal::bgColorAttrGetter, HTMLTableElementV8Internal::bgColorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'border' (Type: 'attribute' ExtAttr: 'Reflect')
    {"border", HTMLTableElementV8Internal::borderAttrGetter, HTMLTableElementV8Internal::borderAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'cellPadding' (Type: 'attribute' ExtAttr: 'Reflect')
    {"cellPadding", HTMLTableElementV8Internal::cellPaddingAttrGetter, HTMLTableElementV8Internal::cellPaddingAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'cellSpacing' (Type: 'attribute' ExtAttr: 'Reflect')
    {"cellSpacing", HTMLTableElementV8Internal::cellSpacingAttrGetter, HTMLTableElementV8Internal::cellSpacingAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'frame' (Type: 'attribute' ExtAttr: 'Reflect')
    {"frame", HTMLTableElementV8Internal::frameAttrGetter, HTMLTableElementV8Internal::frameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'rules' (Type: 'attribute' ExtAttr: 'Reflect')
    {"rules", HTMLTableElementV8Internal::rulesAttrGetter, HTMLTableElementV8Internal::rulesAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'summary' (Type: 'attribute' ExtAttr: 'Reflect')
    {"summary", HTMLTableElementV8Internal::summaryAttrGetter, HTMLTableElementV8Internal::summaryAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'width' (Type: 'attribute' ExtAttr: 'Reflect')
    {"width", HTMLTableElementV8Internal::widthAttrGetter, HTMLTableElementV8Internal::widthAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8HTMLTableElementCallbacks[] = {
    {"createTHead", HTMLTableElementV8Internal::createTHeadCallback},
    {"deleteTHead", HTMLTableElementV8Internal::deleteTHeadCallback},
    {"createTFoot", HTMLTableElementV8Internal::createTFootCallback},
    {"deleteTFoot", HTMLTableElementV8Internal::deleteTFootCallback},
    {"createTBody", HTMLTableElementV8Internal::createTBodyCallback},
    {"createCaption", HTMLTableElementV8Internal::createCaptionCallback},
    {"deleteCaption", HTMLTableElementV8Internal::deleteCaptionCallback},
    {"insertRow", HTMLTableElementV8Internal::insertRowCallback},
    {"deleteRow", HTMLTableElementV8Internal::deleteRowCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLTableElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "HTMLTableElement", V8HTMLElement::GetTemplate(), V8HTMLTableElement::internalFieldCount,
        V8HTMLTableElementAttrs, WTF_ARRAY_LENGTH(V8HTMLTableElementAttrs),
        V8HTMLTableElementCallbacks, WTF_ARRAY_LENGTH(V8HTMLTableElementCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLTableElement::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLTableElement::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLTableElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLTableElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLTableElement::createWrapper(PassRefPtr<HTMLTableElement> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<Node*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8HTMLTableElement::derefObject(void* object)
{
    static_cast<HTMLTableElement*>(object)->deref();
}

} // namespace WebCore
