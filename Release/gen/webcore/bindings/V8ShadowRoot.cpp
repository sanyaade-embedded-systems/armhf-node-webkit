/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8ShadowRoot.h"

#if ENABLE(SHADOW_DOM)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMSelection.h"
#include "V8DOMWrapper.h"
#include "V8DocumentFragment.h"
#include "V8Element.h"
#include "V8Node.h"
#include "V8NodeList.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8ShadowRoot::info = { V8ShadowRoot::GetTemplate, V8ShadowRoot::derefObject, 0, 0, V8ShadowRoot::installPerContextPrototypeProperties, &V8DocumentFragment::info, WrapperTypeObjectPrototype };

namespace ShadowRootV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> activeElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    ShadowRoot* imp = V8ShadowRoot::toNative(info.Holder());
    return toV8Fast(imp->activeElement(), info, imp);
}

static v8::Handle<v8::Value> applyAuthorStylesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    ShadowRoot* imp = V8ShadowRoot::toNative(info.Holder());
    return v8Boolean(imp->applyAuthorStyles(), info.GetIsolate());
}

static void applyAuthorStylesAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    ShadowRoot* imp = V8ShadowRoot::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setApplyAuthorStyles(v);
    return;
}

static v8::Handle<v8::Value> resetStyleInheritanceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    ShadowRoot* imp = V8ShadowRoot::toNative(info.Holder());
    return v8Boolean(imp->resetStyleInheritance(), info.GetIsolate());
}

static void resetStyleInheritanceAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    ShadowRoot* imp = V8ShadowRoot::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setResetStyleInheritance(v);
    return;
}

static v8::Handle<v8::Value> innerHTMLAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    ShadowRoot* imp = V8ShadowRoot::toNative(info.Holder());
    return v8String(imp->innerHTML(), info.GetIsolate());
}

static void innerHTMLAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    ShadowRoot* imp = V8ShadowRoot::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setInnerHTML(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> cloneNodeCallback(const v8::Arguments& args)
{
    ShadowRoot* imp = V8ShadowRoot::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(bool, deep, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    RefPtr<Node> result = imp->cloneNode(deep, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getSelectionCallback(const v8::Arguments& args)
{
    ShadowRoot* imp = V8ShadowRoot::toNative(args.Holder());
    return toV8Fast(imp->getSelection(), args, imp);
}

static v8::Handle<v8::Value> getElementByIdCallback(const v8::Arguments& args)
{
    ShadowRoot* imp = V8ShadowRoot::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, elementId, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8Fast(imp->getElementById(elementId), args, imp);
}

static v8::Handle<v8::Value> getElementsByClassNameCallback(const v8::Arguments& args)
{
    ShadowRoot* imp = V8ShadowRoot::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, className, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8Fast(imp->getElementsByClassName(className), args, imp);
}

static v8::Handle<v8::Value> getElementsByTagNameCallback(const v8::Arguments& args)
{
    ShadowRoot* imp = V8ShadowRoot::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, tagName, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8Fast(imp->getElementsByTagName(tagName), args, imp);
}

static v8::Handle<v8::Value> getElementsByTagNameNSCallback(const v8::Arguments& args)
{
    ShadowRoot* imp = V8ShadowRoot::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, localName, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    return toV8Fast(imp->getElementsByTagNameNS(namespaceURI, localName), args, imp);
}

static v8::Handle<v8::Value> elementFromPointCallback(const v8::Arguments& args)
{
    ShadowRoot* imp = V8ShadowRoot::toNative(args.Holder());
    V8TRYCATCH(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    return toV8Fast(imp->elementFromPoint(x, y), args, imp);
}

} // namespace ShadowRootV8Internal

static const V8DOMConfiguration::BatchedAttribute V8ShadowRootAttrs[] = {
    // Attribute 'activeElement' (Type: 'readonly attribute' ExtAttr: '')
    {"activeElement", ShadowRootV8Internal::activeElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'applyAuthorStyles' (Type: 'attribute' ExtAttr: '')
    {"applyAuthorStyles", ShadowRootV8Internal::applyAuthorStylesAttrGetter, ShadowRootV8Internal::applyAuthorStylesAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'resetStyleInheritance' (Type: 'attribute' ExtAttr: '')
    {"resetStyleInheritance", ShadowRootV8Internal::resetStyleInheritanceAttrGetter, ShadowRootV8Internal::resetStyleInheritanceAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'innerHTML' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"innerHTML", ShadowRootV8Internal::innerHTMLAttrGetter, ShadowRootV8Internal::innerHTMLAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8ShadowRootCallbacks[] = {
    {"cloneNode", ShadowRootV8Internal::cloneNodeCallback},
    {"getSelection", ShadowRootV8Internal::getSelectionCallback},
    {"getElementById", ShadowRootV8Internal::getElementByIdCallback},
    {"getElementsByClassName", ShadowRootV8Internal::getElementsByClassNameCallback},
    {"getElementsByTagName", ShadowRootV8Internal::getElementsByTagNameCallback},
    {"getElementsByTagNameNS", ShadowRootV8Internal::getElementsByTagNameNSCallback},
    {"elementFromPoint", ShadowRootV8Internal::elementFromPointCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8ShadowRootTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "ShadowRoot", V8DocumentFragment::GetTemplate(), V8ShadowRoot::internalFieldCount,
        V8ShadowRootAttrs, WTF_ARRAY_LENGTH(V8ShadowRootAttrs),
        V8ShadowRootCallbacks, WTF_ARRAY_LENGTH(V8ShadowRootCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8ShadowRoot::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8ShadowRoot::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8ShadowRootTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8ShadowRoot::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8ShadowRoot::createWrapper(PassRefPtr<ShadowRoot> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<Node*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8ShadowRoot::derefObject(void* object)
{
    static_cast<ShadowRoot*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SHADOW_DOM)
