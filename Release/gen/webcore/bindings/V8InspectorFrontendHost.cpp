/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8InspectorFrontendHost.h"

#if ENABLE(INSPECTOR)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8InspectorFrontendHost::info = { V8InspectorFrontendHost::GetTemplate, V8InspectorFrontendHost::derefObject, 0, 0, V8InspectorFrontendHost::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace InspectorFrontendHostV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> loadedCallback(const v8::Arguments& args)
{
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    imp->loaded();
    return v8Undefined();
}

static v8::Handle<v8::Value> closeWindowCallback(const v8::Arguments& args)
{
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    imp->closeWindow();
    return v8Undefined();
}

static v8::Handle<v8::Value> bringToFrontCallback(const v8::Arguments& args)
{
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    imp->bringToFront();
    return v8Undefined();
}

static v8::Handle<v8::Value> setZoomFactorCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    V8TRYCATCH(float, zoom, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    imp->setZoomFactor(zoom);
    return v8Undefined();
}

static v8::Handle<v8::Value> inspectedURLChangedCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, newURL, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->inspectedURLChanged(newURL);
    return v8Undefined();
}

static v8::Handle<v8::Value> requestSetDockSideCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, side, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->requestSetDockSide(side);
    return v8Undefined();
}

static v8::Handle<v8::Value> setAttachedWindowHeightCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    V8TRYCATCH(unsigned, height, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->setAttachedWindowHeight(height);
    return v8Undefined();
}

static v8::Handle<v8::Value> moveWindowByCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->moveWindowBy(x, y);
    return v8Undefined();
}

static v8::Handle<v8::Value> setInjectedScriptForOriginCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, origin, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, script, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    imp->setInjectedScriptForOrigin(origin, script);
    return v8Undefined();
}

static v8::Handle<v8::Value> localizedStringsURLCallback(const v8::Arguments& args)
{
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    return v8String(imp->localizedStringsURL(), args.GetIsolate());
}

static v8::Handle<v8::Value> hiddenPanelsCallback(const v8::Arguments& args)
{
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    return v8String(imp->hiddenPanels(), args.GetIsolate());
}

static v8::Handle<v8::Value> copyTextCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, text, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->copyText(text);
    return v8Undefined();
}

static v8::Handle<v8::Value> openInNewTabCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->openInNewTab(url);
    return v8Undefined();
}

static v8::Handle<v8::Value> canSaveCallback(const v8::Arguments& args)
{
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    return v8Boolean(imp->canSave(), args.GetIsolate());
}

static v8::Handle<v8::Value> saveCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, content, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    V8TRYCATCH(bool, forceSaveAs, MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->BooleanValue());
    imp->save(url, content, forceSaveAs);
    return v8Undefined();
}

static v8::Handle<v8::Value> appendCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, content, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    imp->append(url, content);
    return v8Undefined();
}

static v8::Handle<v8::Value> closeCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->close(url);
    return v8Undefined();
}

static v8::Handle<v8::Value> canInspectWorkersCallback(const v8::Arguments& args)
{
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    return v8Boolean(imp->canInspectWorkers(), args.GetIsolate());
}

static v8::Handle<v8::Value> sendMessageToBackendCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, message, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->sendMessageToBackend(message);
    return v8Undefined();
}

static v8::Handle<v8::Value> loadResourceSynchronouslyCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8String(imp->loadResourceSynchronously(url), args.GetIsolate());
}

} // namespace InspectorFrontendHostV8Internal

static const V8DOMConfiguration::BatchedCallback V8InspectorFrontendHostCallbacks[] = {
    {"loaded", InspectorFrontendHostV8Internal::loadedCallback},
    {"closeWindow", InspectorFrontendHostV8Internal::closeWindowCallback},
    {"bringToFront", InspectorFrontendHostV8Internal::bringToFrontCallback},
    {"setZoomFactor", InspectorFrontendHostV8Internal::setZoomFactorCallback},
    {"inspectedURLChanged", InspectorFrontendHostV8Internal::inspectedURLChangedCallback},
    {"requestSetDockSide", InspectorFrontendHostV8Internal::requestSetDockSideCallback},
    {"setAttachedWindowHeight", InspectorFrontendHostV8Internal::setAttachedWindowHeightCallback},
    {"moveWindowBy", InspectorFrontendHostV8Internal::moveWindowByCallback},
    {"setInjectedScriptForOrigin", InspectorFrontendHostV8Internal::setInjectedScriptForOriginCallback},
    {"localizedStringsURL", InspectorFrontendHostV8Internal::localizedStringsURLCallback},
    {"hiddenPanels", InspectorFrontendHostV8Internal::hiddenPanelsCallback},
    {"copyText", InspectorFrontendHostV8Internal::copyTextCallback},
    {"openInNewTab", InspectorFrontendHostV8Internal::openInNewTabCallback},
    {"canSave", InspectorFrontendHostV8Internal::canSaveCallback},
    {"save", InspectorFrontendHostV8Internal::saveCallback},
    {"append", InspectorFrontendHostV8Internal::appendCallback},
    {"close", InspectorFrontendHostV8Internal::closeCallback},
    {"canInspectWorkers", InspectorFrontendHostV8Internal::canInspectWorkersCallback},
    {"platform", V8InspectorFrontendHost::platformCallback},
    {"port", V8InspectorFrontendHost::portCallback},
    {"showContextMenu", V8InspectorFrontendHost::showContextMenuCallback},
    {"sendMessageToBackend", InspectorFrontendHostV8Internal::sendMessageToBackendCallback},
    {"recordActionTaken", V8InspectorFrontendHost::recordActionTakenCallback},
    {"recordPanelShown", V8InspectorFrontendHost::recordPanelShownCallback},
    {"recordSettingChanged", V8InspectorFrontendHost::recordSettingChangedCallback},
    {"loadResourceSynchronously", InspectorFrontendHostV8Internal::loadResourceSynchronouslyCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8InspectorFrontendHostTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "InspectorFrontendHost", v8::Persistent<v8::FunctionTemplate>(), V8InspectorFrontendHost::internalFieldCount,
        0, 0,
        V8InspectorFrontendHostCallbacks, WTF_ARRAY_LENGTH(V8InspectorFrontendHostCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8InspectorFrontendHost::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8InspectorFrontendHost::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8InspectorFrontendHostTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8InspectorFrontendHost::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8InspectorFrontendHost::createWrapper(PassRefPtr<InspectorFrontendHost> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8InspectorFrontendHost::derefObject(void* object)
{
    static_cast<InspectorFrontendHost*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(INSPECTOR)
