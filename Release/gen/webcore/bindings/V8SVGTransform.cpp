/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGTransform.h"

#if ENABLE(SVG)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "SVGAnimatedPropertyTearOff.h"
#include "SVGPropertyTearOff.h"
#include "SVGStaticPropertyWithParentTearOff.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8SVGMatrix.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8SVGTransform::info = { V8SVGTransform::GetTemplate, V8SVGTransform::derefObject, 0, 0, V8SVGTransform::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace SVGTransformV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGPropertyTearOff<SVGTransform>* wrapper = V8SVGTransform::toNative(info.Holder());
    SVGTransform& impInstance = wrapper->propertyReference();
    SVGTransform* imp = &impInstance;
    return v8Integer(imp->type(), info.GetIsolate());
}

static v8::Handle<v8::Value> matrixAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGPropertyTearOff<SVGTransform>* wrapper = V8SVGTransform::toNative(info.Holder());
    SVGTransform& impInstance = wrapper->propertyReference();
    SVGTransform* imp = &impInstance;
    return toV8Fast(WTF::getPtr(SVGStaticPropertyWithParentTearOff<SVGTransform, SVGMatrix>::create(wrapper, imp->svgMatrix(), &SVGTransform::updateMatrix)), info, imp);
}

static v8::Handle<v8::Value> angleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGPropertyTearOff<SVGTransform>* wrapper = V8SVGTransform::toNative(info.Holder());
    SVGTransform& impInstance = wrapper->propertyReference();
    SVGTransform* imp = &impInstance;
    return v8::Number::New(imp->angle());
}

static v8::Handle<v8::Value> setMatrixCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RefPtr<SVGPropertyTearOff<SVGTransform> > wrapper = V8SVGTransform::toNative(args.Holder());
    if (wrapper->isReadOnly())
        return setDOMException(NO_MODIFICATION_ALLOWED_ERR, args.GetIsolate());
    SVGTransform& impInstance = wrapper->propertyReference();
    SVGTransform* imp = &impInstance;
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8SVGMatrix::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(RefPtr<SVGPropertyTearOff<SVGMatrix> >, matrix, V8SVGMatrix::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8SVGMatrix::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    if (!matrix)
        return setDOMException(WebCore::TYPE_MISMATCH_ERR, args.GetIsolate());
    imp->setMatrix(matrix->propertyReference());
    wrapper->commitChange();
    return v8Undefined();
}

static v8::Handle<v8::Value> setTranslateCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RefPtr<SVGPropertyTearOff<SVGTransform> > wrapper = V8SVGTransform::toNative(args.Holder());
    if (wrapper->isReadOnly())
        return setDOMException(NO_MODIFICATION_ALLOWED_ERR, args.GetIsolate());
    SVGTransform& impInstance = wrapper->propertyReference();
    SVGTransform* imp = &impInstance;
    V8TRYCATCH(float, tx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, ty, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->setTranslate(tx, ty);
    wrapper->commitChange();
    return v8Undefined();
}

static v8::Handle<v8::Value> setScaleCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RefPtr<SVGPropertyTearOff<SVGTransform> > wrapper = V8SVGTransform::toNative(args.Holder());
    if (wrapper->isReadOnly())
        return setDOMException(NO_MODIFICATION_ALLOWED_ERR, args.GetIsolate());
    SVGTransform& impInstance = wrapper->propertyReference();
    SVGTransform* imp = &impInstance;
    V8TRYCATCH(float, sx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->setScale(sx, sy);
    wrapper->commitChange();
    return v8Undefined();
}

static v8::Handle<v8::Value> setRotateCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RefPtr<SVGPropertyTearOff<SVGTransform> > wrapper = V8SVGTransform::toNative(args.Holder());
    if (wrapper->isReadOnly())
        return setDOMException(NO_MODIFICATION_ALLOWED_ERR, args.GetIsolate());
    SVGTransform& impInstance = wrapper->propertyReference();
    SVGTransform* imp = &impInstance;
    V8TRYCATCH(float, angle, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, cx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, cy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    imp->setRotate(angle, cx, cy);
    wrapper->commitChange();
    return v8Undefined();
}

static v8::Handle<v8::Value> setSkewXCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RefPtr<SVGPropertyTearOff<SVGTransform> > wrapper = V8SVGTransform::toNative(args.Holder());
    if (wrapper->isReadOnly())
        return setDOMException(NO_MODIFICATION_ALLOWED_ERR, args.GetIsolate());
    SVGTransform& impInstance = wrapper->propertyReference();
    SVGTransform* imp = &impInstance;
    V8TRYCATCH(float, angle, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    imp->setSkewX(angle);
    wrapper->commitChange();
    return v8Undefined();
}

static v8::Handle<v8::Value> setSkewYCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RefPtr<SVGPropertyTearOff<SVGTransform> > wrapper = V8SVGTransform::toNative(args.Holder());
    if (wrapper->isReadOnly())
        return setDOMException(NO_MODIFICATION_ALLOWED_ERR, args.GetIsolate());
    SVGTransform& impInstance = wrapper->propertyReference();
    SVGTransform* imp = &impInstance;
    V8TRYCATCH(float, angle, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    imp->setSkewY(angle);
    wrapper->commitChange();
    return v8Undefined();
}

} // namespace SVGTransformV8Internal

static const V8DOMConfiguration::BatchedAttribute V8SVGTransformAttrs[] = {
    // Attribute 'type' (Type: 'readonly attribute' ExtAttr: '')
    {"type", SVGTransformV8Internal::typeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'matrix' (Type: 'readonly attribute' ExtAttr: '')
    {"matrix", SVGTransformV8Internal::matrixAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'angle' (Type: 'readonly attribute' ExtAttr: '')
    {"angle", SVGTransformV8Internal::angleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8SVGTransformCallbacks[] = {
    {"setMatrix", SVGTransformV8Internal::setMatrixCallback},
    {"setTranslate", SVGTransformV8Internal::setTranslateCallback},
    {"setScale", SVGTransformV8Internal::setScaleCallback},
    {"setRotate", SVGTransformV8Internal::setRotateCallback},
    {"setSkewX", SVGTransformV8Internal::setSkewXCallback},
    {"setSkewY", SVGTransformV8Internal::setSkewYCallback},
};

static const V8DOMConfiguration::BatchedConstant V8SVGTransformConsts[] = {
    {"SVG_TRANSFORM_UNKNOWN", static_cast<signed int>(0)},
    {"SVG_TRANSFORM_MATRIX", static_cast<signed int>(1)},
    {"SVG_TRANSFORM_TRANSLATE", static_cast<signed int>(2)},
    {"SVG_TRANSFORM_SCALE", static_cast<signed int>(3)},
    {"SVG_TRANSFORM_ROTATE", static_cast<signed int>(4)},
    {"SVG_TRANSFORM_SKEWX", static_cast<signed int>(5)},
    {"SVG_TRANSFORM_SKEWY", static_cast<signed int>(6)},
};


COMPILE_ASSERT(0 == SVGTransform::SVG_TRANSFORM_UNKNOWN, SVGTransformEnumSVG_TRANSFORM_UNKNOWNIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == SVGTransform::SVG_TRANSFORM_MATRIX, SVGTransformEnumSVG_TRANSFORM_MATRIXIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == SVGTransform::SVG_TRANSFORM_TRANSLATE, SVGTransformEnumSVG_TRANSFORM_TRANSLATEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == SVGTransform::SVG_TRANSFORM_SCALE, SVGTransformEnumSVG_TRANSFORM_SCALEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(4 == SVGTransform::SVG_TRANSFORM_ROTATE, SVGTransformEnumSVG_TRANSFORM_ROTATEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(5 == SVGTransform::SVG_TRANSFORM_SKEWX, SVGTransformEnumSVG_TRANSFORM_SKEWXIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(6 == SVGTransform::SVG_TRANSFORM_SKEWY, SVGTransformEnumSVG_TRANSFORM_SKEWYIsWrongUseDoNotCheckConstants);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGTransformTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "SVGTransform", v8::Persistent<v8::FunctionTemplate>(), V8SVGTransform::internalFieldCount,
        V8SVGTransformAttrs, WTF_ARRAY_LENGTH(V8SVGTransformAttrs),
        V8SVGTransformCallbacks, WTF_ARRAY_LENGTH(V8SVGTransformCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8SVGTransformConsts, WTF_ARRAY_LENGTH(V8SVGTransformConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGTransform::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8SVGTransform::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8SVGTransformTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8SVGTransform::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGTransform::createWrapper(PassRefPtr<SVGPropertyTearOff<SVGTransform> > impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8SVGTransform::derefObject(void* object)
{
    static_cast<SVGPropertyTearOff<SVGTransform>*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
