/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8WorkerContext.h"

#if ENABLE(WORKERS)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8ArrayBuffer.h"
#include "V8Binding.h"
#include "V8Blob.h"
#include "V8DOMFileSystemSync.h"
#include "V8DOMWrapper.h"
#include "V8DataView.h"
#include "V8Database.h"
#include "V8DatabaseCallback.h"
#include "V8DatabaseSync.h"
#include "V8EntryCallback.h"
#include "V8EntrySync.h"
#include "V8ErrorCallback.h"
#include "V8Event.h"
#include "V8EventListenerList.h"
#include "V8EventSource.h"
#include "V8FileReader.h"
#include "V8FileReaderSync.h"
#include "V8FileSystemCallback.h"
#include "V8Float32Array.h"
#include "V8Float64Array.h"
#include "V8IDBFactory.h"
#include "V8Int16Array.h"
#include "V8Int32Array.h"
#include "V8Int8Array.h"
#include "V8MessageChannel.h"
#include "V8MessageEvent.h"
#include "V8NotificationCenter.h"
#include "V8Uint16Array.h"
#include "V8Uint32Array.h"
#include "V8Uint8Array.h"
#include "V8WorkerContextErrorHandler.h"
#include "V8WorkerLocation.h"
#include "V8WorkerNavigator.h"
#include "V8XMLHttpRequest.h"
#include "WorkerContextFileSystem.h"
#include "WorkerContextIndexedDatabase.h"
#include "WorkerContextNotifications.h"
#include "WorkerContextWebDatabase.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

#if ENABLE(BLOB)
#include "V8DOMURL.h"
#endif

#if ENABLE(FILE_SYSTEM)
#include "V8FileError.h"
#include "V8FileException.h"
#endif

#if ENABLE(INDEXED_DATABASE)
#include "V8IDBCursor.h"
#include "V8IDBCursorWithValue.h"
#include "V8IDBDatabase.h"
#include "V8IDBIndex.h"
#include "V8IDBKeyRange.h"
#include "V8IDBObjectStore.h"
#include "V8IDBOpenDBRequest.h"
#include "V8IDBRequest.h"
#include "V8IDBTransaction.h"
#include "V8IDBVersionChangeEvent.h"
#endif

#if ENABLE(WEB_SOCKETS)
#include "V8WebSocket.h"
#endif

namespace WebCore {

WrapperTypeInfo V8WorkerContext::info = { V8WorkerContext::GetTemplate, V8WorkerContext::derefObject, 0, 0, V8WorkerContext::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace WorkerContextV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> selfAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WorkerContext* imp = V8WorkerContext::toNative(info.Holder());
    return toV8Fast(imp->self(), info, imp);
}

static v8::Handle<v8::Value> locationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WorkerContext* imp = V8WorkerContext::toNative(info.Holder());
    RefPtr<WorkerLocation> result = imp->location();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "location", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WorkerContext* imp = V8WorkerContext::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    WorkerContext* imp = V8WorkerContext::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8WorkerContext::eventListenerCacheIndex);
    imp->setOnerror(V8EventListenerList::findOrCreateWrapper<V8WorkerContextErrorHandler>(value, true));
    return;
}

static v8::Handle<v8::Value> navigatorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WorkerContext* imp = V8WorkerContext::toNative(info.Holder());
    RefPtr<WorkerNavigator> result = imp->navigator();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "navigator", wrapper);
    }
    return wrapper;
}

#if ENABLE(INDEXED_DATABASE)

static v8::Handle<v8::Value> webkitIndexedDBAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WorkerContext* imp = V8WorkerContext::toNative(info.Holder());
    RefPtr<IDBFactory> result = WorkerContextIndexedDatabase::indexedDB(imp);
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "webkitIndexedDB", wrapper);
    }
    return wrapper;
}

#endif // ENABLE(INDEXED_DATABASE)

#if ENABLE(INDEXED_DATABASE)

static v8::Handle<v8::Value> indexedDBAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WorkerContext* imp = V8WorkerContext::toNative(info.Holder());
    RefPtr<IDBFactory> result = WorkerContextIndexedDatabase::indexedDB(imp);
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "indexedDB", wrapper);
    }
    return wrapper;
}

#endif // ENABLE(INDEXED_DATABASE)

#if ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)

static v8::Handle<v8::Value> webkitNotificationsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WorkerContext* imp = V8WorkerContext::toNative(info.Holder());
    RefPtr<NotificationCenter> result = WorkerContextNotifications::webkitNotifications(imp);
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "webkitNotifications", wrapper);
    }
    return wrapper;
}

#endif // ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)

static v8::Handle<v8::Value> WorkerContextConstructorGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    v8::Handle<v8::Value> data = info.Data();
    ASSERT(data->IsExternal());
    V8PerContextData* perContextData = V8PerContextData::from(info.Holder()->CreationContext());
    if (!perContextData)
        return v8Undefined();
    return perContextData->constructorForType(WrapperTypeInfo::unwrap(data));
}
static void WorkerContextReplaceableAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    info.This()->ForceSet(name, value);
}

static v8::Handle<v8::Value> closeCallback(const v8::Arguments& args)
{
    WorkerContext* imp = V8WorkerContext::toNative(args.Holder());
    imp->close();
    return v8Undefined();
}

static v8::Handle<v8::Value> clearTimeoutCallback(const v8::Arguments& args)
{
    WorkerContext* imp = V8WorkerContext::toNative(args.Holder());
    V8TRYCATCH(int, handle, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->clearTimeout(handle);
    return v8Undefined();
}

static v8::Handle<v8::Value> clearIntervalCallback(const v8::Arguments& args)
{
    WorkerContext* imp = V8WorkerContext::toNative(args.Holder());
    V8TRYCATCH(int, handle, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->clearInterval(handle);
    return v8Undefined();
}

static v8::Handle<v8::Value> addEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOrCreate);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8WorkerContext::toNative(args.Holder())->addEventListener(stringResource, listener, args[2]->BooleanValue());
        createHiddenDependency(args.Holder(), args[1], V8WorkerContext::eventListenerCacheIndex);
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> removeEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOnly);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8WorkerContext::toNative(args.Holder())->removeEventListener(stringResource, listener.get(), args[2]->BooleanValue());
        removeHiddenDependency(args.Holder(), args[1], V8WorkerContext::eventListenerCacheIndex);
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WorkerContext* imp = V8WorkerContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Event*, evt, V8Event::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    bool result = imp->dispatchEvent(evt, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

#if ENABLE(FILE_SYSTEM)

static v8::Handle<v8::Value> webkitRequestFileSystemCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WorkerContext* imp = V8WorkerContext::toNative(args.Holder());
    V8TRYCATCH(int, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(long long, size, toInt64(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    RefPtr<FileSystemCallback> successCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        successCallback = V8FileSystemCallback::create(args[2], getScriptExecutionContext());
    }
    RefPtr<ErrorCallback> errorCallback;
    if (args.Length() > 3 && !args[3]->IsNull() && !args[3]->IsUndefined()) {
        if (!args[3]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        errorCallback = V8ErrorCallback::create(args[3], getScriptExecutionContext());
    }
    WorkerContextFileSystem::webkitRequestFileSystem(imp, type, size, successCallback, errorCallback);
    return v8Undefined();
}

#endif // ENABLE(FILE_SYSTEM)

#if ENABLE(FILE_SYSTEM)

static v8::Handle<v8::Value> webkitRequestFileSystemSyncCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WorkerContext* imp = V8WorkerContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(long long, size, toInt64(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    RefPtr<DOMFileSystemSync> result = WorkerContextFileSystem::webkitRequestFileSystemSync(imp, type, size, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

#endif // ENABLE(FILE_SYSTEM)

#if ENABLE(FILE_SYSTEM)

static v8::Handle<v8::Value> webkitResolveLocalFileSystemURLCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WorkerContext* imp = V8WorkerContext::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    if (args.Length() <= 1 || !args[1]->IsFunction())
        return throwTypeError(0, args.GetIsolate());
    RefPtr<EntryCallback> successCallback = V8EntryCallback::create(args[1], getScriptExecutionContext());
    RefPtr<ErrorCallback> errorCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        errorCallback = V8ErrorCallback::create(args[2], getScriptExecutionContext());
    }
    WorkerContextFileSystem::webkitResolveLocalFileSystemURL(imp, url, successCallback, errorCallback);
    return v8Undefined();
}

#endif // ENABLE(FILE_SYSTEM)

#if ENABLE(FILE_SYSTEM)

static v8::Handle<v8::Value> webkitResolveLocalFileSystemSyncURLCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WorkerContext* imp = V8WorkerContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    RefPtr<EntrySync> result = WorkerContextFileSystem::webkitResolveLocalFileSystemSyncURL(imp, url, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

#endif // ENABLE(FILE_SYSTEM)

#if ENABLE(SQL_DATABASE)

static v8::Handle<v8::Value> openDatabaseCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WorkerContext* imp = V8WorkerContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, version, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, displayName, MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined));
    V8TRYCATCH(unsigned, estimatedSize, toUInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    RefPtr<DatabaseCallback> creationCallback;
    if (args.Length() > 4 && !args[4]->IsNull() && !args[4]->IsUndefined()) {
        if (!args[4]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        creationCallback = V8DatabaseCallback::create(args[4], getScriptExecutionContext());
    }
    RefPtr<Database> result = WorkerContextWebDatabase::openDatabase(imp, name, version, displayName, estimatedSize, creationCallback, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

#endif // ENABLE(SQL_DATABASE)

#if ENABLE(SQL_DATABASE)

static v8::Handle<v8::Value> openDatabaseSyncCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WorkerContext* imp = V8WorkerContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, version, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, displayName, MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined));
    V8TRYCATCH(unsigned, estimatedSize, toUInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    RefPtr<DatabaseCallback> creationCallback;
    if (args.Length() > 4 && !args[4]->IsNull() && !args[4]->IsUndefined()) {
        if (!args[4]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        creationCallback = V8DatabaseCallback::create(args[4], getScriptExecutionContext());
    }
    RefPtr<DatabaseSync> result = WorkerContextWebDatabase::openDatabaseSync(imp, name, version, displayName, estimatedSize, creationCallback, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

#endif // ENABLE(SQL_DATABASE)

} // namespace WorkerContextV8Internal

static const V8DOMConfiguration::BatchedAttribute V8WorkerContextAttrs[] = {
    // Attribute 'self' (Type: 'readonly attribute' ExtAttr: 'Replaceable')
    {"self", WorkerContextV8Internal::selfAttrGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'location' (Type: 'readonly attribute' ExtAttr: 'Replaceable')
    {"location", WorkerContextV8Internal::locationAttrGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: '')
    {"onerror", WorkerContextV8Internal::onerrorAttrGetter, WorkerContextV8Internal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'navigator' (Type: 'readonly attribute' ExtAttr: 'Replaceable')
    {"navigator", WorkerContextV8Internal::navigatorAttrGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'MessageEvent' (Type: 'attribute' ExtAttr: '')
    {"MessageEvent", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8MessageEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'WorkerLocation' (Type: 'attribute' ExtAttr: '')
    {"WorkerLocation", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8WorkerLocation::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'MessageChannel' (Type: 'attribute' ExtAttr: 'JSCustomGetter')
    {"MessageChannel", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8MessageChannel::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'EventSource' (Type: 'attribute' ExtAttr: 'JSCustomGetter')
    {"EventSource", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8EventSource::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'XMLHttpRequest' (Type: 'attribute' ExtAttr: 'JSCustomGetter')
    {"XMLHttpRequest", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8XMLHttpRequest::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'Blob' (Type: 'attribute' ExtAttr: '')
    {"Blob", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8Blob::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'FileReader' (Type: 'attribute' ExtAttr: '')
    {"FileReader", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8FileReader::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'FileReaderSync' (Type: 'attribute' ExtAttr: '')
    {"FileReaderSync", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8FileReaderSync::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(BLOB)
    // Attribute 'URL' (Type: 'attribute' ExtAttr: 'Conditional')
    {"URL", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8DOMURL::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(BLOB)
#if ENABLE(BLOB)
    // Attribute 'webkitURL' (Type: 'attribute' ExtAttr: 'Conditional')
    {"webkitURL", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8DOMURL::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(BLOB)
    // Attribute 'ArrayBuffer' (Type: 'attribute' ExtAttr: '')
    {"ArrayBuffer", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8ArrayBuffer::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'Int8Array' (Type: 'attribute' ExtAttr: '')
    {"Int8Array", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8Int8Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'Uint8Array' (Type: 'attribute' ExtAttr: '')
    {"Uint8Array", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8Uint8Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'Uint8ClampedArray' (Type: 'attribute' ExtAttr: '')
    {"Uint8ClampedArray", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8Uint8Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'Int16Array' (Type: 'attribute' ExtAttr: '')
    {"Int16Array", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8Int16Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'Uint16Array' (Type: 'attribute' ExtAttr: '')
    {"Uint16Array", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8Uint16Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'Int32Array' (Type: 'attribute' ExtAttr: '')
    {"Int32Array", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8Int32Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'Uint32Array' (Type: 'attribute' ExtAttr: '')
    {"Uint32Array", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8Uint32Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'Float32Array' (Type: 'attribute' ExtAttr: '')
    {"Float32Array", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8Float32Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'Float64Array' (Type: 'attribute' ExtAttr: '')
    {"Float64Array", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8Float64Array::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'DataView' (Type: 'attribute' ExtAttr: '')
    {"DataView", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8DataView::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'webkitIDBCursor' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"webkitIDBCursor", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBCursor::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'webkitIDBDatabase' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"webkitIDBDatabase", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBDatabase::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'webkitIDBFactory' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"webkitIDBFactory", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBFactory::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'webkitIDBIndex' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"webkitIDBIndex", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBIndex::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'webkitIDBKeyRange' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"webkitIDBKeyRange", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBKeyRange::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'webkitIDBObjectStore' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"webkitIDBObjectStore", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBObjectStore::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'webkitIDBRequest' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"webkitIDBRequest", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBRequest::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'webkitIDBTransaction' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"webkitIDBTransaction", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBTransaction::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'IDBCursor' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"IDBCursor", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBCursor::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'IDBCursorWithValue' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"IDBCursorWithValue", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBCursorWithValue::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'IDBDatabase' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"IDBDatabase", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBDatabase::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'IDBFactory' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"IDBFactory", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBFactory::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'IDBIndex' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"IDBIndex", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBIndex::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'IDBKeyRange' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"IDBKeyRange", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBKeyRange::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'IDBObjectStore' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"IDBObjectStore", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBObjectStore::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'IDBOpenDBRequest' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"IDBOpenDBRequest", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBOpenDBRequest::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'IDBRequest' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"IDBRequest", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBRequest::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'IDBTransaction' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"IDBTransaction", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBTransaction::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
#if ENABLE(INDEXED_DATABASE)
    // Attribute 'IDBVersionChangeEvent' (Type: 'attribute' ExtAttr: 'Conditional ImplementedBy')
    {"IDBVersionChangeEvent", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8IDBVersionChangeEvent::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(INDEXED_DATABASE)
};

static const V8DOMConfiguration::BatchedCallback V8WorkerContextCallbacks[] = {
    {"close", WorkerContextV8Internal::closeCallback},
    {"importScripts", V8WorkerContext::importScriptsCallback},
    {"setTimeout", V8WorkerContext::setTimeoutCallback},
    {"clearTimeout", WorkerContextV8Internal::clearTimeoutCallback},
    {"setInterval", V8WorkerContext::setIntervalCallback},
    {"clearInterval", WorkerContextV8Internal::clearIntervalCallback},
    {"addEventListener", WorkerContextV8Internal::addEventListenerCallback},
    {"removeEventListener", WorkerContextV8Internal::removeEventListenerCallback},
};

static const V8DOMConfiguration::BatchedConstant V8WorkerContextConsts[] = {
#if ENABLE(FILE_SYSTEM)
    {"TEMPORARY", static_cast<signed int>(0)},
#endif
#if ENABLE(FILE_SYSTEM)
    {"PERSISTENT", static_cast<signed int>(1)},
#endif
};


#if ENABLE(FILE_SYSTEM)
COMPILE_ASSERT(0 == WorkerContextFileSystem::TEMPORARY, WorkerContextEnumTEMPORARYIsWrongUseDoNotCheckConstants);
#endif
#if ENABLE(FILE_SYSTEM)
COMPILE_ASSERT(1 == WorkerContextFileSystem::PERSISTENT, WorkerContextEnumPERSISTENTIsWrongUseDoNotCheckConstants);
#endif

static v8::Persistent<v8::FunctionTemplate> ConfigureV8WorkerContextTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "WorkerContext", v8::Persistent<v8::FunctionTemplate>(), V8WorkerContext::internalFieldCount,
        V8WorkerContextAttrs, WTF_ARRAY_LENGTH(V8WorkerContextAttrs),
        V8WorkerContextCallbacks, WTF_ARRAY_LENGTH(V8WorkerContextCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

#if ENABLE(FILE_SYSTEM)
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'FileError' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime Conditional ImplementedBy')
        {"FileError", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8FileError::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(FILE_SYSTEM)

#if ENABLE(FILE_SYSTEM)
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'FileException' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime Conditional ImplementedBy')
        {"FileException", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8FileException::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(FILE_SYSTEM)

#if ENABLE(INDEXED_DATABASE)
    if (RuntimeEnabledFeatures::webkitIndexedDBEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'webkitIndexedDB' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime ImplementedAs Conditional ImplementedBy')
        {"webkitIndexedDB", WorkerContextV8Internal::webkitIndexedDBAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(INDEXED_DATABASE)

#if ENABLE(INDEXED_DATABASE)
    if (RuntimeEnabledFeatures::indexedDBEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'indexedDB' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime Conditional ImplementedBy')
        {"indexedDB", WorkerContextV8Internal::indexedDBAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(INDEXED_DATABASE)

#if ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)
    if (RuntimeEnabledFeatures::webkitNotificationsEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'webkitNotifications' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime Conditional ImplementedBy')
        {"webkitNotifications", WorkerContextV8Internal::webkitNotificationsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)

#if ENABLE(WEB_SOCKETS)
    if (RuntimeEnabledFeatures::webSocketEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'WebSocket' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime JSCustomGetter Conditional ImplementedBy')
        {"WebSocket", WorkerContextV8Internal::WorkerContextConstructorGetter, WorkerContextV8Internal::WorkerContextReplaceableAttrSetter, &V8WebSocket::info, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(WEB_SOCKETS)

    // Custom Signature 'dispatchEvent'
    const int dispatchEventArgc = 1;
    v8::Handle<v8::FunctionTemplate> dispatchEventArgv[dispatchEventArgc] = { V8Event::GetRawTemplate() };
    v8::Handle<v8::Signature> dispatchEventSignature = v8::Signature::New(desc, dispatchEventArgc, dispatchEventArgv);
    proto->Set(v8::String::NewSymbol("dispatchEvent"), v8::FunctionTemplate::New(WorkerContextV8Internal::dispatchEventCallback, v8Undefined(), dispatchEventSignature));
#if ENABLE(FILE_SYSTEM)
    if (RuntimeEnabledFeatures::fileSystemEnabled())
        proto->Set(v8::String::NewSymbol("webkitRequestFileSystem"), v8::FunctionTemplate::New(WorkerContextV8Internal::webkitRequestFileSystemCallback, v8Undefined(), defaultSignature));
#endif // ENABLE(FILE_SYSTEM)
#if ENABLE(FILE_SYSTEM)
    if (RuntimeEnabledFeatures::fileSystemEnabled())
        proto->Set(v8::String::NewSymbol("webkitRequestFileSystemSync"), v8::FunctionTemplate::New(WorkerContextV8Internal::webkitRequestFileSystemSyncCallback, v8Undefined(), defaultSignature));
#endif // ENABLE(FILE_SYSTEM)
#if ENABLE(FILE_SYSTEM)
    if (RuntimeEnabledFeatures::fileSystemEnabled())
        proto->Set(v8::String::NewSymbol("webkitResolveLocalFileSystemURL"), v8::FunctionTemplate::New(WorkerContextV8Internal::webkitResolveLocalFileSystemURLCallback, v8Undefined(), defaultSignature));
#endif // ENABLE(FILE_SYSTEM)
#if ENABLE(FILE_SYSTEM)
    if (RuntimeEnabledFeatures::fileSystemEnabled())
        proto->Set(v8::String::NewSymbol("webkitResolveLocalFileSystemSyncURL"), v8::FunctionTemplate::New(WorkerContextV8Internal::webkitResolveLocalFileSystemSyncURLCallback, v8Undefined(), defaultSignature));
#endif // ENABLE(FILE_SYSTEM)
#if ENABLE(SQL_DATABASE)
    if (RuntimeEnabledFeatures::openDatabaseEnabled())
        proto->Set(v8::String::NewSymbol("openDatabase"), v8::FunctionTemplate::New(WorkerContextV8Internal::openDatabaseCallback, v8Undefined(), defaultSignature));
#endif // ENABLE(SQL_DATABASE)
#if ENABLE(SQL_DATABASE)
    if (RuntimeEnabledFeatures::openDatabaseSyncEnabled())
        proto->Set(v8::String::NewSymbol("openDatabaseSync"), v8::FunctionTemplate::New(WorkerContextV8Internal::openDatabaseSyncCallback, v8Undefined(), defaultSignature));
#endif // ENABLE(SQL_DATABASE)
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8WorkerContextConsts, WTF_ARRAY_LENGTH(V8WorkerContextConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8WorkerContext::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8WorkerContext::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8WorkerContextTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8WorkerContext::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


void V8WorkerContext::derefObject(void* object)
{
    static_cast<WorkerContext*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(WORKERS)
