/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8AudioContext.h"

#if ENABLE(WEB_AUDIO)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "FeatureObserver.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8AnalyserNode.h"
#include "V8ArrayBuffer.h"
#include "V8AudioBuffer.h"
#include "V8AudioBufferCallback.h"
#include "V8AudioBufferSourceNode.h"
#include "V8AudioDestinationNode.h"
#include "V8AudioListener.h"
#include "V8Binding.h"
#include "V8BiquadFilterNode.h"
#include "V8ChannelMergerNode.h"
#include "V8ChannelSplitterNode.h"
#include "V8ConvolverNode.h"
#include "V8DOMWrapper.h"
#include "V8DelayNode.h"
#include "V8DynamicsCompressorNode.h"
#include "V8Float32Array.h"
#include "V8GainNode.h"
#include "V8HTMLMediaElement.h"
#include "V8MediaElementAudioSourceNode.h"
#include "V8MediaStream.h"
#include "V8MediaStreamAudioDestinationNode.h"
#include "V8MediaStreamAudioSourceNode.h"
#include "V8OscillatorNode.h"
#include "V8PannerNode.h"
#include "V8ScriptProcessorNode.h"
#include "V8WaveShaperNode.h"
#include "V8WaveTable.h"
#include <wtf/ArrayBuffer.h>
#include <wtf/Float32Array.h>
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8AudioContext::info = { V8AudioContext::GetTemplate, V8AudioContext::derefObject, V8AudioContext::toActiveDOMObject, 0, V8AudioContext::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace AudioContextV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> destinationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioContext* imp = V8AudioContext::toNative(info.Holder());
    RefPtr<AudioDestinationNode> result = imp->destination();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "destination", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> currentTimeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioContext* imp = V8AudioContext::toNative(info.Holder());
    return v8::Number::New(imp->currentTime());
}

static v8::Handle<v8::Value> sampleRateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioContext* imp = V8AudioContext::toNative(info.Holder());
    return v8::Number::New(imp->sampleRate());
}

static v8::Handle<v8::Value> listenerAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioContext* imp = V8AudioContext::toNative(info.Holder());
    RefPtr<AudioListener> result = imp->listener();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "listener", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> activeSourceCountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioContext* imp = V8AudioContext::toNative(info.Holder());
    return v8UnsignedInteger(imp->activeSourceCount(), info.GetIsolate());
}

static v8::Handle<v8::Value> oncompleteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioContext* imp = V8AudioContext::toNative(info.Holder());
    return imp->oncomplete() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncomplete())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oncompleteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    AudioContext* imp = V8AudioContext::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oncomplete(), value, V8AudioContext::eventListenerCacheIndex);
    imp->setOncomplete(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> createBuffer1Callback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, numberOfChannels, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, numberOfFrames, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(float, sampleRate, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    RefPtr<AudioBuffer> result = imp->createBuffer(numberOfChannels, numberOfFrames, sampleRate, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createBuffer2Callback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(ArrayBuffer*, buffer, V8ArrayBuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8ArrayBuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(bool, mixToMono, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->BooleanValue());
    RefPtr<AudioBuffer> result = imp->createBuffer(buffer, mixToMono, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createBufferCallback(const v8::Arguments& args)
{
    if (args.Length() == 3)
        return createBuffer1Callback(args);
    if ((args.Length() == 2 && (args[0]->IsNull() || V8ArrayBuffer::HasInstance(args[0]))))
        return createBuffer2Callback(args);
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> decodeAudioDataCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(ArrayBuffer*, audioData, V8ArrayBuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8ArrayBuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    if (args.Length() <= 1 || !args[1]->IsFunction())
        return throwTypeError(0, args.GetIsolate());
    RefPtr<AudioBufferCallback> successCallback = V8AudioBufferCallback::create(args[1], getScriptExecutionContext());
    RefPtr<AudioBufferCallback> errorCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        errorCallback = V8AudioBufferCallback::create(args[2], getScriptExecutionContext());
    }
    imp->decodeAudioData(audioData, successCallback, errorCallback, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createBufferSourceCallback(const v8::Arguments& args)
{
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    return toV8(imp->createBufferSource(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createMediaElementSourceCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(HTMLMediaElement*, mediaElement, V8HTMLMediaElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8HTMLMediaElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    RefPtr<MediaElementAudioSourceNode> result = imp->createMediaElementSource(mediaElement, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createMediaStreamSourceCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(MediaStream*, mediaStream, V8MediaStream::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8MediaStream::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    RefPtr<MediaStreamAudioSourceNode> result = imp->createMediaStreamSource(mediaStream, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createMediaStreamDestinationCallback(const v8::Arguments& args)
{
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    return toV8(imp->createMediaStreamDestination(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createGainCallback(const v8::Arguments& args)
{
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    return toV8(imp->createGain(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createDelayCallback(const v8::Arguments& args)
{
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        RefPtr<DelayNode> result = imp->createDelay(ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    V8TRYCATCH(double, maxDelayTime, static_cast<double>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    RefPtr<DelayNode> result = imp->createDelay(maxDelayTime, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createBiquadFilterCallback(const v8::Arguments& args)
{
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    return toV8(imp->createBiquadFilter(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createWaveShaperCallback(const v8::Arguments& args)
{
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    return toV8(imp->createWaveShaper(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createPannerCallback(const v8::Arguments& args)
{
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    return toV8(imp->createPanner(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createConvolverCallback(const v8::Arguments& args)
{
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    return toV8(imp->createConvolver(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createDynamicsCompressorCallback(const v8::Arguments& args)
{
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    return toV8(imp->createDynamicsCompressor(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createAnalyserCallback(const v8::Arguments& args)
{
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    return toV8(imp->createAnalyser(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createScriptProcessorCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, bufferSize, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (args.Length() <= 1) {
        RefPtr<ScriptProcessorNode> result = imp->createScriptProcessor(bufferSize, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    V8TRYCATCH(unsigned, numberOfInputChannels, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    if (args.Length() <= 2) {
        RefPtr<ScriptProcessorNode> result = imp->createScriptProcessor(bufferSize, numberOfInputChannels, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    V8TRYCATCH(unsigned, numberOfOutputChannels, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    RefPtr<ScriptProcessorNode> result = imp->createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createOscillatorCallback(const v8::Arguments& args)
{
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    return toV8(imp->createOscillator(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createWaveTableCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Float32Array*, real, V8Float32Array::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Float32Array::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(Float32Array*, imag, V8Float32Array::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8Float32Array::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    RefPtr<WaveTable> result = imp->createWaveTable(real, imag, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createChannelSplitterCallback(const v8::Arguments& args)
{
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        RefPtr<ChannelSplitterNode> result = imp->createChannelSplitter(ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    V8TRYCATCH(unsigned, numberOfOutputs, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    RefPtr<ChannelSplitterNode> result = imp->createChannelSplitter(numberOfOutputs, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createChannelMergerCallback(const v8::Arguments& args)
{
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        RefPtr<ChannelMergerNode> result = imp->createChannelMerger(ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    V8TRYCATCH(unsigned, numberOfInputs, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    RefPtr<ChannelMergerNode> result = imp->createChannelMerger(numberOfInputs, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> startRenderingCallback(const v8::Arguments& args)
{
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    imp->startRendering();
    return v8Undefined();
}

static v8::Handle<v8::Value> createGainNodeCallback(const v8::Arguments& args)
{
    FeatureObserver::observe(activeDOMWindow(BindingState::instance()), FeatureObserver::LegacyWebAudio);
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    return toV8(imp->createGain(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createDelayNodeCallback(const v8::Arguments& args)
{
    FeatureObserver::observe(activeDOMWindow(BindingState::instance()), FeatureObserver::LegacyWebAudio);
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        RefPtr<DelayNode> result = imp->createDelay(ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    V8TRYCATCH(double, maxDelayTime, static_cast<double>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    RefPtr<DelayNode> result = imp->createDelay(maxDelayTime, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createJavaScriptNodeCallback(const v8::Arguments& args)
{
    FeatureObserver::observe(activeDOMWindow(BindingState::instance()), FeatureObserver::LegacyWebAudio);
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioContext* imp = V8AudioContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, bufferSize, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (args.Length() <= 1) {
        RefPtr<ScriptProcessorNode> result = imp->createScriptProcessor(bufferSize, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    V8TRYCATCH(unsigned, numberOfInputChannels, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    if (args.Length() <= 2) {
        RefPtr<ScriptProcessorNode> result = imp->createScriptProcessor(bufferSize, numberOfInputChannels, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    V8TRYCATCH(unsigned, numberOfOutputChannels, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    RefPtr<ScriptProcessorNode> result = imp->createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace AudioContextV8Internal

static const V8DOMConfiguration::BatchedAttribute V8AudioContextAttrs[] = {
    // Attribute 'destination' (Type: 'readonly attribute' ExtAttr: '')
    {"destination", AudioContextV8Internal::destinationAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'currentTime' (Type: 'readonly attribute' ExtAttr: '')
    {"currentTime", AudioContextV8Internal::currentTimeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'sampleRate' (Type: 'readonly attribute' ExtAttr: '')
    {"sampleRate", AudioContextV8Internal::sampleRateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'listener' (Type: 'readonly attribute' ExtAttr: '')
    {"listener", AudioContextV8Internal::listenerAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'activeSourceCount' (Type: 'readonly attribute' ExtAttr: '')
    {"activeSourceCount", AudioContextV8Internal::activeSourceCountAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'oncomplete' (Type: 'attribute' ExtAttr: '')
    {"oncomplete", AudioContextV8Internal::oncompleteAttrGetter, AudioContextV8Internal::oncompleteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8AudioContextCallbacks[] = {
    {"createBuffer", AudioContextV8Internal::createBufferCallback},
    {"decodeAudioData", AudioContextV8Internal::decodeAudioDataCallback},
    {"createBufferSource", AudioContextV8Internal::createBufferSourceCallback},
    {"createMediaStreamDestination", AudioContextV8Internal::createMediaStreamDestinationCallback},
    {"createGain", AudioContextV8Internal::createGainCallback},
    {"createDelay", AudioContextV8Internal::createDelayCallback},
    {"createBiquadFilter", AudioContextV8Internal::createBiquadFilterCallback},
    {"createWaveShaper", AudioContextV8Internal::createWaveShaperCallback},
    {"createPanner", AudioContextV8Internal::createPannerCallback},
    {"createConvolver", AudioContextV8Internal::createConvolverCallback},
    {"createDynamicsCompressor", AudioContextV8Internal::createDynamicsCompressorCallback},
    {"createAnalyser", AudioContextV8Internal::createAnalyserCallback},
    {"createScriptProcessor", AudioContextV8Internal::createScriptProcessorCallback},
    {"createOscillator", AudioContextV8Internal::createOscillatorCallback},
    {"createChannelSplitter", AudioContextV8Internal::createChannelSplitterCallback},
    {"createChannelMerger", AudioContextV8Internal::createChannelMergerCallback},
    {"startRendering", AudioContextV8Internal::startRenderingCallback},
    {"createGainNode", AudioContextV8Internal::createGainNodeCallback},
    {"createDelayNode", AudioContextV8Internal::createDelayNodeCallback},
    {"createJavaScriptNode", AudioContextV8Internal::createJavaScriptNodeCallback},
};

v8::Handle<v8::Value> V8AudioContext::constructorCallback(const v8::Arguments& args)
{
    
    if (!args.IsConstructCall())
        return throwTypeError("DOM object constructor cannot be called as a function.");

    if (ConstructorMode::current() == ConstructorMode::WrapExistingObject)
        return args.Holder();

    return V8AudioContext::constructorCallbackCustom(args);
}

static v8::Persistent<v8::FunctionTemplate> ConfigureV8AudioContextTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "AudioContext", v8::Persistent<v8::FunctionTemplate>(), V8AudioContext::internalFieldCount,
        V8AudioContextAttrs, WTF_ARRAY_LENGTH(V8AudioContextAttrs),
        V8AudioContextCallbacks, WTF_ARRAY_LENGTH(V8AudioContextCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    desc->SetCallHandler(V8AudioContext::constructorCallback);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'createMediaElementSource'
    const int createMediaElementSourceArgc = 1;
    v8::Handle<v8::FunctionTemplate> createMediaElementSourceArgv[createMediaElementSourceArgc] = { V8HTMLMediaElement::GetRawTemplate() };
    v8::Handle<v8::Signature> createMediaElementSourceSignature = v8::Signature::New(desc, createMediaElementSourceArgc, createMediaElementSourceArgv);
    proto->Set(v8::String::NewSymbol("createMediaElementSource"), v8::FunctionTemplate::New(AudioContextV8Internal::createMediaElementSourceCallback, v8Undefined(), createMediaElementSourceSignature));

    // Custom Signature 'createMediaStreamSource'
    const int createMediaStreamSourceArgc = 1;
    v8::Handle<v8::FunctionTemplate> createMediaStreamSourceArgv[createMediaStreamSourceArgc] = { V8MediaStream::GetRawTemplate() };
    v8::Handle<v8::Signature> createMediaStreamSourceSignature = v8::Signature::New(desc, createMediaStreamSourceArgc, createMediaStreamSourceArgv);
    proto->Set(v8::String::NewSymbol("createMediaStreamSource"), v8::FunctionTemplate::New(AudioContextV8Internal::createMediaStreamSourceCallback, v8Undefined(), createMediaStreamSourceSignature));

    // Custom Signature 'createWaveTable'
    const int createWaveTableArgc = 2;
    v8::Handle<v8::FunctionTemplate> createWaveTableArgv[createWaveTableArgc] = { V8Float32Array::GetRawTemplate(), V8Float32Array::GetRawTemplate() };
    v8::Handle<v8::Signature> createWaveTableSignature = v8::Signature::New(desc, createWaveTableArgc, createWaveTableArgv);
    proto->Set(v8::String::NewSymbol("createWaveTable"), v8::FunctionTemplate::New(AudioContextV8Internal::createWaveTableCallback, v8Undefined(), createWaveTableSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8AudioContext::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8AudioContext::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8AudioContextTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8AudioContext::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}

ActiveDOMObject* V8AudioContext::toActiveDOMObject(v8::Handle<v8::Object> object)
{
    return toNative(object);
}      

v8::Handle<v8::Object> V8AudioContext::createWrapper(PassRefPtr<AudioContext> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8AudioContext::derefObject(void* object)
{
    static_cast<AudioContext*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(WEB_AUDIO)
