/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLMediaElement.h"

#if ENABLE(VIDEO)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8HTMLElement.h"
#include "V8MediaController.h"
#include "V8MediaError.h"
#include "V8TextTrack.h"
#include "V8TextTrackList.h"
#include "V8TimeRanges.h"
#include "V8Uint8Array.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/Uint8Array.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8HTMLMediaElement::info = { V8HTMLMediaElement::GetTemplate, V8HTMLMediaElement::derefObject, 0, 0, V8HTMLMediaElement::installPerContextPrototypeProperties, &V8HTMLElement::info, WrapperTypeObjectPrototype };

namespace HTMLMediaElementV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> errorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return toV8Fast(imp->error(), info, imp);
}

static v8::Handle<v8::Value> srcAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(WebCore::HTMLNames::srcAttr), info.GetIsolate());
}

static void srcAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::srcAttr, stringResource);
}

static v8::Handle<v8::Value> currentSrcAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8String(imp->currentSrc(), info.GetIsolate());
}

static v8::Handle<v8::Value> networkStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Integer(imp->networkState(), info.GetIsolate());
}

static v8::Handle<v8::Value> preloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8String(imp->preload(), info.GetIsolate());
}

static void preloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setPreload(v);
    return;
}

static v8::Handle<v8::Value> bufferedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return toV8Fast(imp->buffered(), info, imp);
}

static v8::Handle<v8::Value> readyStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Integer(imp->readyState(), info.GetIsolate());
}

static v8::Handle<v8::Value> seekingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->seeking(), info.GetIsolate());
}

static v8::Handle<v8::Value> currentTimeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Number::New(imp->currentTime());
}

static void currentTimeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    ExceptionCode ec = 0;
    imp->setCurrentTime(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> initialTimeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Number::New(imp->initialTime());
}

static v8::Handle<v8::Value> startTimeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Number::New(imp->startTime());
}

static v8::Handle<v8::Value> durationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Number::New(imp->duration());
}

static v8::Handle<v8::Value> pausedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->paused(), info.GetIsolate());
}

static v8::Handle<v8::Value> defaultPlaybackRateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Number::New(imp->defaultPlaybackRate());
}

static void defaultPlaybackRateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setDefaultPlaybackRate(v);
    return;
}

static v8::Handle<v8::Value> playbackRateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Number::New(imp->playbackRate());
}

static void playbackRateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setPlaybackRate(v);
    return;
}

static v8::Handle<v8::Value> playedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return toV8Fast(imp->played(), info, imp);
}

static v8::Handle<v8::Value> seekableAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return toV8Fast(imp->seekable(), info, imp);
}

static v8::Handle<v8::Value> endedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->ended(), info.GetIsolate());
}

static v8::Handle<v8::Value> autoplayAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::autoplayAttr), info.GetIsolate());
}

static void autoplayAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::autoplayAttr, v);
    return;
}

static v8::Handle<v8::Value> loopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::loopAttr), info.GetIsolate());
}

static void loopAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::loopAttr, v);
    return;
}

static v8::Handle<v8::Value> controlsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->controls(), info.GetIsolate());
}

static void controlsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setControls(v);
    return;
}

static v8::Handle<v8::Value> volumeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8::Number::New(imp->volume());
}

static void volumeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    ExceptionCode ec = 0;
    imp->setVolume(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> mutedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->muted(), info.GetIsolate());
}

static void mutedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setMuted(v);
    return;
}

static v8::Handle<v8::Value> defaultMutedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::mutedAttr), info.GetIsolate());
}

static void defaultMutedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::mutedAttr, v);
    return;
}

static v8::Handle<v8::Value> webkitPreservesPitchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->webkitPreservesPitch(), info.GetIsolate());
}

static void webkitPreservesPitchAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setWebkitPreservesPitch(v);
    return;
}

static v8::Handle<v8::Value> webkitHasClosedCaptionsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->webkitHasClosedCaptions(), info.GetIsolate());
}

static v8::Handle<v8::Value> webkitClosedCaptionsVisibleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8Boolean(imp->webkitClosedCaptionsVisible(), info.GetIsolate());
}

static void webkitClosedCaptionsVisibleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setWebkitClosedCaptionsVisible(v);
    return;
}

#if ENABLE(MEDIA_STATISTICS)

static v8::Handle<v8::Value> webkitAudioDecodedByteCountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8UnsignedInteger(imp->webkitAudioDecodedByteCount(), info.GetIsolate());
}

#endif // ENABLE(MEDIA_STATISTICS)

#if ENABLE(MEDIA_STATISTICS)

static v8::Handle<v8::Value> webkitVideoDecodedByteCountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return v8UnsignedInteger(imp->webkitVideoDecodedByteCount(), info.GetIsolate());
}

#endif // ENABLE(MEDIA_STATISTICS)

static v8::Handle<v8::Value> onwebkitkeyaddedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return imp->onwebkitkeyadded() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitkeyadded())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onwebkitkeyaddedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    imp->setOnwebkitkeyadded(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onwebkitkeyerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return imp->onwebkitkeyerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitkeyerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onwebkitkeyerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    imp->setOnwebkitkeyerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onwebkitkeymessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return imp->onwebkitkeymessage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitkeymessage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onwebkitkeymessageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    imp->setOnwebkitkeymessage(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onwebkitneedkeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return imp->onwebkitneedkey() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitneedkey())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onwebkitneedkeyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    imp->setOnwebkitneedkey(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> textTracksAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return toV8Fast(imp->textTracks(), info, imp);
}

static v8::Handle<v8::Value> mediaGroupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::mediagroupAttr), info.GetIsolate());
}

static void mediaGroupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::mediagroupAttr, stringResource);
}

static v8::Handle<v8::Value> controllerAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(info.Holder());
    return toV8Fast(imp->controller(), info, imp);
}

static v8::Handle<v8::Value> loadCallback(const v8::Arguments& args)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(args.Holder());
    imp->load();
    return v8Undefined();
}

static v8::Handle<v8::Value> canPlayTypeCallback(const v8::Arguments& args)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, type, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithUndefinedOrNullCheck>, keySystem, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    return v8String(imp->canPlayType(type, keySystem), args.GetIsolate());
}

static v8::Handle<v8::Value> playCallback(const v8::Arguments& args)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(args.Holder());
    imp->play();
    return v8Undefined();
}

static v8::Handle<v8::Value> pauseCallback(const v8::Arguments& args)
{
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(args.Holder());
    imp->pause();
    return v8Undefined();
}

static v8::Handle<v8::Value> webkitGenerateKeyRequestCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithUndefinedOrNullCheck>, keySystem, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    if (args.Length() <= 1) {
        imp->webkitGenerateKeyRequest(keySystem, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8Undefined();
    }
    V8TRYCATCH(Uint8Array*, initData, V8Uint8Array::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8Uint8Array::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    imp->webkitGenerateKeyRequest(keySystem, initData, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> webkitAddKeyCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithUndefinedOrNullCheck>, keySystem, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(Uint8Array*, key, V8Uint8Array::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8Uint8Array::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    if (args.Length() <= 2) {
        imp->webkitAddKey(keySystem, key, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8Undefined();
    }
    V8TRYCATCH(Uint8Array*, initData, V8Uint8Array::HasInstance(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)) ? V8Uint8Array::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined))) : 0);
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, sessionId, MAYBE_MISSING_PARAMETER(args, 3, DefaultIsNullString));
    imp->webkitAddKey(keySystem, key, initData, sessionId, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> webkitCancelKeyRequestCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithUndefinedOrNullCheck>, keySystem, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, sessionId, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsNullString));
    imp->webkitCancelKeyRequest(keySystem, sessionId, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> addTextTrackCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    HTMLMediaElement* imp = V8HTMLMediaElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, kind, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    if (args.Length() <= 1) {
        RefPtr<TextTrack> result = imp->addTextTrack(kind, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8Fast(result.release(), args, imp);
    }
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, label, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    if (args.Length() <= 2) {
        RefPtr<TextTrack> result = imp->addTextTrack(kind, label, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8Fast(result.release(), args, imp);
    }
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, language, MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined));
    RefPtr<TextTrack> result = imp->addTextTrack(kind, label, language, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace HTMLMediaElementV8Internal

static const V8DOMConfiguration::BatchedAttribute V8HTMLMediaElementAttrs[] = {
    // Attribute 'error' (Type: 'readonly attribute' ExtAttr: '')
    {"error", HTMLMediaElementV8Internal::errorAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'src' (Type: 'attribute' ExtAttr: 'URL Reflect')
    {"src", HTMLMediaElementV8Internal::srcAttrGetter, HTMLMediaElementV8Internal::srcAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'currentSrc' (Type: 'readonly attribute' ExtAttr: 'URL')
    {"currentSrc", HTMLMediaElementV8Internal::currentSrcAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'networkState' (Type: 'readonly attribute' ExtAttr: '')
    {"networkState", HTMLMediaElementV8Internal::networkStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'preload' (Type: 'attribute' ExtAttr: '')
    {"preload", HTMLMediaElementV8Internal::preloadAttrGetter, HTMLMediaElementV8Internal::preloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'buffered' (Type: 'readonly attribute' ExtAttr: '')
    {"buffered", HTMLMediaElementV8Internal::bufferedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'readyState' (Type: 'readonly attribute' ExtAttr: '')
    {"readyState", HTMLMediaElementV8Internal::readyStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'seeking' (Type: 'readonly attribute' ExtAttr: '')
    {"seeking", HTMLMediaElementV8Internal::seekingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'currentTime' (Type: 'attribute' ExtAttr: '')
    {"currentTime", HTMLMediaElementV8Internal::currentTimeAttrGetter, HTMLMediaElementV8Internal::currentTimeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'initialTime' (Type: 'readonly attribute' ExtAttr: '')
    {"initialTime", HTMLMediaElementV8Internal::initialTimeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'startTime' (Type: 'readonly attribute' ExtAttr: '')
    {"startTime", HTMLMediaElementV8Internal::startTimeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'duration' (Type: 'readonly attribute' ExtAttr: '')
    {"duration", HTMLMediaElementV8Internal::durationAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'paused' (Type: 'readonly attribute' ExtAttr: '')
    {"paused", HTMLMediaElementV8Internal::pausedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultPlaybackRate' (Type: 'attribute' ExtAttr: '')
    {"defaultPlaybackRate", HTMLMediaElementV8Internal::defaultPlaybackRateAttrGetter, HTMLMediaElementV8Internal::defaultPlaybackRateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'playbackRate' (Type: 'attribute' ExtAttr: '')
    {"playbackRate", HTMLMediaElementV8Internal::playbackRateAttrGetter, HTMLMediaElementV8Internal::playbackRateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'played' (Type: 'readonly attribute' ExtAttr: '')
    {"played", HTMLMediaElementV8Internal::playedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'seekable' (Type: 'readonly attribute' ExtAttr: '')
    {"seekable", HTMLMediaElementV8Internal::seekableAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'ended' (Type: 'readonly attribute' ExtAttr: '')
    {"ended", HTMLMediaElementV8Internal::endedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'autoplay' (Type: 'attribute' ExtAttr: 'Reflect')
    {"autoplay", HTMLMediaElementV8Internal::autoplayAttrGetter, HTMLMediaElementV8Internal::autoplayAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'loop' (Type: 'attribute' ExtAttr: 'Reflect')
    {"loop", HTMLMediaElementV8Internal::loopAttrGetter, HTMLMediaElementV8Internal::loopAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'controls' (Type: 'attribute' ExtAttr: '')
    {"controls", HTMLMediaElementV8Internal::controlsAttrGetter, HTMLMediaElementV8Internal::controlsAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'volume' (Type: 'attribute' ExtAttr: '')
    {"volume", HTMLMediaElementV8Internal::volumeAttrGetter, HTMLMediaElementV8Internal::volumeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'muted' (Type: 'attribute' ExtAttr: '')
    {"muted", HTMLMediaElementV8Internal::mutedAttrGetter, HTMLMediaElementV8Internal::mutedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultMuted' (Type: 'attribute' ExtAttr: 'Reflect')
    {"defaultMuted", HTMLMediaElementV8Internal::defaultMutedAttrGetter, HTMLMediaElementV8Internal::defaultMutedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'webkitPreservesPitch' (Type: 'attribute' ExtAttr: '')
    {"webkitPreservesPitch", HTMLMediaElementV8Internal::webkitPreservesPitchAttrGetter, HTMLMediaElementV8Internal::webkitPreservesPitchAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'webkitHasClosedCaptions' (Type: 'readonly attribute' ExtAttr: '')
    {"webkitHasClosedCaptions", HTMLMediaElementV8Internal::webkitHasClosedCaptionsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'webkitClosedCaptionsVisible' (Type: 'attribute' ExtAttr: '')
    {"webkitClosedCaptionsVisible", HTMLMediaElementV8Internal::webkitClosedCaptionsVisibleAttrGetter, HTMLMediaElementV8Internal::webkitClosedCaptionsVisibleAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(MEDIA_STATISTICS)
    // Attribute 'webkitAudioDecodedByteCount' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"webkitAudioDecodedByteCount", HTMLMediaElementV8Internal::webkitAudioDecodedByteCountAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(MEDIA_STATISTICS)
#if ENABLE(MEDIA_STATISTICS)
    // Attribute 'webkitVideoDecodedByteCount' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"webkitVideoDecodedByteCount", HTMLMediaElementV8Internal::webkitVideoDecodedByteCountAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(MEDIA_STATISTICS)
    // Attribute 'mediaGroup' (Type: 'attribute' ExtAttr: 'TreatNullAs Reflect')
    {"mediaGroup", HTMLMediaElementV8Internal::mediaGroupAttrGetter, HTMLMediaElementV8Internal::mediaGroupAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'controller' (Type: 'attribute' ExtAttr: 'CustomSetter')
    {"controller", HTMLMediaElementV8Internal::controllerAttrGetter, V8HTMLMediaElement::controllerAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8HTMLMediaElementCallbacks[] = {
    {"load", HTMLMediaElementV8Internal::loadCallback},
    {"canPlayType", HTMLMediaElementV8Internal::canPlayTypeCallback},
    {"play", HTMLMediaElementV8Internal::playCallback},
    {"pause", HTMLMediaElementV8Internal::pauseCallback},
};

static const V8DOMConfiguration::BatchedConstant V8HTMLMediaElementConsts[] = {
    {"NETWORK_EMPTY", static_cast<signed int>(0)},
    {"NETWORK_IDLE", static_cast<signed int>(1)},
    {"NETWORK_LOADING", static_cast<signed int>(2)},
    {"NETWORK_NO_SOURCE", static_cast<signed int>(3)},
    {"HAVE_NOTHING", static_cast<signed int>(0)},
    {"HAVE_METADATA", static_cast<signed int>(1)},
    {"HAVE_CURRENT_DATA", static_cast<signed int>(2)},
    {"HAVE_FUTURE_DATA", static_cast<signed int>(3)},
    {"HAVE_ENOUGH_DATA", static_cast<signed int>(4)},
};


COMPILE_ASSERT(0 == HTMLMediaElement::NETWORK_EMPTY, HTMLMediaElementEnumNETWORK_EMPTYIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == HTMLMediaElement::NETWORK_IDLE, HTMLMediaElementEnumNETWORK_IDLEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == HTMLMediaElement::NETWORK_LOADING, HTMLMediaElementEnumNETWORK_LOADINGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == HTMLMediaElement::NETWORK_NO_SOURCE, HTMLMediaElementEnumNETWORK_NO_SOURCEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0 == HTMLMediaElement::HAVE_NOTHING, HTMLMediaElementEnumHAVE_NOTHINGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == HTMLMediaElement::HAVE_METADATA, HTMLMediaElementEnumHAVE_METADATAIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == HTMLMediaElement::HAVE_CURRENT_DATA, HTMLMediaElementEnumHAVE_CURRENT_DATAIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == HTMLMediaElement::HAVE_FUTURE_DATA, HTMLMediaElementEnumHAVE_FUTURE_DATAIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(4 == HTMLMediaElement::HAVE_ENOUGH_DATA, HTMLMediaElementEnumHAVE_ENOUGH_DATAIsWrongUseDoNotCheckConstants);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLMediaElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "HTMLMediaElement", V8HTMLElement::GetTemplate(), V8HTMLMediaElement::internalFieldCount,
        V8HTMLMediaElementAttrs, WTF_ARRAY_LENGTH(V8HTMLMediaElementAttrs),
        V8HTMLMediaElementCallbacks, WTF_ARRAY_LENGTH(V8HTMLMediaElementCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    if (RuntimeEnabledFeatures::encryptedMediaEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'onwebkitkeyadded' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime')
        {"onwebkitkeyadded", HTMLMediaElementV8Internal::onwebkitkeyaddedAttrGetter, HTMLMediaElementV8Internal::onwebkitkeyaddedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::encryptedMediaEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'onwebkitkeyerror' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime')
        {"onwebkitkeyerror", HTMLMediaElementV8Internal::onwebkitkeyerrorAttrGetter, HTMLMediaElementV8Internal::onwebkitkeyerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::encryptedMediaEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'onwebkitkeymessage' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime')
        {"onwebkitkeymessage", HTMLMediaElementV8Internal::onwebkitkeymessageAttrGetter, HTMLMediaElementV8Internal::onwebkitkeymessageAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::encryptedMediaEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'onwebkitneedkey' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime')
        {"onwebkitneedkey", HTMLMediaElementV8Internal::onwebkitneedkeyAttrGetter, HTMLMediaElementV8Internal::onwebkitneedkeyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitVideoTrackEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'textTracks' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime')
        {"textTracks", HTMLMediaElementV8Internal::textTracksAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::encryptedMediaEnabled())
        proto->Set(v8::String::NewSymbol("webkitGenerateKeyRequest"), v8::FunctionTemplate::New(HTMLMediaElementV8Internal::webkitGenerateKeyRequestCallback, v8Undefined(), defaultSignature));
    if (RuntimeEnabledFeatures::encryptedMediaEnabled())
        proto->Set(v8::String::NewSymbol("webkitAddKey"), v8::FunctionTemplate::New(HTMLMediaElementV8Internal::webkitAddKeyCallback, v8Undefined(), defaultSignature));
    if (RuntimeEnabledFeatures::encryptedMediaEnabled())
        proto->Set(v8::String::NewSymbol("webkitCancelKeyRequest"), v8::FunctionTemplate::New(HTMLMediaElementV8Internal::webkitCancelKeyRequestCallback, v8Undefined(), defaultSignature));
    if (RuntimeEnabledFeatures::webkitVideoTrackEnabled())
        proto->Set(v8::String::NewSymbol("addTextTrack"), v8::FunctionTemplate::New(HTMLMediaElementV8Internal::addTextTrackCallback, v8Undefined(), defaultSignature));
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8HTMLMediaElementConsts, WTF_ARRAY_LENGTH(V8HTMLMediaElementConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLMediaElement::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLMediaElement::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLMediaElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLMediaElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLMediaElement::createWrapper(PassRefPtr<HTMLMediaElement> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<Node*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8HTMLMediaElement::derefObject(void* object)
{
    static_cast<HTMLMediaElement*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(VIDEO)
