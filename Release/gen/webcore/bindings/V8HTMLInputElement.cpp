/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLInputElement.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "HTMLInputElementFileSystem.h"
#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8EntryArray.h"
#include "V8FileList.h"
#include "V8HTMLElement.h"
#include "V8HTMLFormElement.h"
#include "V8NodeList.h"
#include "V8ValidityState.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8HTMLInputElement::info = { V8HTMLInputElement::GetTemplate, V8HTMLInputElement::derefObject, 0, 0, V8HTMLInputElement::installPerContextPrototypeProperties, &V8HTMLElement::info, WrapperTypeObjectPrototype };

namespace HTMLInputElementV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> acceptAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::acceptAttr), info.GetIsolate());
}

static void acceptAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::acceptAttr, stringResource);
}

static v8::Handle<v8::Value> altAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::altAttr), info.GetIsolate());
}

static void altAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::altAttr, stringResource);
}

static v8::Handle<v8::Value> autocompleteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::autocompleteAttr), info.GetIsolate());
}

static void autocompleteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::autocompleteAttr, stringResource);
}

static v8::Handle<v8::Value> autofocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::autofocusAttr), info.GetIsolate());
}

static void autofocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::autofocusAttr, v);
    return;
}

static v8::Handle<v8::Value> defaultCheckedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::checkedAttr), info.GetIsolate());
}

static void defaultCheckedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::checkedAttr, v);
    return;
}

static v8::Handle<v8::Value> checkedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->checked(), info.GetIsolate());
}

static void checkedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setChecked(v);
    return;
}

static v8::Handle<v8::Value> dirNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::dirnameAttr), info.GetIsolate());
}

static void dirNameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::dirnameAttr, stringResource);
}

static v8::Handle<v8::Value> disabledAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::disabledAttr), info.GetIsolate());
}

static void disabledAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::disabledAttr, v);
    return;
}

static v8::Handle<v8::Value> formAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return toV8Fast(imp->form(), info, imp);
}

static v8::Handle<v8::Value> filesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return toV8Fast(imp->files(), info, imp);
}

static void filesAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    FileList* v = V8FileList::HasInstance(value) ? V8FileList::toNative(v8::Handle<v8::Object>::Cast(value)) : 0;
    imp->setFiles(WTF::getPtr(v));
    return;
}

static v8::Handle<v8::Value> formActionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(WebCore::HTMLNames::formactionAttr), info.GetIsolate());
}

static void formActionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::formactionAttr, stringResource);
}

static v8::Handle<v8::Value> formEnctypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->formEnctype(), info.GetIsolate());
}

static void formEnctypeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setFormEnctype(v);
    return;
}

static v8::Handle<v8::Value> formMethodAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->formMethod(), info.GetIsolate());
}

static void formMethodAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setFormMethod(v);
    return;
}

static v8::Handle<v8::Value> formNoValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::formnovalidateAttr), info.GetIsolate());
}

static void formNoValidateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::formnovalidateAttr, v);
    return;
}

static v8::Handle<v8::Value> formTargetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::formtargetAttr), info.GetIsolate());
}

static void formTargetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::formtargetAttr, stringResource);
}

static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8UnsignedInteger(imp->height(), info.GetIsolate());
}

static void heightAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    unsigned v = toUInt32(value);
    imp->setHeight(v);
    return;
}

static v8::Handle<v8::Value> indeterminateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->indeterminate(), info.GetIsolate());
}

static void indeterminateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setIndeterminate(v);
    return;
}

#if ENABLE(DATALIST_ELEMENT)

static v8::Handle<v8::Value> listAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return toV8Fast(imp->list(), info, imp);
}

#endif // ENABLE(DATALIST_ELEMENT)

static v8::Handle<v8::Value> maxAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::maxAttr), info.GetIsolate());
}

static void maxAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::maxAttr, stringResource);
}

static v8::Handle<v8::Value> maxLengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Integer(imp->maxLength(), info.GetIsolate());
}

static void maxLengthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    int v = toInt32(value);
    ExceptionCode ec = 0;
    imp->setMaxLength(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> minAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::minAttr), info.GetIsolate());
}

static void minAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::minAttr, stringResource);
}

static v8::Handle<v8::Value> multipleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::multipleAttr), info.GetIsolate());
}

static void multipleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::multipleAttr, v);
    return;
}

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->getNameAttribute(), info.GetIsolate());
}

static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::nameAttr, stringResource);
}

static v8::Handle<v8::Value> patternAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::patternAttr), info.GetIsolate());
}

static void patternAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::patternAttr, stringResource);
}

static v8::Handle<v8::Value> placeholderAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::placeholderAttr), info.GetIsolate());
}

static void placeholderAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::placeholderAttr, stringResource);
}

static v8::Handle<v8::Value> readOnlyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::readonlyAttr), info.GetIsolate());
}

static void readOnlyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::readonlyAttr, v);
    return;
}

static v8::Handle<v8::Value> requiredAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::requiredAttr), info.GetIsolate());
}

static void requiredAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::requiredAttr, v);
    return;
}

static v8::Handle<v8::Value> sizeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8UnsignedInteger(imp->size(), info.GetIsolate());
}

static void sizeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    unsigned v = toUInt32(value);
    ExceptionCode ec = 0;
    imp->setSize(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> srcAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(WebCore::HTMLNames::srcAttr), info.GetIsolate());
}

static void srcAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::srcAttr, stringResource);
}

static v8::Handle<v8::Value> stepAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::stepAttr), info.GetIsolate());
}

static void stepAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::stepAttr, stringResource);
}

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->type(), info.GetIsolate());
}

static void typeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setType(v);
    return;
}

static v8::Handle<v8::Value> defaultValueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->defaultValue(), info.GetIsolate());
}

static void defaultValueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setDefaultValue(v);
    return;
}

static v8::Handle<v8::Value> valueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->value(), info.GetIsolate());
}

static void valueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setValue(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> valueAsDateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8DateOrNull(imp->valueAsDate(), info.GetIsolate());
}

static void valueAsDateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    double v = toWebCoreDate(value);
    ExceptionCode ec = 0;
    imp->setValueAsDate(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> valueAsNumberAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8::Number::New(imp->valueAsNumber());
}

static void valueAsNumberAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    double v = static_cast<double>(value->NumberValue());
    ExceptionCode ec = 0;
    imp->setValueAsNumber(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8UnsignedInteger(imp->width(), info.GetIsolate());
}

static void widthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    unsigned v = toUInt32(value);
    imp->setWidth(v);
    return;
}

static v8::Handle<v8::Value> willValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->willValidate(), info.GetIsolate());
}

static v8::Handle<v8::Value> validityAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return toV8Fast(imp->validity(), info, imp);
}

static v8::Handle<v8::Value> validationMessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->validationMessage(), info.GetIsolate());
}

static v8::Handle<v8::Value> labelsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return toV8Fast(imp->labels(), info, imp);
}

static v8::Handle<v8::Value> alignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::alignAttr), info.GetIsolate());
}

static void alignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::alignAttr, stringResource);
}

#if ENABLE(DIRECTORY_UPLOAD)

static v8::Handle<v8::Value> webkitdirectoryAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::webkitdirectoryAttr), info.GetIsolate());
}

#endif // ENABLE(DIRECTORY_UPLOAD)

#if ENABLE(DIRECTORY_UPLOAD)

static void webkitdirectoryAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::webkitdirectoryAttr, v);
    return;
}

#endif // ENABLE(DIRECTORY_UPLOAD)

static v8::Handle<v8::Value> nwdirectoryAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::nwdirectoryAttr), info.GetIsolate());
}

static void nwdirectoryAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::nwdirectoryAttr, v);
    return;
}

static v8::Handle<v8::Value> useMapAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::usemapAttr), info.GetIsolate());
}

static void useMapAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::usemapAttr, stringResource);
}

static v8::Handle<v8::Value> incrementalAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::incrementalAttr), info.GetIsolate());
}

static void incrementalAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::incrementalAttr, v);
    return;
}

#if ENABLE(INPUT_SPEECH)

static v8::Handle<v8::Value> webkitSpeechAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::webkitspeechAttr), info.GetIsolate());
}

#endif // ENABLE(INPUT_SPEECH)

#if ENABLE(INPUT_SPEECH)

static void webkitSpeechAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::webkitspeechAttr, v);
    return;
}

#endif // ENABLE(INPUT_SPEECH)

#if ENABLE(INPUT_SPEECH)

static v8::Handle<v8::Value> webkitGrammarAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::webkitgrammarAttr), info.GetIsolate());
}

#endif // ENABLE(INPUT_SPEECH)

#if ENABLE(INPUT_SPEECH)

static void webkitGrammarAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::webkitgrammarAttr, v);
    return;
}

#endif // ENABLE(INPUT_SPEECH)

#if ENABLE(INPUT_SPEECH)

static v8::Handle<v8::Value> onwebkitspeechchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return imp->onwebkitspeechchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitspeechchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(INPUT_SPEECH)

#if ENABLE(INPUT_SPEECH)

static void onwebkitspeechchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    imp->setOnwebkitspeechchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(INPUT_SPEECH)

#if ENABLE(MEDIA_CAPTURE)

static v8::Handle<v8::Value> captureAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->capture(), info.GetIsolate());
}

#endif // ENABLE(MEDIA_CAPTURE)

#if ENABLE(MEDIA_CAPTURE)

static void captureAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setCapture(v);
    return;
}

#endif // ENABLE(MEDIA_CAPTURE)

#if ENABLE(FILE_SYSTEM)

static v8::Handle<v8::Value> webkitEntriesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    return toV8Fast(HTMLInputElementFileSystem::webkitEntries(scriptContext, imp), info, imp);
}

#endif // ENABLE(FILE_SYSTEM)

static v8::Handle<v8::Value> stepUpCallback(const v8::Arguments& args)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        imp->stepUp(ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8Undefined();
    }
    V8TRYCATCH(int, n, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->stepUp(n, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> stepDownCallback(const v8::Arguments& args)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        imp->stepDown(ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8Undefined();
    }
    V8TRYCATCH(int, n, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->stepDown(n, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> checkValidityCallback(const v8::Arguments& args)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    return v8Boolean(imp->checkValidity(), args.GetIsolate());
}

static v8::Handle<v8::Value> setCustomValidityCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithUndefinedOrNullCheck>, error, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->setCustomValidity(error);
    return v8Undefined();
}

static v8::Handle<v8::Value> selectCallback(const v8::Arguments& args)
{
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    imp->select();
    return v8Undefined();
}

static v8::Handle<v8::Value> setRangeText1Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, replacement, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->setRangeText(replacement, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setRangeText2Callback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, replacement, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(unsigned, start, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, end, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, selectionMode, MAYBE_MISSING_PARAMETER(args, 3, DefaultIsNullString));
    imp->setRangeText(replacement, start, end, selectionMode, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setRangeTextCallback(const v8::Arguments& args)
{
    if (args.Length() == 1)
        return setRangeText1Callback(args);
    if (args.Length() == 3 || args.Length() == 4)
        return setRangeText2Callback(args);
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

} // namespace HTMLInputElementV8Internal

static const V8DOMConfiguration::BatchedAttribute V8HTMLInputElementAttrs[] = {
    // Attribute 'accept' (Type: 'attribute' ExtAttr: 'Reflect')
    {"accept", HTMLInputElementV8Internal::acceptAttrGetter, HTMLInputElementV8Internal::acceptAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'alt' (Type: 'attribute' ExtAttr: 'Reflect')
    {"alt", HTMLInputElementV8Internal::altAttrGetter, HTMLInputElementV8Internal::altAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'autocomplete' (Type: 'attribute' ExtAttr: 'Reflect')
    {"autocomplete", HTMLInputElementV8Internal::autocompleteAttrGetter, HTMLInputElementV8Internal::autocompleteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'autofocus' (Type: 'attribute' ExtAttr: 'Reflect')
    {"autofocus", HTMLInputElementV8Internal::autofocusAttrGetter, HTMLInputElementV8Internal::autofocusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultChecked' (Type: 'attribute' ExtAttr: 'Reflect')
    {"defaultChecked", HTMLInputElementV8Internal::defaultCheckedAttrGetter, HTMLInputElementV8Internal::defaultCheckedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'checked' (Type: 'attribute' ExtAttr: '')
    {"checked", HTMLInputElementV8Internal::checkedAttrGetter, HTMLInputElementV8Internal::checkedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'dirName' (Type: 'attribute' ExtAttr: 'Reflect')
    {"dirName", HTMLInputElementV8Internal::dirNameAttrGetter, HTMLInputElementV8Internal::dirNameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'disabled' (Type: 'attribute' ExtAttr: 'Reflect')
    {"disabled", HTMLInputElementV8Internal::disabledAttrGetter, HTMLInputElementV8Internal::disabledAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'form' (Type: 'readonly attribute' ExtAttr: '')
    {"form", HTMLInputElementV8Internal::formAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'files' (Type: 'attribute' ExtAttr: '')
    {"files", HTMLInputElementV8Internal::filesAttrGetter, HTMLInputElementV8Internal::filesAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formAction' (Type: 'attribute' ExtAttr: 'URL Reflect')
    {"formAction", HTMLInputElementV8Internal::formActionAttrGetter, HTMLInputElementV8Internal::formActionAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formEnctype' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"formEnctype", HTMLInputElementV8Internal::formEnctypeAttrGetter, HTMLInputElementV8Internal::formEnctypeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formMethod' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"formMethod", HTMLInputElementV8Internal::formMethodAttrGetter, HTMLInputElementV8Internal::formMethodAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formNoValidate' (Type: 'attribute' ExtAttr: 'Reflect')
    {"formNoValidate", HTMLInputElementV8Internal::formNoValidateAttrGetter, HTMLInputElementV8Internal::formNoValidateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'formTarget' (Type: 'attribute' ExtAttr: 'Reflect')
    {"formTarget", HTMLInputElementV8Internal::formTargetAttrGetter, HTMLInputElementV8Internal::formTargetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'height' (Type: 'attribute' ExtAttr: '')
    {"height", HTMLInputElementV8Internal::heightAttrGetter, HTMLInputElementV8Internal::heightAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'indeterminate' (Type: 'attribute' ExtAttr: '')
    {"indeterminate", HTMLInputElementV8Internal::indeterminateAttrGetter, HTMLInputElementV8Internal::indeterminateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(DATALIST_ELEMENT)
    // Attribute 'list' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"list", HTMLInputElementV8Internal::listAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(DATALIST_ELEMENT)
    // Attribute 'max' (Type: 'attribute' ExtAttr: 'Reflect')
    {"max", HTMLInputElementV8Internal::maxAttrGetter, HTMLInputElementV8Internal::maxAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'maxLength' (Type: 'attribute' ExtAttr: '')
    {"maxLength", HTMLInputElementV8Internal::maxLengthAttrGetter, HTMLInputElementV8Internal::maxLengthAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'min' (Type: 'attribute' ExtAttr: 'Reflect')
    {"min", HTMLInputElementV8Internal::minAttrGetter, HTMLInputElementV8Internal::minAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'multiple' (Type: 'attribute' ExtAttr: 'Reflect')
    {"multiple", HTMLInputElementV8Internal::multipleAttrGetter, HTMLInputElementV8Internal::multipleAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'name' (Type: 'attribute' ExtAttr: 'Reflect')
    {"name", HTMLInputElementV8Internal::nameAttrGetter, HTMLInputElementV8Internal::nameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'pattern' (Type: 'attribute' ExtAttr: 'Reflect')
    {"pattern", HTMLInputElementV8Internal::patternAttrGetter, HTMLInputElementV8Internal::patternAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'placeholder' (Type: 'attribute' ExtAttr: 'Reflect')
    {"placeholder", HTMLInputElementV8Internal::placeholderAttrGetter, HTMLInputElementV8Internal::placeholderAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'readOnly' (Type: 'attribute' ExtAttr: 'Reflect')
    {"readOnly", HTMLInputElementV8Internal::readOnlyAttrGetter, HTMLInputElementV8Internal::readOnlyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'required' (Type: 'attribute' ExtAttr: 'Reflect')
    {"required", HTMLInputElementV8Internal::requiredAttrGetter, HTMLInputElementV8Internal::requiredAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'size' (Type: 'attribute' ExtAttr: '')
    {"size", HTMLInputElementV8Internal::sizeAttrGetter, HTMLInputElementV8Internal::sizeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'src' (Type: 'attribute' ExtAttr: 'URL Reflect')
    {"src", HTMLInputElementV8Internal::srcAttrGetter, HTMLInputElementV8Internal::srcAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'step' (Type: 'attribute' ExtAttr: 'Reflect')
    {"step", HTMLInputElementV8Internal::stepAttrGetter, HTMLInputElementV8Internal::stepAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'type' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"type", HTMLInputElementV8Internal::typeAttrGetter, HTMLInputElementV8Internal::typeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultValue' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"defaultValue", HTMLInputElementV8Internal::defaultValueAttrGetter, HTMLInputElementV8Internal::defaultValueAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'value' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"value", HTMLInputElementV8Internal::valueAttrGetter, HTMLInputElementV8Internal::valueAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'valueAsDate' (Type: 'attribute' ExtAttr: '')
    {"valueAsDate", HTMLInputElementV8Internal::valueAsDateAttrGetter, HTMLInputElementV8Internal::valueAsDateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'valueAsNumber' (Type: 'attribute' ExtAttr: '')
    {"valueAsNumber", HTMLInputElementV8Internal::valueAsNumberAttrGetter, HTMLInputElementV8Internal::valueAsNumberAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'width' (Type: 'attribute' ExtAttr: '')
    {"width", HTMLInputElementV8Internal::widthAttrGetter, HTMLInputElementV8Internal::widthAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'willValidate' (Type: 'readonly attribute' ExtAttr: '')
    {"willValidate", HTMLInputElementV8Internal::willValidateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'validity' (Type: 'readonly attribute' ExtAttr: '')
    {"validity", HTMLInputElementV8Internal::validityAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'validationMessage' (Type: 'readonly attribute' ExtAttr: '')
    {"validationMessage", HTMLInputElementV8Internal::validationMessageAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'labels' (Type: 'readonly attribute' ExtAttr: '')
    {"labels", HTMLInputElementV8Internal::labelsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'selectionStart' (Type: 'attribute' ExtAttr: 'Custom')
    {"selectionStart", V8HTMLInputElement::selectionStartAccessorGetter, V8HTMLInputElement::selectionStartAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'selectionEnd' (Type: 'attribute' ExtAttr: 'Custom')
    {"selectionEnd", V8HTMLInputElement::selectionEndAccessorGetter, V8HTMLInputElement::selectionEndAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'selectionDirection' (Type: 'attribute' ExtAttr: 'Custom')
    {"selectionDirection", V8HTMLInputElement::selectionDirectionAccessorGetter, V8HTMLInputElement::selectionDirectionAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'align' (Type: 'attribute' ExtAttr: 'Reflect')
    {"align", HTMLInputElementV8Internal::alignAttrGetter, HTMLInputElementV8Internal::alignAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(DIRECTORY_UPLOAD)
    // Attribute 'webkitdirectory' (Type: 'attribute' ExtAttr: 'Reflect Conditional')
    {"webkitdirectory", HTMLInputElementV8Internal::webkitdirectoryAttrGetter, HTMLInputElementV8Internal::webkitdirectoryAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(DIRECTORY_UPLOAD)
    // Attribute 'nwdirectory' (Type: 'attribute' ExtAttr: 'Reflect')
    {"nwdirectory", HTMLInputElementV8Internal::nwdirectoryAttrGetter, HTMLInputElementV8Internal::nwdirectoryAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'useMap' (Type: 'attribute' ExtAttr: 'Reflect')
    {"useMap", HTMLInputElementV8Internal::useMapAttrGetter, HTMLInputElementV8Internal::useMapAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'incremental' (Type: 'attribute' ExtAttr: 'Reflect')
    {"incremental", HTMLInputElementV8Internal::incrementalAttrGetter, HTMLInputElementV8Internal::incrementalAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(INPUT_SPEECH)
    // Attribute 'onwebkitspeechchange' (Type: 'attribute' ExtAttr: 'NotEnumerable Conditional')
    {"onwebkitspeechchange", HTMLInputElementV8Internal::onwebkitspeechchangeAttrGetter, HTMLInputElementV8Internal::onwebkitspeechchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(INPUT_SPEECH)
#if ENABLE(MEDIA_CAPTURE)
    // Attribute 'capture' (Type: 'attribute' ExtAttr: 'Conditional')
    {"capture", HTMLInputElementV8Internal::captureAttrGetter, HTMLInputElementV8Internal::captureAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(MEDIA_CAPTURE)
};

static const V8DOMConfiguration::BatchedCallback V8HTMLInputElementCallbacks[] = {
    {"stepUp", HTMLInputElementV8Internal::stepUpCallback},
    {"stepDown", HTMLInputElementV8Internal::stepDownCallback},
    {"checkValidity", HTMLInputElementV8Internal::checkValidityCallback},
    {"setCustomValidity", HTMLInputElementV8Internal::setCustomValidityCallback},
    {"select", HTMLInputElementV8Internal::selectCallback},
    {"setRangeText", HTMLInputElementV8Internal::setRangeTextCallback},
    {"setSelectionRange", V8HTMLInputElement::setSelectionRangeCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLInputElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "HTMLInputElement", V8HTMLElement::GetTemplate(), V8HTMLInputElement::internalFieldCount,
        V8HTMLInputElementAttrs, WTF_ARRAY_LENGTH(V8HTMLInputElementAttrs),
        V8HTMLInputElementCallbacks, WTF_ARRAY_LENGTH(V8HTMLInputElementCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

#if ENABLE(INPUT_SPEECH)
    if (RuntimeEnabledFeatures::webkitSpeechEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'webkitSpeech' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime Reflect Conditional')
        {"webkitSpeech", HTMLInputElementV8Internal::webkitSpeechAttrGetter, HTMLInputElementV8Internal::webkitSpeechAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(INPUT_SPEECH)

#if ENABLE(INPUT_SPEECH)
    if (RuntimeEnabledFeatures::webkitGrammarEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'webkitGrammar' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime Reflect Conditional')
        {"webkitGrammar", HTMLInputElementV8Internal::webkitGrammarAttrGetter, HTMLInputElementV8Internal::webkitGrammarAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(INPUT_SPEECH)

#if ENABLE(FILE_SYSTEM)
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'webkitEntries' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime CallWith Conditional ImplementedBy')
        {"webkitEntries", HTMLInputElementV8Internal::webkitEntriesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(FILE_SYSTEM)

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLInputElement::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLInputElement::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLInputElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLInputElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLInputElement::createWrapper(PassRefPtr<HTMLInputElement> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<Node*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8HTMLInputElement::derefObject(void* object)
{
    static_cast<HTMLInputElement*>(object)->deref();
}

} // namespace WebCore
