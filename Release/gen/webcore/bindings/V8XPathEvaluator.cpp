/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8XPathEvaluator.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8Node.h"
#include "V8XPathExpression.h"
#include "V8XPathNSResolver.h"
#include "V8XPathResult.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>
#include <wtf/text/WTFString.h>

namespace WebCore {

WrapperTypeInfo V8XPathEvaluator::info = { V8XPathEvaluator::GetTemplate, V8XPathEvaluator::derefObject, 0, 0, V8XPathEvaluator::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace XPathEvaluatorV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> createExpressionCallback(const v8::Arguments& args)
{
    XPathEvaluator* imp = V8XPathEvaluator::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, expression, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(RefPtr<XPathNSResolver>, resolver, toXPathNSResolver(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    RefPtr<XPathExpression> result = imp->createExpression(expression, resolver.get(), ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createNSResolverCallback(const v8::Arguments& args)
{
    XPathEvaluator* imp = V8XPathEvaluator::toNative(args.Holder());
    V8TRYCATCH(Node*, nodeResolver, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    return toV8(imp->createNSResolver(nodeResolver), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> evaluateCallback(const v8::Arguments& args)
{
    XPathEvaluator* imp = V8XPathEvaluator::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, expression, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(Node*, contextNode, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    V8TRYCATCH(RefPtr<XPathNSResolver>, resolver, toXPathNSResolver(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(XPathResult*, inResult, V8XPathResult::HasInstance(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)) ? V8XPathResult::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined))) : 0);
    RefPtr<XPathResult> result = imp->evaluate(expression, contextNode, resolver.get(), type, inResult, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace XPathEvaluatorV8Internal

v8::Handle<v8::Value> V8XPathEvaluator::constructorCallback(const v8::Arguments& args)
{
    
    if (!args.IsConstructCall())
        return throwTypeError("DOM object constructor cannot be called as a function.");

    if (ConstructorMode::current() == ConstructorMode::WrapExistingObject)
        return args.Holder();

    RefPtr<XPathEvaluator> impl = XPathEvaluator::create();
    v8::Handle<v8::Object> wrapper = args.Holder();

    V8DOMWrapper::associateObjectWithWrapper(impl.release(), &info, wrapper, args.GetIsolate());
    return wrapper;
}

static v8::Persistent<v8::FunctionTemplate> ConfigureV8XPathEvaluatorTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "XPathEvaluator", v8::Persistent<v8::FunctionTemplate>(), V8XPathEvaluator::internalFieldCount,
        0, 0,
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    desc->SetCallHandler(V8XPathEvaluator::constructorCallback);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'createExpression'
    const int createExpressionArgc = 2;
    v8::Handle<v8::FunctionTemplate> createExpressionArgv[createExpressionArgc] = { v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> createExpressionSignature = v8::Signature::New(desc, createExpressionArgc, createExpressionArgv);
    proto->Set(v8::String::NewSymbol("createExpression"), v8::FunctionTemplate::New(XPathEvaluatorV8Internal::createExpressionCallback, v8Undefined(), createExpressionSignature));

    // Custom Signature 'createNSResolver'
    const int createNSResolverArgc = 1;
    v8::Handle<v8::FunctionTemplate> createNSResolverArgv[createNSResolverArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> createNSResolverSignature = v8::Signature::New(desc, createNSResolverArgc, createNSResolverArgv);
    proto->Set(v8::String::NewSymbol("createNSResolver"), v8::FunctionTemplate::New(XPathEvaluatorV8Internal::createNSResolverCallback, v8Undefined(), createNSResolverSignature));

    // Custom Signature 'evaluate'
    const int evaluateArgc = 5;
    v8::Handle<v8::FunctionTemplate> evaluateArgv[evaluateArgc] = { v8::Handle<v8::FunctionTemplate>(), V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), V8XPathResult::GetRawTemplate() };
    v8::Handle<v8::Signature> evaluateSignature = v8::Signature::New(desc, evaluateArgc, evaluateArgv);
    proto->Set(v8::String::NewSymbol("evaluate"), v8::FunctionTemplate::New(XPathEvaluatorV8Internal::evaluateCallback, v8Undefined(), evaluateSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8XPathEvaluator::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8XPathEvaluator::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8XPathEvaluatorTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8XPathEvaluator::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8XPathEvaluator::createWrapper(PassRefPtr<XPathEvaluator> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8XPathEvaluator::derefObject(void* object)
{
    static_cast<XPathEvaluator*>(object)->deref();
}

} // namespace WebCore
