/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8CanvasRenderingContext2D.h"

#include "BindingState.h"
#include "CanvasGradient.h"
#include "CanvasPattern.h"
#include "CanvasStyle.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8CanvasGradient.h"
#include "V8CanvasPattern.h"
#include "V8CanvasRenderingContext.h"
#include "V8DOMWrapper.h"
#include "V8HTMLCanvasElement.h"
#include "V8HTMLImageElement.h"
#include "V8HTMLVideoElement.h"
#include "V8ImageData.h"
#include "V8TextMetrics.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>
#include <wtf/text/WTFString.h>

namespace WebCore {

WrapperTypeInfo V8CanvasRenderingContext2D::info = { V8CanvasRenderingContext2D::GetTemplate, V8CanvasRenderingContext2D::derefObject, 0, 0, V8CanvasRenderingContext2D::installPerContextPrototypeProperties, &V8CanvasRenderingContext::info, WrapperTypeObjectPrototype };

namespace CanvasRenderingContext2DV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> globalAlphaAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8::Number::New(imp->globalAlpha());
}

static void globalAlphaAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setGlobalAlpha(v);
    return;
}

static v8::Handle<v8::Value> globalCompositeOperationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8String(imp->globalCompositeOperation(), info.GetIsolate());
}

static void globalCompositeOperationAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setGlobalCompositeOperation(v);
    return;
}

static v8::Handle<v8::Value> lineWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8::Number::New(imp->lineWidth());
}

static void lineWidthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setLineWidth(v);
    return;
}

static v8::Handle<v8::Value> lineCapAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8String(imp->lineCap(), info.GetIsolate());
}

static void lineCapAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setLineCap(v);
    return;
}

static v8::Handle<v8::Value> lineJoinAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8String(imp->lineJoin(), info.GetIsolate());
}

static void lineJoinAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setLineJoin(v);
    return;
}

static v8::Handle<v8::Value> miterLimitAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8::Number::New(imp->miterLimit());
}

static void miterLimitAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setMiterLimit(v);
    return;
}

static v8::Handle<v8::Value> shadowOffsetXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8::Number::New(imp->shadowOffsetX());
}

static void shadowOffsetXAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setShadowOffsetX(v);
    return;
}

static v8::Handle<v8::Value> shadowOffsetYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8::Number::New(imp->shadowOffsetY());
}

static void shadowOffsetYAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setShadowOffsetY(v);
    return;
}

static v8::Handle<v8::Value> shadowBlurAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8::Number::New(imp->shadowBlur());
}

static void shadowBlurAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setShadowBlur(v);
    return;
}

static v8::Handle<v8::Value> shadowColorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8String(imp->shadowColor(), info.GetIsolate());
}

static void shadowColorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setShadowColor(v);
    return;
}

static v8::Handle<v8::Value> lineDashOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8::Number::New(imp->lineDashOffset());
}

static void lineDashOffsetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setLineDashOffset(v);
    return;
}

static v8::Handle<v8::Value> fontAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8String(imp->font(), info.GetIsolate());
}

static void fontAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setFont(v);
    return;
}

static v8::Handle<v8::Value> textAlignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8String(imp->textAlign(), info.GetIsolate());
}

static void textAlignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setTextAlign(v);
    return;
}

static v8::Handle<v8::Value> textBaselineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8String(imp->textBaseline(), info.GetIsolate());
}

static void textBaselineAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setTextBaseline(v);
    return;
}

static v8::Handle<v8::Value> webkitBackingStorePixelRatioAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8::Number::New(imp->webkitBackingStorePixelRatio());
}

static v8::Handle<v8::Value> webkitImageSmoothingEnabledAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    return v8Boolean(imp->webkitImageSmoothingEnabled(), info.GetIsolate());
}

static void webkitImageSmoothingEnabledAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setWebkitImageSmoothingEnabled(v);
    return;
}

static v8::Handle<v8::Value> saveCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    imp->save();
    return v8Undefined();
}

static v8::Handle<v8::Value> restoreCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    imp->restore();
    return v8Undefined();
}

static v8::Handle<v8::Value> scaleCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, sx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->scale(sx, sy);
    return v8Undefined();
}

static v8::Handle<v8::Value> rotateCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, angle, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    imp->rotate(angle);
    return v8Undefined();
}

static v8::Handle<v8::Value> translateCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, tx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, ty, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->translate(tx, ty);
    return v8Undefined();
}

static v8::Handle<v8::Value> transformCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, m11, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, m12, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, m21, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, m22, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)->NumberValue()));
    imp->transform(m11, m12, m21, m22, dx, dy);
    return v8Undefined();
}

static v8::Handle<v8::Value> setTransformCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, m11, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, m12, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, m21, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, m22, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)->NumberValue()));
    imp->setTransform(m11, m12, m21, m22, dx, dy);
    return v8Undefined();
}

static v8::Handle<v8::Value> createLinearGradientCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(float, x0, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y0, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, x1, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y1, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    RefPtr<CanvasGradient> result = imp->createLinearGradient(x0, y0, x1, y1, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createRadialGradientCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(float, x0, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y0, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, r0, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, x1, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y1, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, r1, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)->NumberValue()));
    RefPtr<CanvasGradient> result = imp->createRadialGradient(x0, y0, r0, x1, y1, r1, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setLineDashCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(Vector<float>, dash, toNativeArray<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->setLineDash(dash);
    return v8Undefined();
}

static v8::Handle<v8::Value> getLineDashCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    return v8Array(imp->getLineDash(), args.GetIsolate());
}

static v8::Handle<v8::Value> clearRectCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, width, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, height, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    imp->clearRect(x, y, width, height);
    return v8Undefined();
}

static v8::Handle<v8::Value> fillRectCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, width, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, height, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    imp->fillRect(x, y, width, height);
    return v8Undefined();
}

static v8::Handle<v8::Value> beginPathCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    imp->beginPath();
    return v8Undefined();
}

static v8::Handle<v8::Value> closePathCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    imp->closePath();
    return v8Undefined();
}

static v8::Handle<v8::Value> moveToCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->moveTo(x, y);
    return v8Undefined();
}

static v8::Handle<v8::Value> lineToCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->lineTo(x, y);
    return v8Undefined();
}

static v8::Handle<v8::Value> quadraticCurveToCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, cpx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, cpy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    imp->quadraticCurveTo(cpx, cpy, x, y);
    return v8Undefined();
}

static v8::Handle<v8::Value> bezierCurveToCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, cp1x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, cp1y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, cp2x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, cp2y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)->NumberValue()));
    imp->bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
    return v8Undefined();
}

static v8::Handle<v8::Value> arcToCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(float, x1, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y1, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, x2, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y2, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, radius, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    imp->arcTo(x1, y1, x2, y2, radius, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> rectCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, width, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, height, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    imp->rect(x, y, width, height);
    return v8Undefined();
}

static v8::Handle<v8::Value> arcCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, radius, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, startAngle, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, endAngle, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(bool, anticlockwise, MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)->BooleanValue());
    imp->arc(x, y, radius, startAngle, endAngle, anticlockwise, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> fillCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    imp->fill();
    return v8Undefined();
}

static v8::Handle<v8::Value> strokeCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    imp->stroke();
    return v8Undefined();
}

static v8::Handle<v8::Value> clipCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    imp->clip();
    return v8Undefined();
}

static v8::Handle<v8::Value> isPointInPathCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    return v8Boolean(imp->isPointInPath(x, y), args.GetIsolate());
}

static v8::Handle<v8::Value> measureTextCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, text, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8(imp->measureText(text), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> setAlphaCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, alpha, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    imp->setAlpha(alpha);
    return v8Undefined();
}

static v8::Handle<v8::Value> setCompositeOperationCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, compositeOperation, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->setCompositeOperation(compositeOperation);
    return v8Undefined();
}

static v8::Handle<v8::Value> setLineWidthCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, width, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    imp->setLineWidth(width);
    return v8Undefined();
}

static v8::Handle<v8::Value> setLineCapCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, cap, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->setLineCap(cap);
    return v8Undefined();
}

static v8::Handle<v8::Value> setLineJoinCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, join, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->setLineJoin(join);
    return v8Undefined();
}

static v8::Handle<v8::Value> setMiterLimitCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, limit, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    imp->setMiterLimit(limit);
    return v8Undefined();
}

static v8::Handle<v8::Value> clearShadowCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    imp->clearShadow();
    return v8Undefined();
}

static v8::Handle<v8::Value> fillTextCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, text, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 3) {
        imp->fillText(text, x, y);
        return v8Undefined();
    }
    V8TRYCATCH(float, maxWidth, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    imp->fillText(text, x, y, maxWidth);
    return v8Undefined();
}

static v8::Handle<v8::Value> strokeTextCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, text, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 3) {
        imp->strokeText(text, x, y);
        return v8Undefined();
    }
    V8TRYCATCH(float, maxWidth, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    imp->strokeText(text, x, y, maxWidth);
    return v8Undefined();
}

static v8::Handle<v8::Value> setStrokeColor1Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, color, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    if (args.Length() <= 1) {
        imp->setStrokeColor(color);
        return v8Undefined();
    }
    V8TRYCATCH(float, alpha, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->setStrokeColor(color, alpha);
    return v8Undefined();
}

static v8::Handle<v8::Value> setStrokeColor2Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, grayLevel, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 1) {
        imp->setStrokeColor(grayLevel);
        return v8Undefined();
    }
    V8TRYCATCH(float, alpha, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->setStrokeColor(grayLevel, alpha);
    return v8Undefined();
}

static v8::Handle<v8::Value> setStrokeColor3Callback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, r, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, g, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, b, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, a, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    imp->setStrokeColor(r, g, b, a);
    return v8Undefined();
}

static v8::Handle<v8::Value> setStrokeColor4Callback(const v8::Arguments& args)
{
    if (args.Length() < 5)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, c, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, m, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, k, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, a, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    imp->setStrokeColor(c, m, y, k, a);
    return v8Undefined();
}

static v8::Handle<v8::Value> setStrokeColorCallback(const v8::Arguments& args)
{
    if ((args.Length() == 1 && (args[0]->IsNull() || args[0]->IsUndefined() || args[0]->IsString() || args[0]->IsObject())) || (args.Length() == 2 && (args[0]->IsNull() || args[0]->IsUndefined() || args[0]->IsString() || args[0]->IsObject())))
        return setStrokeColor1Callback(args);
    if (args.Length() == 1 || args.Length() == 2)
        return setStrokeColor2Callback(args);
    if (args.Length() == 4)
        return setStrokeColor3Callback(args);
    if (args.Length() == 5)
        return setStrokeColor4Callback(args);
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> setFillColor1Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, color, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    if (args.Length() <= 1) {
        imp->setFillColor(color);
        return v8Undefined();
    }
    V8TRYCATCH(float, alpha, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->setFillColor(color, alpha);
    return v8Undefined();
}

static v8::Handle<v8::Value> setFillColor2Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, grayLevel, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 1) {
        imp->setFillColor(grayLevel);
        return v8Undefined();
    }
    V8TRYCATCH(float, alpha, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->setFillColor(grayLevel, alpha);
    return v8Undefined();
}

static v8::Handle<v8::Value> setFillColor3Callback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, r, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, g, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, b, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, a, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    imp->setFillColor(r, g, b, a);
    return v8Undefined();
}

static v8::Handle<v8::Value> setFillColor4Callback(const v8::Arguments& args)
{
    if (args.Length() < 5)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, c, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, m, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, k, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, a, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    imp->setFillColor(c, m, y, k, a);
    return v8Undefined();
}

static v8::Handle<v8::Value> setFillColorCallback(const v8::Arguments& args)
{
    if ((args.Length() == 1 && (args[0]->IsNull() || args[0]->IsUndefined() || args[0]->IsString() || args[0]->IsObject())) || (args.Length() == 2 && (args[0]->IsNull() || args[0]->IsUndefined() || args[0]->IsString() || args[0]->IsObject())))
        return setFillColor1Callback(args);
    if (args.Length() == 1 || args.Length() == 2)
        return setFillColor2Callback(args);
    if (args.Length() == 4)
        return setFillColor3Callback(args);
    if (args.Length() == 5)
        return setFillColor4Callback(args);
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> strokeRectCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, width, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, height, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 4) {
        imp->strokeRect(x, y, width, height);
        return v8Undefined();
    }
    V8TRYCATCH(float, lineWidth, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    imp->strokeRect(x, y, width, height, lineWidth);
    return v8Undefined();
}

static v8::Handle<v8::Value> drawImage1Callback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(HTMLImageElement*, image, V8HTMLImageElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8HTMLImageElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    imp->drawImage(image, x, y, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> drawImage2Callback(const v8::Arguments& args)
{
    if (args.Length() < 5)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(HTMLImageElement*, image, V8HTMLImageElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8HTMLImageElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, width, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, height, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    imp->drawImage(image, x, y, width, height, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> drawImage3Callback(const v8::Arguments& args)
{
    if (args.Length() < 9)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(HTMLImageElement*, image, V8HTMLImageElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8HTMLImageElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, sx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sw, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sh, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dw, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 7, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dh, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 8, DefaultIsUndefined)->NumberValue()));
    imp->drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> drawImage4Callback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(HTMLCanvasElement*, canvas, V8HTMLCanvasElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8HTMLCanvasElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    imp->drawImage(canvas, x, y, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> drawImage5Callback(const v8::Arguments& args)
{
    if (args.Length() < 5)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(HTMLCanvasElement*, canvas, V8HTMLCanvasElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8HTMLCanvasElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, width, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, height, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    imp->drawImage(canvas, x, y, width, height, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> drawImage6Callback(const v8::Arguments& args)
{
    if (args.Length() < 9)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(HTMLCanvasElement*, canvas, V8HTMLCanvasElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8HTMLCanvasElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, sx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sw, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sh, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dw, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 7, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dh, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 8, DefaultIsUndefined)->NumberValue()));
    imp->drawImage(canvas, sx, sy, sw, sh, dx, dy, dw, dh, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> drawImage7Callback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(HTMLVideoElement*, video, V8HTMLVideoElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8HTMLVideoElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    imp->drawImage(video, x, y, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> drawImage8Callback(const v8::Arguments& args)
{
    if (args.Length() < 5)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(HTMLVideoElement*, video, V8HTMLVideoElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8HTMLVideoElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, width, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, height, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    imp->drawImage(video, x, y, width, height, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> drawImage9Callback(const v8::Arguments& args)
{
    if (args.Length() < 9)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(HTMLVideoElement*, video, V8HTMLVideoElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8HTMLVideoElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, sx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sw, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sh, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dw, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 7, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dh, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 8, DefaultIsUndefined)->NumberValue()));
    imp->drawImage(video, sx, sy, sw, sh, dx, dy, dw, dh, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> drawImageCallback(const v8::Arguments& args)
{
    if ((args.Length() == 3 && (args[0]->IsNull() || V8HTMLImageElement::HasInstance(args[0]))))
        return drawImage1Callback(args);
    if ((args.Length() == 5 && (args[0]->IsNull() || V8HTMLImageElement::HasInstance(args[0]))))
        return drawImage2Callback(args);
    if ((args.Length() == 9 && (args[0]->IsNull() || V8HTMLImageElement::HasInstance(args[0]))))
        return drawImage3Callback(args);
    if ((args.Length() == 3 && (args[0]->IsNull() || V8HTMLCanvasElement::HasInstance(args[0]))))
        return drawImage4Callback(args);
    if ((args.Length() == 5 && (args[0]->IsNull() || V8HTMLCanvasElement::HasInstance(args[0]))))
        return drawImage5Callback(args);
    if ((args.Length() == 9 && (args[0]->IsNull() || V8HTMLCanvasElement::HasInstance(args[0]))))
        return drawImage6Callback(args);
    if ((args.Length() == 3 && (args[0]->IsNull() || V8HTMLVideoElement::HasInstance(args[0]))))
        return drawImage7Callback(args);
    if ((args.Length() == 5 && (args[0]->IsNull() || V8HTMLVideoElement::HasInstance(args[0]))))
        return drawImage8Callback(args);
    if ((args.Length() == 9 && (args[0]->IsNull() || V8HTMLVideoElement::HasInstance(args[0]))))
        return drawImage9Callback(args);
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> drawImageFromRectCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(HTMLImageElement*, image, V8HTMLImageElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8HTMLImageElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    if (args.Length() <= 1) {
        imp->drawImageFromRect(image);
        return v8Undefined();
    }
    V8TRYCATCH(float, sx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 2) {
        imp->drawImageFromRect(image, sx);
        return v8Undefined();
    }
    V8TRYCATCH(float, sy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 3) {
        imp->drawImageFromRect(image, sx, sy);
        return v8Undefined();
    }
    V8TRYCATCH(float, sw, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 4) {
        imp->drawImageFromRect(image, sx, sy, sw);
        return v8Undefined();
    }
    V8TRYCATCH(float, sh, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 5) {
        imp->drawImageFromRect(image, sx, sy, sw, sh);
        return v8Undefined();
    }
    V8TRYCATCH(float, dx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 6) {
        imp->drawImageFromRect(image, sx, sy, sw, sh, dx);
        return v8Undefined();
    }
    V8TRYCATCH(float, dy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 7) {
        imp->drawImageFromRect(image, sx, sy, sw, sh, dx, dy);
        return v8Undefined();
    }
    V8TRYCATCH(float, dw, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 7, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 8) {
        imp->drawImageFromRect(image, sx, sy, sw, sh, dx, dy, dw);
        return v8Undefined();
    }
    V8TRYCATCH(float, dh, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 8, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 9) {
        imp->drawImageFromRect(image, sx, sy, sw, sh, dx, dy, dw, dh);
        return v8Undefined();
    }
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, compositeOperation, MAYBE_MISSING_PARAMETER(args, 9, DefaultIsUndefined));
    imp->drawImageFromRect(image, sx, sy, sw, sh, dx, dy, dw, dh, compositeOperation);
    return v8Undefined();
}

static v8::Handle<v8::Value> setShadow1Callback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, width, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, height, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, blur, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 3) {
        imp->setShadow(width, height, blur);
        return v8Undefined();
    }
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, color, MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined));
    if (args.Length() <= 4) {
        imp->setShadow(width, height, blur, color);
        return v8Undefined();
    }
    V8TRYCATCH(float, alpha, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    imp->setShadow(width, height, blur, color, alpha);
    return v8Undefined();
}

static v8::Handle<v8::Value> setShadow2Callback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, width, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, height, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, blur, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, grayLevel, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    if (args.Length() <= 4) {
        imp->setShadow(width, height, blur, grayLevel);
        return v8Undefined();
    }
    V8TRYCATCH(float, alpha, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    imp->setShadow(width, height, blur, grayLevel, alpha);
    return v8Undefined();
}

static v8::Handle<v8::Value> setShadow3Callback(const v8::Arguments& args)
{
    if (args.Length() < 7)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, width, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, height, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, blur, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, r, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, g, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, b, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, a, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)->NumberValue()));
    imp->setShadow(width, height, blur, r, g, b, a);
    return v8Undefined();
}

static v8::Handle<v8::Value> setShadow4Callback(const v8::Arguments& args)
{
    if (args.Length() < 8)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    V8TRYCATCH(float, width, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, height, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, blur, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, c, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, m, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, k, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, a, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 7, DefaultIsUndefined)->NumberValue()));
    imp->setShadow(width, height, blur, c, m, y, k, a);
    return v8Undefined();
}

static v8::Handle<v8::Value> setShadowCallback(const v8::Arguments& args)
{
    if (args.Length() == 3 || (args.Length() == 4 && (args[3]->IsNull() || args[3]->IsUndefined() || args[3]->IsString() || args[3]->IsObject())) || (args.Length() == 5 && (args[3]->IsNull() || args[3]->IsUndefined() || args[3]->IsString() || args[3]->IsObject())))
        return setShadow1Callback(args);
    if (args.Length() == 4 || args.Length() == 5)
        return setShadow2Callback(args);
    if (args.Length() == 7)
        return setShadow3Callback(args);
    if (args.Length() == 8)
        return setShadow4Callback(args);
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> putImageData1Callback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(ImageData*, imagedata, V8ImageData::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8ImageData::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, dx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    imp->putImageData(imagedata, dx, dy, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> putImageData2Callback(const v8::Arguments& args)
{
    if (args.Length() < 7)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(ImageData*, imagedata, V8ImageData::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8ImageData::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, dx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dirtyX, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dirtyY, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dirtyWidth, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dirtyHeight, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)->NumberValue()));
    imp->putImageData(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> putImageDataCallback(const v8::Arguments& args)
{
    if ((args.Length() == 3 && (args[0]->IsNull() || V8ImageData::HasInstance(args[0]))))
        return putImageData1Callback(args);
    if ((args.Length() == 7 && (args[0]->IsNull() || V8ImageData::HasInstance(args[0]))))
        return putImageData2Callback(args);
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> webkitPutImageDataHD1Callback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(ImageData*, imagedata, V8ImageData::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8ImageData::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, dx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    imp->webkitPutImageDataHD(imagedata, dx, dy, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> webkitPutImageDataHD2Callback(const v8::Arguments& args)
{
    if (args.Length() < 7)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(ImageData*, imagedata, V8ImageData::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8ImageData::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, dx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dirtyX, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dirtyY, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dirtyWidth, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, dirtyHeight, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)->NumberValue()));
    imp->webkitPutImageDataHD(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> webkitPutImageDataHDCallback(const v8::Arguments& args)
{
    if ((args.Length() == 3 && (args[0]->IsNull() || V8ImageData::HasInstance(args[0]))))
        return webkitPutImageDataHD1Callback(args);
    if ((args.Length() == 7 && (args[0]->IsNull() || V8ImageData::HasInstance(args[0]))))
        return webkitPutImageDataHD2Callback(args);
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> createPattern1Callback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(HTMLCanvasElement*, canvas, V8HTMLCanvasElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8HTMLCanvasElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, repetitionType, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    RefPtr<CanvasPattern> result = imp->createPattern(canvas, repetitionType, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createPattern2Callback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(HTMLImageElement*, image, V8HTMLImageElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8HTMLImageElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, repetitionType, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    RefPtr<CanvasPattern> result = imp->createPattern(image, repetitionType, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createPatternCallback(const v8::Arguments& args)
{
    if ((args.Length() == 2 && (args[0]->IsNull() || V8HTMLCanvasElement::HasInstance(args[0]))))
        return createPattern1Callback(args);
    if ((args.Length() == 2 && (args[0]->IsNull() || V8HTMLImageElement::HasInstance(args[0]))))
        return createPattern2Callback(args);
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> createImageData1Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(ImageData*, imagedata, V8ImageData::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8ImageData::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    RefPtr<ImageData> result = imp->createImageData(imagedata, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createImageData2Callback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(float, sw, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sh, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    RefPtr<ImageData> result = imp->createImageData(sw, sh, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createImageDataCallback(const v8::Arguments& args)
{
    if ((args.Length() == 1 && (args[0]->IsNull() || V8ImageData::HasInstance(args[0]))))
        return createImageData1Callback(args);
    if (args.Length() == 2)
        return createImageData2Callback(args);
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> getImageDataCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(float, sx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sw, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sh, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    RefPtr<ImageData> result = imp->getImageData(sx, sy, sw, sh, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> webkitGetImageDataHDCallback(const v8::Arguments& args)
{
    CanvasRenderingContext2D* imp = V8CanvasRenderingContext2D::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(float, sx, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sy, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sw, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, sh, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    RefPtr<ImageData> result = imp->webkitGetImageDataHD(sx, sy, sw, sh, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace CanvasRenderingContext2DV8Internal

static const V8DOMConfiguration::BatchedAttribute V8CanvasRenderingContext2DAttrs[] = {
    // Attribute 'globalAlpha' (Type: 'attribute' ExtAttr: '')
    {"globalAlpha", CanvasRenderingContext2DV8Internal::globalAlphaAttrGetter, CanvasRenderingContext2DV8Internal::globalAlphaAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'globalCompositeOperation' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"globalCompositeOperation", CanvasRenderingContext2DV8Internal::globalCompositeOperationAttrGetter, CanvasRenderingContext2DV8Internal::globalCompositeOperationAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'lineWidth' (Type: 'attribute' ExtAttr: '')
    {"lineWidth", CanvasRenderingContext2DV8Internal::lineWidthAttrGetter, CanvasRenderingContext2DV8Internal::lineWidthAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'lineCap' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"lineCap", CanvasRenderingContext2DV8Internal::lineCapAttrGetter, CanvasRenderingContext2DV8Internal::lineCapAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'lineJoin' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"lineJoin", CanvasRenderingContext2DV8Internal::lineJoinAttrGetter, CanvasRenderingContext2DV8Internal::lineJoinAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'miterLimit' (Type: 'attribute' ExtAttr: '')
    {"miterLimit", CanvasRenderingContext2DV8Internal::miterLimitAttrGetter, CanvasRenderingContext2DV8Internal::miterLimitAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'shadowOffsetX' (Type: 'attribute' ExtAttr: '')
    {"shadowOffsetX", CanvasRenderingContext2DV8Internal::shadowOffsetXAttrGetter, CanvasRenderingContext2DV8Internal::shadowOffsetXAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'shadowOffsetY' (Type: 'attribute' ExtAttr: '')
    {"shadowOffsetY", CanvasRenderingContext2DV8Internal::shadowOffsetYAttrGetter, CanvasRenderingContext2DV8Internal::shadowOffsetYAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'shadowBlur' (Type: 'attribute' ExtAttr: '')
    {"shadowBlur", CanvasRenderingContext2DV8Internal::shadowBlurAttrGetter, CanvasRenderingContext2DV8Internal::shadowBlurAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'shadowColor' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"shadowColor", CanvasRenderingContext2DV8Internal::shadowColorAttrGetter, CanvasRenderingContext2DV8Internal::shadowColorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'lineDashOffset' (Type: 'attribute' ExtAttr: '')
    {"lineDashOffset", CanvasRenderingContext2DV8Internal::lineDashOffsetAttrGetter, CanvasRenderingContext2DV8Internal::lineDashOffsetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'font' (Type: 'attribute' ExtAttr: '')
    {"font", CanvasRenderingContext2DV8Internal::fontAttrGetter, CanvasRenderingContext2DV8Internal::fontAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'textAlign' (Type: 'attribute' ExtAttr: '')
    {"textAlign", CanvasRenderingContext2DV8Internal::textAlignAttrGetter, CanvasRenderingContext2DV8Internal::textAlignAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'textBaseline' (Type: 'attribute' ExtAttr: '')
    {"textBaseline", CanvasRenderingContext2DV8Internal::textBaselineAttrGetter, CanvasRenderingContext2DV8Internal::textBaselineAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'strokeStyle' (Type: 'attribute' ExtAttr: 'Custom')
    {"strokeStyle", V8CanvasRenderingContext2D::strokeStyleAccessorGetter, V8CanvasRenderingContext2D::strokeStyleAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'fillStyle' (Type: 'attribute' ExtAttr: 'Custom')
    {"fillStyle", V8CanvasRenderingContext2D::fillStyleAccessorGetter, V8CanvasRenderingContext2D::fillStyleAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'webkitBackingStorePixelRatio' (Type: 'readonly attribute' ExtAttr: '')
    {"webkitBackingStorePixelRatio", CanvasRenderingContext2DV8Internal::webkitBackingStorePixelRatioAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'webkitImageSmoothingEnabled' (Type: 'attribute' ExtAttr: '')
    {"webkitImageSmoothingEnabled", CanvasRenderingContext2DV8Internal::webkitImageSmoothingEnabledAttrGetter, CanvasRenderingContext2DV8Internal::webkitImageSmoothingEnabledAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8CanvasRenderingContext2DCallbacks[] = {
    {"save", CanvasRenderingContext2DV8Internal::saveCallback},
    {"restore", CanvasRenderingContext2DV8Internal::restoreCallback},
    {"scale", CanvasRenderingContext2DV8Internal::scaleCallback},
    {"rotate", CanvasRenderingContext2DV8Internal::rotateCallback},
    {"translate", CanvasRenderingContext2DV8Internal::translateCallback},
    {"transform", CanvasRenderingContext2DV8Internal::transformCallback},
    {"setTransform", CanvasRenderingContext2DV8Internal::setTransformCallback},
    {"createLinearGradient", CanvasRenderingContext2DV8Internal::createLinearGradientCallback},
    {"createRadialGradient", CanvasRenderingContext2DV8Internal::createRadialGradientCallback},
    {"getLineDash", CanvasRenderingContext2DV8Internal::getLineDashCallback},
    {"clearRect", CanvasRenderingContext2DV8Internal::clearRectCallback},
    {"fillRect", CanvasRenderingContext2DV8Internal::fillRectCallback},
    {"beginPath", CanvasRenderingContext2DV8Internal::beginPathCallback},
    {"closePath", CanvasRenderingContext2DV8Internal::closePathCallback},
    {"moveTo", CanvasRenderingContext2DV8Internal::moveToCallback},
    {"lineTo", CanvasRenderingContext2DV8Internal::lineToCallback},
    {"quadraticCurveTo", CanvasRenderingContext2DV8Internal::quadraticCurveToCallback},
    {"bezierCurveTo", CanvasRenderingContext2DV8Internal::bezierCurveToCallback},
    {"arcTo", CanvasRenderingContext2DV8Internal::arcToCallback},
    {"rect", CanvasRenderingContext2DV8Internal::rectCallback},
    {"arc", CanvasRenderingContext2DV8Internal::arcCallback},
    {"fill", CanvasRenderingContext2DV8Internal::fillCallback},
    {"stroke", CanvasRenderingContext2DV8Internal::strokeCallback},
    {"clip", CanvasRenderingContext2DV8Internal::clipCallback},
    {"isPointInPath", CanvasRenderingContext2DV8Internal::isPointInPathCallback},
    {"measureText", CanvasRenderingContext2DV8Internal::measureTextCallback},
    {"setAlpha", CanvasRenderingContext2DV8Internal::setAlphaCallback},
    {"setCompositeOperation", CanvasRenderingContext2DV8Internal::setCompositeOperationCallback},
    {"setLineWidth", CanvasRenderingContext2DV8Internal::setLineWidthCallback},
    {"setLineCap", CanvasRenderingContext2DV8Internal::setLineCapCallback},
    {"setLineJoin", CanvasRenderingContext2DV8Internal::setLineJoinCallback},
    {"setMiterLimit", CanvasRenderingContext2DV8Internal::setMiterLimitCallback},
    {"clearShadow", CanvasRenderingContext2DV8Internal::clearShadowCallback},
    {"fillText", CanvasRenderingContext2DV8Internal::fillTextCallback},
    {"strokeText", CanvasRenderingContext2DV8Internal::strokeTextCallback},
    {"setStrokeColor", CanvasRenderingContext2DV8Internal::setStrokeColorCallback},
    {"setFillColor", CanvasRenderingContext2DV8Internal::setFillColorCallback},
    {"strokeRect", CanvasRenderingContext2DV8Internal::strokeRectCallback},
    {"drawImage", CanvasRenderingContext2DV8Internal::drawImageCallback},
    {"drawImageFromRect", CanvasRenderingContext2DV8Internal::drawImageFromRectCallback},
    {"setShadow", CanvasRenderingContext2DV8Internal::setShadowCallback},
    {"putImageData", CanvasRenderingContext2DV8Internal::putImageDataCallback},
    {"webkitPutImageDataHD", CanvasRenderingContext2DV8Internal::webkitPutImageDataHDCallback},
    {"createPattern", CanvasRenderingContext2DV8Internal::createPatternCallback},
    {"createImageData", CanvasRenderingContext2DV8Internal::createImageDataCallback},
    {"getImageData", CanvasRenderingContext2DV8Internal::getImageDataCallback},
    {"webkitGetImageDataHD", CanvasRenderingContext2DV8Internal::webkitGetImageDataHDCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8CanvasRenderingContext2DTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "CanvasRenderingContext2D", V8CanvasRenderingContext::GetTemplate(), V8CanvasRenderingContext2D::internalFieldCount,
        V8CanvasRenderingContext2DAttrs, WTF_ARRAY_LENGTH(V8CanvasRenderingContext2DAttrs),
        V8CanvasRenderingContext2DCallbacks, WTF_ARRAY_LENGTH(V8CanvasRenderingContext2DCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'setLineDash'
    const int setLineDashArgc = 1;
    v8::Handle<v8::FunctionTemplate> setLineDashArgv[setLineDashArgc] = { v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> setLineDashSignature = v8::Signature::New(desc, setLineDashArgc, setLineDashArgv);
    proto->Set(v8::String::NewSymbol("setLineDash"), v8::FunctionTemplate::New(CanvasRenderingContext2DV8Internal::setLineDashCallback, v8Undefined(), setLineDashSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8CanvasRenderingContext2D::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8CanvasRenderingContext2D::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8CanvasRenderingContext2DTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8CanvasRenderingContext2D::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8CanvasRenderingContext2D::createWrapper(PassRefPtr<CanvasRenderingContext2D> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<CanvasRenderingContext*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8CanvasRenderingContext2D::derefObject(void* object)
{
    static_cast<CanvasRenderingContext2D*>(object)->deref();
}

} // namespace WebCore
