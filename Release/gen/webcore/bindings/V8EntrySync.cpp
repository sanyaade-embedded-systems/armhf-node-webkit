/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8EntrySync.h"

#if ENABLE(FILE_SYSTEM)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMFileSystemSync.h"
#include "V8DOMWrapper.h"
#include "V8DirectoryEntrySync.h"
#include "V8Metadata.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8EntrySync::info = { V8EntrySync::GetTemplate, V8EntrySync::derefObject, 0, 0, V8EntrySync::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace EntrySyncV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> isFileAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    EntrySync* imp = V8EntrySync::toNative(info.Holder());
    return v8Boolean(imp->isFile(), info.GetIsolate());
}

static v8::Handle<v8::Value> isDirectoryAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    EntrySync* imp = V8EntrySync::toNative(info.Holder());
    return v8Boolean(imp->isDirectory(), info.GetIsolate());
}

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    EntrySync* imp = V8EntrySync::toNative(info.Holder());
    return v8String(imp->name(), info.GetIsolate());
}

static v8::Handle<v8::Value> fullPathAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    EntrySync* imp = V8EntrySync::toNative(info.Holder());
    return v8String(imp->fullPath(), info.GetIsolate());
}

static v8::Handle<v8::Value> filesystemAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    EntrySync* imp = V8EntrySync::toNative(info.Holder());
    RefPtr<DOMFileSystemSync> result = imp->filesystem();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "filesystem", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> getMetadataCallback(const v8::Arguments& args)
{
    EntrySync* imp = V8EntrySync::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    RefPtr<Metadata> result = imp->getMetadata(ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> moveToCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    EntrySync* imp = V8EntrySync::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(DirectoryEntrySync*, parent, V8DirectoryEntrySync::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8DirectoryEntrySync::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithUndefinedOrNullCheck>, name, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    RefPtr<EntrySync> result = imp->moveTo(parent, name, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> copyToCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    EntrySync* imp = V8EntrySync::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(DirectoryEntrySync*, parent, V8DirectoryEntrySync::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8DirectoryEntrySync::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithUndefinedOrNullCheck>, name, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    RefPtr<EntrySync> result = imp->copyTo(parent, name, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> toURLCallback(const v8::Arguments& args)
{
    EntrySync* imp = V8EntrySync::toNative(args.Holder());
    return v8String(imp->toURL(), args.GetIsolate());
}

static v8::Handle<v8::Value> removeCallback(const v8::Arguments& args)
{
    EntrySync* imp = V8EntrySync::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->remove(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getParentCallback(const v8::Arguments& args)
{
    EntrySync* imp = V8EntrySync::toNative(args.Holder());
    return toV8(imp->getParent(), args.Holder(), args.GetIsolate());
}

} // namespace EntrySyncV8Internal

static const V8DOMConfiguration::BatchedAttribute V8EntrySyncAttrs[] = {
    // Attribute 'isFile' (Type: 'readonly attribute' ExtAttr: '')
    {"isFile", EntrySyncV8Internal::isFileAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'isDirectory' (Type: 'readonly attribute' ExtAttr: '')
    {"isDirectory", EntrySyncV8Internal::isDirectoryAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'name' (Type: 'readonly attribute' ExtAttr: '')
    {"name", EntrySyncV8Internal::nameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'fullPath' (Type: 'readonly attribute' ExtAttr: '')
    {"fullPath", EntrySyncV8Internal::fullPathAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'filesystem' (Type: 'readonly attribute' ExtAttr: '')
    {"filesystem", EntrySyncV8Internal::filesystemAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8EntrySyncCallbacks[] = {
    {"getMetadata", EntrySyncV8Internal::getMetadataCallback},
    {"toURL", EntrySyncV8Internal::toURLCallback},
    {"remove", EntrySyncV8Internal::removeCallback},
    {"getParent", EntrySyncV8Internal::getParentCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8EntrySyncTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "EntrySync", v8::Persistent<v8::FunctionTemplate>(), V8EntrySync::internalFieldCount,
        V8EntrySyncAttrs, WTF_ARRAY_LENGTH(V8EntrySyncAttrs),
        V8EntrySyncCallbacks, WTF_ARRAY_LENGTH(V8EntrySyncCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'moveTo'
    const int moveToArgc = 2;
    v8::Handle<v8::FunctionTemplate> moveToArgv[moveToArgc] = { V8DirectoryEntrySync::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> moveToSignature = v8::Signature::New(desc, moveToArgc, moveToArgv);
    proto->Set(v8::String::NewSymbol("moveTo"), v8::FunctionTemplate::New(EntrySyncV8Internal::moveToCallback, v8Undefined(), moveToSignature));

    // Custom Signature 'copyTo'
    const int copyToArgc = 2;
    v8::Handle<v8::FunctionTemplate> copyToArgv[copyToArgc] = { V8DirectoryEntrySync::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> copyToSignature = v8::Signature::New(desc, copyToArgc, copyToArgv);
    proto->Set(v8::String::NewSymbol("copyTo"), v8::FunctionTemplate::New(EntrySyncV8Internal::copyToCallback, v8Undefined(), copyToSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8EntrySync::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8EntrySync::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8EntrySyncTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8EntrySync::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8EntrySync::createWrapper(PassRefPtr<EntrySync> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8EntrySync::derefObject(void* object)
{
    static_cast<EntrySync*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(FILE_SYSTEM)
