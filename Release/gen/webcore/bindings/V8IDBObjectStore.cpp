/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8IDBObjectStore.h"

#if ENABLE(INDEXED_DATABASE)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "Dictionary.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "IDBBindingUtilities.h"
#include "IDBKey.h"
#include "RuntimeEnabledFeatures.h"
#include "ScriptValue.h"
#include "V8Binding.h"
#include "V8DOMStringList.h"
#include "V8DOMWrapper.h"
#include "V8IDBAny.h"
#include "V8IDBIndex.h"
#include "V8IDBKeyRange.h"
#include "V8IDBRequest.h"
#include "V8IDBTransaction.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8IDBObjectStore::info = { V8IDBObjectStore::GetTemplate, V8IDBObjectStore::derefObject, 0, 0, V8IDBObjectStore::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace IDBObjectStoreV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    IDBObjectStore* imp = V8IDBObjectStore::toNative(info.Holder());
    return v8StringOrNull(imp->name(), info.GetIsolate());
}

static v8::Handle<v8::Value> keyPathAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    IDBObjectStore* imp = V8IDBObjectStore::toNative(info.Holder());
    RefPtr<IDBAny> result = imp->keyPathAny();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "keyPath", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> indexNamesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    IDBObjectStore* imp = V8IDBObjectStore::toNative(info.Holder());
    RefPtr<DOMStringList> result = imp->indexNames();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "indexNames", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> transactionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    IDBObjectStore* imp = V8IDBObjectStore::toNative(info.Holder());
    RefPtr<IDBTransaction> result = imp->transaction();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "transaction", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> autoIncrementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    IDBObjectStore* imp = V8IDBObjectStore::toNative(info.Holder());
    return v8Boolean(imp->autoIncrement(), info.GetIsolate());
}

static v8::Handle<v8::Value> putCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(ScriptValue, value, ScriptValue(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (args.Length() <= 1) {
        ScriptState* currentState = ScriptState::current();
        if (!currentState)
            return v8Undefined();
        ScriptState& state = *currentState;
        RefPtr<IDBRequest> result = imp->put(&state, value, ec);
        if (UNLIKELY(ec))
            goto fail;
        if (state.hadException()) {
            v8::Local<v8::Value> exception = state.exception();
            state.clearException();
            return throwError(exception, args.GetIsolate());
        }
        return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    V8TRYCATCH(RefPtr<IDBKey>, key, createIDBKeyFromValue(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    RefPtr<IDBRequest> result = imp->put(&state, value, key.get(), ec);
    if (UNLIKELY(ec))
        goto fail;
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> addCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(ScriptValue, value, ScriptValue(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (args.Length() <= 1) {
        ScriptState* currentState = ScriptState::current();
        if (!currentState)
            return v8Undefined();
        ScriptState& state = *currentState;
        RefPtr<IDBRequest> result = imp->add(&state, value, ec);
        if (UNLIKELY(ec))
            goto fail;
        if (state.hadException()) {
            v8::Local<v8::Value> exception = state.exception();
            state.clearException();
            return throwError(exception, args.GetIsolate());
        }
        return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    V8TRYCATCH(RefPtr<IDBKey>, key, createIDBKeyFromValue(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    RefPtr<IDBRequest> result = imp->add(&state, value, key.get(), ec);
    if (UNLIKELY(ec))
        goto fail;
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> delete1Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(IDBKeyRange*, keyRange, V8IDBKeyRange::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8IDBKeyRange::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    RefPtr<IDBRequest> result = imp->deleteFunction(scriptContext, keyRange, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> delete2Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(RefPtr<IDBKey>, key, createIDBKeyFromValue(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    RefPtr<IDBRequest> result = imp->deleteFunction(scriptContext, key.get(), ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> deleteCallback(const v8::Arguments& args)
{
    if ((args.Length() == 1 && (args[0]->IsNull() || V8IDBKeyRange::HasInstance(args[0]))))
        return delete1Callback(args);
    if (args.Length() == 1)
        return delete2Callback(args);
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> clearCallback(const v8::Arguments& args)
{
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    RefPtr<IDBRequest> result = imp->clear(scriptContext, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> get1Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(IDBKeyRange*, key, V8IDBKeyRange::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8IDBKeyRange::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    RefPtr<IDBRequest> result = imp->get(scriptContext, key, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> get2Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(RefPtr<IDBKey>, key, createIDBKeyFromValue(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    RefPtr<IDBRequest> result = imp->get(scriptContext, key.get(), ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getCallback(const v8::Arguments& args)
{
    if ((args.Length() == 1 && (args[0]->IsNull() || V8IDBKeyRange::HasInstance(args[0]))))
        return get1Callback(args);
    if (args.Length() == 1)
        return get2Callback(args);
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> openCursor1Callback(const v8::Arguments& args)
{
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        RefPtr<IDBRequest> result = imp->openCursor(scriptContext, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    V8TRYCATCH(IDBKeyRange*, range, V8IDBKeyRange::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8IDBKeyRange::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    if (args.Length() <= 1) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        RefPtr<IDBRequest> result = imp->openCursor(scriptContext, range, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, direction, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    RefPtr<IDBRequest> result = imp->openCursor(scriptContext, range, direction, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> openCursor2Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(RefPtr<IDBKey>, key, createIDBKeyFromValue(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (args.Length() <= 1) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        RefPtr<IDBRequest> result = imp->openCursor(scriptContext, key.get(), ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, direction, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    RefPtr<IDBRequest> result = imp->openCursor(scriptContext, key.get(), direction, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> openCursorCallback(const v8::Arguments& args)
{
    if (args.Length() == 0 || (args.Length() == 1 && (args[0]->IsNull() || V8IDBKeyRange::HasInstance(args[0]))) || (args.Length() == 2 && (args[0]->IsNull() || V8IDBKeyRange::HasInstance(args[0]))))
        return openCursor1Callback(args);
    if (args.Length() == 1 || args.Length() == 2)
        return openCursor2Callback(args);
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> createIndex1Callback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(Vector<String>, keyPath, toNativeArray<String>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(Dictionary, options, Dictionary(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined), args.GetIsolate()));
    if (!options.isUndefinedOrNull() && !options.isObject())
        return throwTypeError("Not an object.", args.GetIsolate());
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    RefPtr<IDBIndex> result = imp->createIndex(scriptContext, name, keyPath, options, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createIndex2Callback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, keyPath, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    V8TRYCATCH(Dictionary, options, Dictionary(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined), args.GetIsolate()));
    if (!options.isUndefinedOrNull() && !options.isObject())
        return throwTypeError("Not an object.", args.GetIsolate());
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    RefPtr<IDBIndex> result = imp->createIndex(scriptContext, name, keyPath, options, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createIndexCallback(const v8::Arguments& args)
{
    if ((args.Length() == 2 && (args[1]->IsArray())) || (args.Length() == 3 && (args[1]->IsArray())))
        return createIndex1Callback(args);
    if (args.Length() == 2 || args.Length() == 3)
        return createIndex2Callback(args);
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> indexCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    RefPtr<IDBIndex> result = imp->index(name, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> deleteIndexCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->deleteIndex(name, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> count1Callback(const v8::Arguments& args)
{
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        ScriptExecutionContext* scriptContext = getScriptExecutionContext();
        RefPtr<IDBRequest> result = imp->count(scriptContext, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    V8TRYCATCH(IDBKeyRange*, range, V8IDBKeyRange::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8IDBKeyRange::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    RefPtr<IDBRequest> result = imp->count(scriptContext, range, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> count2Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    IDBObjectStore* imp = V8IDBObjectStore::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(RefPtr<IDBKey>, key, createIDBKeyFromValue(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    RefPtr<IDBRequest> result = imp->count(scriptContext, key.get(), ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> countCallback(const v8::Arguments& args)
{
    if (args.Length() == 0 || (args.Length() == 1 && (args[0]->IsNull() || V8IDBKeyRange::HasInstance(args[0]))))
        return count1Callback(args);
    if (args.Length() == 1)
        return count2Callback(args);
    return throwTypeError(0, args.GetIsolate());
}

} // namespace IDBObjectStoreV8Internal

static const V8DOMConfiguration::BatchedAttribute V8IDBObjectStoreAttrs[] = {
    // Attribute 'name' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"name", IDBObjectStoreV8Internal::nameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'keyPath' (Type: 'readonly attribute' ExtAttr: 'ImplementedAs')
    {"keyPath", IDBObjectStoreV8Internal::keyPathAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'indexNames' (Type: 'readonly attribute' ExtAttr: '')
    {"indexNames", IDBObjectStoreV8Internal::indexNamesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'transaction' (Type: 'readonly attribute' ExtAttr: '')
    {"transaction", IDBObjectStoreV8Internal::transactionAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'autoIncrement' (Type: 'readonly attribute' ExtAttr: '')
    {"autoIncrement", IDBObjectStoreV8Internal::autoIncrementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8IDBObjectStoreCallbacks[] = {
    {"put", IDBObjectStoreV8Internal::putCallback},
    {"add", IDBObjectStoreV8Internal::addCallback},
    {"delete", IDBObjectStoreV8Internal::deleteCallback},
    {"clear", IDBObjectStoreV8Internal::clearCallback},
    {"get", IDBObjectStoreV8Internal::getCallback},
    {"openCursor", IDBObjectStoreV8Internal::openCursorCallback},
    {"createIndex", IDBObjectStoreV8Internal::createIndexCallback},
    {"index", IDBObjectStoreV8Internal::indexCallback},
    {"deleteIndex", IDBObjectStoreV8Internal::deleteIndexCallback},
    {"count", IDBObjectStoreV8Internal::countCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8IDBObjectStoreTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "IDBObjectStore", v8::Persistent<v8::FunctionTemplate>(), V8IDBObjectStore::internalFieldCount,
        V8IDBObjectStoreAttrs, WTF_ARRAY_LENGTH(V8IDBObjectStoreAttrs),
        V8IDBObjectStoreCallbacks, WTF_ARRAY_LENGTH(V8IDBObjectStoreCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8IDBObjectStore::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8IDBObjectStore::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8IDBObjectStoreTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8IDBObjectStore::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8IDBObjectStore::createWrapper(PassRefPtr<IDBObjectStore> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8IDBObjectStore::derefObject(void* object)
{
    static_cast<IDBObjectStore*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(INDEXED_DATABASE)
