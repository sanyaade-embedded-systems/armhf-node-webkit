/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8TouchEvent.h"

#if ENABLE(TOUCH_EVENTS)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWindow.h"
#include "V8DOMWrapper.h"
#include "V8TouchList.h"
#include "V8UIEvent.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8TouchEvent::info = { V8TouchEvent::GetTemplate, V8TouchEvent::derefObject, 0, 0, V8TouchEvent::installPerContextPrototypeProperties, &V8UIEvent::info, WrapperTypeObjectPrototype };

namespace TouchEventV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> touchesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TouchEvent* imp = V8TouchEvent::toNative(info.Holder());
    RefPtr<TouchList> result = imp->touches();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "touches", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> targetTouchesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TouchEvent* imp = V8TouchEvent::toNative(info.Holder());
    RefPtr<TouchList> result = imp->targetTouches();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "targetTouches", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> changedTouchesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TouchEvent* imp = V8TouchEvent::toNative(info.Holder());
    RefPtr<TouchList> result = imp->changedTouches();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "changedTouches", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> ctrlKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TouchEvent* imp = V8TouchEvent::toNative(info.Holder());
    return v8Boolean(imp->ctrlKey(), info.GetIsolate());
}

static v8::Handle<v8::Value> shiftKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TouchEvent* imp = V8TouchEvent::toNative(info.Holder());
    return v8Boolean(imp->shiftKey(), info.GetIsolate());
}

static v8::Handle<v8::Value> altKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TouchEvent* imp = V8TouchEvent::toNative(info.Holder());
    return v8Boolean(imp->altKey(), info.GetIsolate());
}

static v8::Handle<v8::Value> metaKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    TouchEvent* imp = V8TouchEvent::toNative(info.Holder());
    return v8Boolean(imp->metaKey(), info.GetIsolate());
}

static v8::Handle<v8::Value> initTouchEventCallback(const v8::Arguments& args)
{
    TouchEvent* imp = V8TouchEvent::toNative(args.Holder());
    V8TRYCATCH(TouchList*, touches, V8TouchList::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8TouchList::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(TouchList*, targetTouches, V8TouchList::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8TouchList::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    V8TRYCATCH(TouchList*, changedTouches, V8TouchList::HasInstance(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)) ? V8TouchList::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined))) : 0);
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, type, MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined));
    V8TRYCATCH(DOMWindow*, view, V8DOMWindow::HasInstance(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)) ? V8DOMWindow::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined))) : 0);
    V8TRYCATCH(int, screenX, toInt32(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)));
    V8TRYCATCH(int, screenY, toInt32(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)));
    V8TRYCATCH(int, clientX, toInt32(MAYBE_MISSING_PARAMETER(args, 7, DefaultIsUndefined)));
    V8TRYCATCH(int, clientY, toInt32(MAYBE_MISSING_PARAMETER(args, 8, DefaultIsUndefined)));
    V8TRYCATCH(bool, ctrlKey, MAYBE_MISSING_PARAMETER(args, 9, DefaultIsUndefined)->BooleanValue());
    V8TRYCATCH(bool, altKey, MAYBE_MISSING_PARAMETER(args, 10, DefaultIsUndefined)->BooleanValue());
    V8TRYCATCH(bool, shiftKey, MAYBE_MISSING_PARAMETER(args, 11, DefaultIsUndefined)->BooleanValue());
    V8TRYCATCH(bool, metaKey, MAYBE_MISSING_PARAMETER(args, 12, DefaultIsUndefined)->BooleanValue());
    imp->initTouchEvent(touches, targetTouches, changedTouches, type, view, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey);
    return v8Undefined();
}

} // namespace TouchEventV8Internal

static const V8DOMConfiguration::BatchedAttribute V8TouchEventAttrs[] = {
    // Attribute 'touches' (Type: 'readonly attribute' ExtAttr: '')
    {"touches", TouchEventV8Internal::touchesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'targetTouches' (Type: 'readonly attribute' ExtAttr: '')
    {"targetTouches", TouchEventV8Internal::targetTouchesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'changedTouches' (Type: 'readonly attribute' ExtAttr: '')
    {"changedTouches", TouchEventV8Internal::changedTouchesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'ctrlKey' (Type: 'readonly attribute' ExtAttr: '')
    {"ctrlKey", TouchEventV8Internal::ctrlKeyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'shiftKey' (Type: 'readonly attribute' ExtAttr: '')
    {"shiftKey", TouchEventV8Internal::shiftKeyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'altKey' (Type: 'readonly attribute' ExtAttr: '')
    {"altKey", TouchEventV8Internal::altKeyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'metaKey' (Type: 'readonly attribute' ExtAttr: '')
    {"metaKey", TouchEventV8Internal::metaKeyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8TouchEventTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "TouchEvent", V8UIEvent::GetTemplate(), V8TouchEvent::internalFieldCount,
        V8TouchEventAttrs, WTF_ARRAY_LENGTH(V8TouchEventAttrs),
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'initTouchEvent'
    const int initTouchEventArgc = 13;
    v8::Handle<v8::FunctionTemplate> initTouchEventArgv[initTouchEventArgc] = { V8TouchList::GetRawTemplate(), V8TouchList::GetRawTemplate(), V8TouchList::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), V8DOMWindow::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> initTouchEventSignature = v8::Signature::New(desc, initTouchEventArgc, initTouchEventArgv);
    proto->Set(v8::String::NewSymbol("initTouchEvent"), v8::FunctionTemplate::New(TouchEventV8Internal::initTouchEventCallback, v8Undefined(), initTouchEventSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8TouchEvent::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8TouchEvent::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8TouchEventTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8TouchEvent::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8TouchEvent::createWrapper(PassRefPtr<TouchEvent> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<Event*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8TouchEvent::derefObject(void* object)
{
    static_cast<TouchEvent*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(TOUCH_EVENTS)
