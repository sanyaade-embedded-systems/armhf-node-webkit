/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Document.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "StylePropertySet.h"
#include "V8AbstractEventListener.h"
#include "V8Attr.h"
#include "V8Binding.h"
#include "V8CDATASection.h"
#include "V8CSSStyleDeclaration.h"
#include "V8CanvasRenderingContext.h"
#include "V8Comment.h"
#include "V8DOMImplementation.h"
#include "V8DOMNamedFlowCollection.h"
#include "V8DOMSecurityPolicy.h"
#include "V8DOMSelection.h"
#include "V8DOMWindow.h"
#include "V8DOMWrapper.h"
#include "V8DocumentFragment.h"
#include "V8DocumentType.h"
#include "V8Element.h"
#include "V8EntityReference.h"
#include "V8Event.h"
#include "V8HTMLCollection.h"
#include "V8HTMLElement.h"
#include "V8HTMLHeadElement.h"
#include "V8Node.h"
#include "V8NodeIterator.h"
#include "V8NodeList.h"
#include "V8ProcessingInstruction.h"
#include "V8Range.h"
#include "V8StyleSheetList.h"
#include "V8Text.h"
#include "V8Touch.h"
#include "V8TreeWalker.h"
#include "V8XPathExpression.h"
#include "V8XPathNSResolver.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>
#include <wtf/text/WTFString.h>

namespace WebCore {

WrapperTypeInfo V8Document::info = { V8Document::GetTemplate, V8Document::derefObject, 0, 0, V8Document::installPerContextPrototypeProperties, &V8Node::info, WrapperTypeObjectPrototype };

namespace DocumentV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> doctypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->doctype(), info, imp);
}

static v8::Handle<v8::Value> implementationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->implementation(), info, imp);
}

static v8::Handle<v8::Value> documentElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->documentElement(), info, imp);
}

static v8::Handle<v8::Value> inputEncodingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->inputEncoding(), info.GetIsolate());
}

static v8::Handle<v8::Value> xmlEncodingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->xmlEncoding(), info.GetIsolate());
}

static v8::Handle<v8::Value> xmlVersionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->xmlVersion(), info.GetIsolate());
}

static void xmlVersionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setXMLVersion(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> xmlStandaloneAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8Boolean(imp->xmlStandalone(), info.GetIsolate());
}

static void xmlStandaloneAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    bool v = value->BooleanValue();
    ExceptionCode ec = 0;
    imp->setXMLStandalone(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> documentURIAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->documentURI(), info.GetIsolate());
}

static v8::Handle<v8::Value> defaultViewAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->defaultView(), info, imp);
}

static v8::Handle<v8::Value> styleSheetsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->styleSheets(), info, imp);
}

static v8::Handle<v8::Value> titleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->title(), info.GetIsolate());
}

static void titleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setTitle(v);
    return;
}

static v8::Handle<v8::Value> referrerAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->referrer(), info.GetIsolate());
}

static v8::Handle<v8::Value> domainAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->domain(), info.GetIsolate());
}

static void domainAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setDomain(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> URLAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->url(), info.GetIsolate());
}

static v8::Handle<v8::Value> cookieAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    ExceptionCode ec = 0;
    String v = imp->cookie(ec);
    if (UNLIKELY(ec))
        return setDOMException(ec, info.GetIsolate());
    return v8String(v, info.GetIsolate());
}

static void cookieAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setCookie(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> bodyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->body(), info, imp);
}

static void bodyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    HTMLElement* v = V8HTMLElement::HasInstance(value) ? V8HTMLElement::toNative(v8::Handle<v8::Object>::Cast(value)) : 0;
    ExceptionCode ec = 0;
    imp->setBody(WTF::getPtr(v), ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> headAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->head(), info, imp);
}

static v8::Handle<v8::Value> imagesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->images(), info, imp);
}

static v8::Handle<v8::Value> appletsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->applets(), info, imp);
}

static v8::Handle<v8::Value> linksAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->links(), info, imp);
}

static v8::Handle<v8::Value> formsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->forms(), info, imp);
}

static v8::Handle<v8::Value> anchorsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->anchors(), info, imp);
}

static v8::Handle<v8::Value> lastModifiedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->lastModified(), info.GetIsolate());
}

static v8::Handle<v8::Value> charsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrUndefined(imp->charset(), info.GetIsolate());
}

static void charsetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setCharset(v);
    return;
}

static v8::Handle<v8::Value> defaultCharsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrUndefined(imp->defaultCharset(), info.GetIsolate());
}

static v8::Handle<v8::Value> readyStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrUndefined(imp->readyState(), info.GetIsolate());
}

static v8::Handle<v8::Value> characterSetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->characterSet(), info.GetIsolate());
}

static v8::Handle<v8::Value> preferredStylesheetSetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->preferredStylesheetSet(), info.GetIsolate());
}

static v8::Handle<v8::Value> selectedStylesheetSetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->selectedStylesheetSet(), info.GetIsolate());
}

static void selectedStylesheetSetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setSelectedStylesheetSet(v);
    return;
}

static v8::Handle<v8::Value> compatModeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->compatMode(), info.GetIsolate());
}

static v8::Handle<v8::Value> webkitIsFullScreenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8Boolean(imp->webkitIsFullScreen(), info.GetIsolate());
}

static v8::Handle<v8::Value> webkitFullScreenKeyboardInputAllowedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8Boolean(imp->webkitFullScreenKeyboardInputAllowed(), info.GetIsolate());
}

static v8::Handle<v8::Value> webkitCurrentFullScreenElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->webkitCurrentFullScreenElement(), info, imp);
}

static v8::Handle<v8::Value> webkitFullscreenEnabledAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8Boolean(imp->webkitFullscreenEnabled(), info.GetIsolate());
}

static v8::Handle<v8::Value> webkitFullscreenElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->webkitFullscreenElement(), info, imp);
}

#if ENABLE(POINTER_LOCK)

static v8::Handle<v8::Value> webkitPointerLockElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->webkitPointerLockElement(), info, imp);
}

#endif // ENABLE(POINTER_LOCK)

static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnabort(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onblurAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onblur() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onblur())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onblurAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnblur(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnclick(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncontextmenuAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oncontextmenu() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncontextmenu())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oncontextmenuAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOncontextmenu(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondblclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondblclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondblclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondblclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndblclick(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondrag() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrag())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndrag(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndragend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragenterAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragenter() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragenter())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragenterAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndragenter(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragleaveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragleave() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragleave())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragleaveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndragleave(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndragover(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndragstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondropAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondrop() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrop())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondropAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOndrop(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onfocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onfocus() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onfocus())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onfocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnfocus(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oninputAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oninput() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninput())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oninputAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOninput(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oninvalidAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oninvalid() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninvalid())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oninvalidAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOninvalid(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeydownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onkeydown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeydown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onkeydownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnkeydown(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeypressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onkeypress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeypress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onkeypressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnkeypress(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeyupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onkeyup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeyup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onkeyupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnkeyup(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousedownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmousedown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousedown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmousedownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnmousedown(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousemoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmousemove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousemove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmousemoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnmousemove(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseoutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmouseout() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseout())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmouseoutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnmouseout(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmouseover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmouseoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnmouseover(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmouseup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmouseupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnmouseup(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousewheelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmousewheel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousewheel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmousewheelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnmousewheel(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onreadystatechangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onreadystatechange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onreadystatechange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onreadystatechangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnreadystatechange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onscrollAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onscroll() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onscroll())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onscrollAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnscroll(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onselectAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onselect() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselect())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onselectAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnselect(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onsubmitAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onsubmit() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsubmit())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onsubmitAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnsubmit(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforecutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onbeforecut() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforecut())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onbeforecutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnbeforecut(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oncut() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncut())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oncutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOncut(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforecopyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onbeforecopy() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforecopy())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onbeforecopyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnbeforecopy(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncopyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oncopy() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncopy())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oncopyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOncopy(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforepasteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onbeforepaste() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforepaste())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onbeforepasteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnbeforepaste(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onpasteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onpaste() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpaste())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onpasteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnpaste(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onresetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onreset() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onreset())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onresetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnreset(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onsearchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onsearch() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsearch())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onsearchAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnsearch(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onselectstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onselectstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselectstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onselectstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnselectstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onselectionchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onselectionchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselectionchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onselectionchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnselectionchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ontouchstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOntouchstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchmoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ontouchmove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchmove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchmoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOntouchmove(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ontouchend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOntouchend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchcancelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ontouchcancel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchcancel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchcancelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOntouchcancel(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(FULLSCREEN_API)

static v8::Handle<v8::Value> onwebkitfullscreenchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onwebkitfullscreenchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitfullscreenchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(FULLSCREEN_API)

#if ENABLE(FULLSCREEN_API)

static void onwebkitfullscreenchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnwebkitfullscreenchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(FULLSCREEN_API)

#if ENABLE(FULLSCREEN_API)

static v8::Handle<v8::Value> onwebkitfullscreenerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onwebkitfullscreenerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitfullscreenerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(FULLSCREEN_API)

#if ENABLE(FULLSCREEN_API)

static void onwebkitfullscreenerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnwebkitfullscreenerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(FULLSCREEN_API)

#if ENABLE(POINTER_LOCK)

static v8::Handle<v8::Value> onwebkitpointerlockchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onwebkitpointerlockchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitpointerlockchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(POINTER_LOCK)

#if ENABLE(POINTER_LOCK)

static void onwebkitpointerlockchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnwebkitpointerlockchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(POINTER_LOCK)

#if ENABLE(POINTER_LOCK)

static v8::Handle<v8::Value> onwebkitpointerlockerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onwebkitpointerlockerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitpointerlockerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(POINTER_LOCK)

#if ENABLE(POINTER_LOCK)

static void onwebkitpointerlockerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    imp->setOnwebkitpointerlockerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(POINTER_LOCK)

#if ENABLE(PAGE_VISIBILITY_API)

static v8::Handle<v8::Value> webkitVisibilityStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->webkitVisibilityState(), info.GetIsolate());
}

#endif // ENABLE(PAGE_VISIBILITY_API)

#if ENABLE(PAGE_VISIBILITY_API)

static v8::Handle<v8::Value> webkitHiddenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return v8Boolean(imp->webkitHidden(), info.GetIsolate());
}

#endif // ENABLE(PAGE_VISIBILITY_API)

#if ENABLE(CSP_NEXT)

static v8::Handle<v8::Value> securityPolicyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Document* imp = V8Document::toNative(info.Holder());
    return toV8Fast(imp->securityPolicy(), info, imp);
}

#endif // ENABLE(CSP_NEXT)

static v8::Handle<v8::Value> createElementCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, tagName, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    RefPtr<Element> result = imp->createElement(tagName, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createDocumentFragmentCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    return toV8Fast(imp->createDocumentFragment(), args, imp);
}

static v8::Handle<v8::Value> createTextNodeCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, data, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8Fast(imp->createTextNode(data), args, imp);
}

static v8::Handle<v8::Value> createCommentCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, data, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8Fast(imp->createComment(data), args, imp);
}

static v8::Handle<v8::Value> createCDATASectionCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, data, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    RefPtr<CDATASection> result = imp->createCDATASection(data, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createProcessingInstructionCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, target, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, data, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    RefPtr<ProcessingInstruction> result = imp->createProcessingInstruction(target, data, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createAttributeCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    RefPtr<Attr> result = imp->createAttribute(name, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createEntityReferenceCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    RefPtr<EntityReference> result = imp->createEntityReference(name, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getElementsByTagNameCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, tagname, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8Fast(imp->getElementsByTagName(tagname), args, imp);
}

static v8::Handle<v8::Value> importNodeCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Node*, importedNode, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    if (args.Length() <= 1) {
        RefPtr<Node> result = imp->importNode(importedNode, ec);
        if (UNLIKELY(ec))
            goto fail;
        return toV8Fast(result.release(), args, imp);
    }
    V8TRYCATCH(bool, deep, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->BooleanValue());
    RefPtr<Node> result = imp->importNode(importedNode, deep, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createElementNSCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, qualifiedName, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    RefPtr<Element> result = imp->createElementNS(namespaceURI, qualifiedName, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createAttributeNSCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, qualifiedName, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    RefPtr<Attr> result = imp->createAttributeNS(namespaceURI, qualifiedName, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getElementsByTagNameNSCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, localName, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    return toV8Fast(imp->getElementsByTagNameNS(namespaceURI, localName), args, imp);
}

static v8::Handle<v8::Value> getElementByIdCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, elementId, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8Fast(imp->getElementById(elementId), args, imp);
}

static v8::Handle<v8::Value> adoptNodeCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Node*, source, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    RefPtr<Node> result = imp->adoptNode(source, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createEventCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, eventType, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    RefPtr<Event> result = imp->createEvent(eventType, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createRangeCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    return toV8Fast(imp->createRange(), args, imp);
}

static v8::Handle<v8::Value> createNodeIteratorCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Node*, root, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(unsigned, whatToShow, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(RefPtr<NodeFilter>, filter, toNodeFilter(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(bool, expandEntityReferences, MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->BooleanValue());
    RefPtr<NodeIterator> result = imp->createNodeIterator(root, whatToShow, filter.get(), expandEntityReferences, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createTreeWalkerCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Node*, root, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(unsigned, whatToShow, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(RefPtr<NodeFilter>, filter, toNodeFilter(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(bool, expandEntityReferences, MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->BooleanValue());
    RefPtr<TreeWalker> result = imp->createTreeWalker(root, whatToShow, filter.get(), expandEntityReferences, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getOverrideStyleCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH(Element*, element, V8Element::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, pseudoElement, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    return toV8Fast(imp->getOverrideStyle(element, pseudoElement), args, imp);
}

static v8::Handle<v8::Value> createExpressionCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, expression, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(RefPtr<XPathNSResolver>, resolver, toXPathNSResolver(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    RefPtr<XPathExpression> result = imp->createExpression(expression, resolver.get(), ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createNSResolverCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH(Node*, nodeResolver, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    return toV8Fast(imp->createNSResolver(nodeResolver), args, imp);
}

static v8::Handle<v8::Value> execCommandCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, command, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(bool, userInterface, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->BooleanValue());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithUndefinedOrNullCheck>, value, MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined));
    return v8Boolean(imp->execCommand(command, userInterface, value), args.GetIsolate());
}

static v8::Handle<v8::Value> queryCommandEnabledCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, command, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->queryCommandEnabled(command), args.GetIsolate());
}

static v8::Handle<v8::Value> queryCommandIndetermCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, command, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->queryCommandIndeterm(command), args.GetIsolate());
}

static v8::Handle<v8::Value> queryCommandStateCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, command, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->queryCommandState(command), args.GetIsolate());
}

static v8::Handle<v8::Value> queryCommandSupportedCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, command, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->queryCommandSupported(command), args.GetIsolate());
}

static v8::Handle<v8::Value> queryCommandValueCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, command, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8String(imp->queryCommandValue(command), args.GetIsolate());
}

static v8::Handle<v8::Value> getElementsByNameCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, elementName, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8Fast(imp->getElementsByName(elementName), args, imp);
}

static v8::Handle<v8::Value> elementFromPointCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    return toV8Fast(imp->elementFromPoint(x, y), args, imp);
}

static v8::Handle<v8::Value> caretRangeFromPointCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    return toV8Fast(imp->caretRangeFromPoint(x, y), args, imp);
}

static v8::Handle<v8::Value> getSelectionCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    return toV8Fast(imp->getSelection(), args, imp);
}

static v8::Handle<v8::Value> getCSSCanvasContextCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, contextId, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    V8TRYCATCH(int, width, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, height, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    return toV8Fast(imp->getCSSCanvasContext(contextId, name, width, height), args, imp);
}

static v8::Handle<v8::Value> getElementsByClassNameCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, tagname, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8Fast(imp->getElementsByClassName(tagname), args, imp);
}

static v8::Handle<v8::Value> querySelectorCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, selectors, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    RefPtr<Element> result = imp->querySelector(selectors, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> querySelectorAllCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, selectors, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    RefPtr<NodeList> result = imp->querySelectorAll(selectors, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> webkitCancelFullScreenCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    imp->webkitCancelFullScreen();
    return v8Undefined();
}

static v8::Handle<v8::Value> webkitExitFullscreenCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    imp->webkitExitFullscreen();
    return v8Undefined();
}

#if ENABLE(POINTER_LOCK)

static v8::Handle<v8::Value> webkitExitPointerLockCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    imp->webkitExitPointerLock();
    return v8Undefined();
}

#endif // ENABLE(POINTER_LOCK)

#if ENABLE(CSS_REGIONS)

static v8::Handle<v8::Value> webkitGetNamedFlowsCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    return toV8Fast(imp->webkitGetNamedFlows(), args, imp);
}

#endif // ENABLE(CSS_REGIONS)

static v8::Handle<v8::Value> createTouchCallback(const v8::Arguments& args)
{
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(DOMWindow*, window, V8DOMWindow::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8DOMWindow::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(Node*, target, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    V8TRYCATCH(int, identifier, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, pageX, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(int, pageY, toInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    V8TRYCATCH(int, screenX, toInt32(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)));
    V8TRYCATCH(int, screenY, toInt32(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)));
    V8TRYCATCH(int, webkitRadiusX, toInt32(MAYBE_MISSING_PARAMETER(args, 7, DefaultIsUndefined)));
    V8TRYCATCH(int, webkitRadiusY, toInt32(MAYBE_MISSING_PARAMETER(args, 8, DefaultIsUndefined)));
    V8TRYCATCH(float, webkitRotationAngle, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 9, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, webkitForce, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 10, DefaultIsUndefined)->NumberValue()));
    RefPtr<Touch> result = imp->createTouch(window, target, identifier, pageX, pageY, screenX, screenY, webkitRadiusX, webkitRadiusY, webkitRotationAngle, webkitForce, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace DocumentV8Internal

static const V8DOMConfiguration::BatchedAttribute V8DocumentAttrs[] = {
    // Attribute 'doctype' (Type: 'readonly attribute' ExtAttr: '')
    {"doctype", DocumentV8Internal::doctypeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'implementation' (Type: 'readonly attribute' ExtAttr: '')
    {"implementation", DocumentV8Internal::implementationAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'documentElement' (Type: 'readonly attribute' ExtAttr: '')
    {"documentElement", DocumentV8Internal::documentElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'inputEncoding' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"inputEncoding", DocumentV8Internal::inputEncodingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xmlEncoding' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"xmlEncoding", DocumentV8Internal::xmlEncodingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xmlVersion' (Type: 'attribute' ExtAttr: 'TreatNullAs TreatReturnedNullStringAs')
    {"xmlVersion", DocumentV8Internal::xmlVersionAttrGetter, DocumentV8Internal::xmlVersionAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'xmlStandalone' (Type: 'attribute' ExtAttr: '')
    {"xmlStandalone", DocumentV8Internal::xmlStandaloneAttrGetter, DocumentV8Internal::xmlStandaloneAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'documentURI' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"documentURI", DocumentV8Internal::documentURIAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultView' (Type: 'readonly attribute' ExtAttr: '')
    {"defaultView", DocumentV8Internal::defaultViewAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'styleSheets' (Type: 'readonly attribute' ExtAttr: '')
    {"styleSheets", DocumentV8Internal::styleSheetsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'title' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"title", DocumentV8Internal::titleAttrGetter, DocumentV8Internal::titleAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'referrer' (Type: 'readonly attribute' ExtAttr: '')
    {"referrer", DocumentV8Internal::referrerAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'domain' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"domain", DocumentV8Internal::domainAttrGetter, DocumentV8Internal::domainAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'URL' (Type: 'readonly attribute' ExtAttr: '')
    {"URL", DocumentV8Internal::URLAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'cookie' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"cookie", DocumentV8Internal::cookieAttrGetter, DocumentV8Internal::cookieAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'body' (Type: 'attribute' ExtAttr: '')
    {"body", DocumentV8Internal::bodyAttrGetter, DocumentV8Internal::bodyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'head' (Type: 'readonly attribute' ExtAttr: '')
    {"head", DocumentV8Internal::headAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'images' (Type: 'readonly attribute' ExtAttr: '')
    {"images", DocumentV8Internal::imagesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'applets' (Type: 'readonly attribute' ExtAttr: '')
    {"applets", DocumentV8Internal::appletsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'links' (Type: 'readonly attribute' ExtAttr: '')
    {"links", DocumentV8Internal::linksAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'forms' (Type: 'readonly attribute' ExtAttr: '')
    {"forms", DocumentV8Internal::formsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'anchors' (Type: 'readonly attribute' ExtAttr: '')
    {"anchors", DocumentV8Internal::anchorsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'lastModified' (Type: 'readonly attribute' ExtAttr: '')
    {"lastModified", DocumentV8Internal::lastModifiedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'location' (Type: 'attribute' ExtAttr: 'Custom')
    {"location", V8Document::locationAccessorGetter, V8Document::locationAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'charset' (Type: 'attribute' ExtAttr: 'TreatNullAs TreatReturnedNullStringAs')
    {"charset", DocumentV8Internal::charsetAttrGetter, DocumentV8Internal::charsetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultCharset' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"defaultCharset", DocumentV8Internal::defaultCharsetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'readyState' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"readyState", DocumentV8Internal::readyStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'characterSet' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"characterSet", DocumentV8Internal::characterSetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'preferredStylesheetSet' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"preferredStylesheetSet", DocumentV8Internal::preferredStylesheetSetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'selectedStylesheetSet' (Type: 'attribute' ExtAttr: 'TreatNullAs TreatReturnedNullStringAs')
    {"selectedStylesheetSet", DocumentV8Internal::selectedStylesheetSetAttrGetter, DocumentV8Internal::selectedStylesheetSetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'compatMode' (Type: 'readonly attribute' ExtAttr: '')
    {"compatMode", DocumentV8Internal::compatModeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(POINTER_LOCK)
    // Attribute 'webkitPointerLockElement' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"webkitPointerLockElement", DocumentV8Internal::webkitPointerLockElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(POINTER_LOCK)
    // Attribute 'onabort' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onabort", DocumentV8Internal::onabortAttrGetter, DocumentV8Internal::onabortAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onblur' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onblur", DocumentV8Internal::onblurAttrGetter, DocumentV8Internal::onblurAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onchange' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onchange", DocumentV8Internal::onchangeAttrGetter, DocumentV8Internal::onchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onclick' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onclick", DocumentV8Internal::onclickAttrGetter, DocumentV8Internal::onclickAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncontextmenu' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"oncontextmenu", DocumentV8Internal::oncontextmenuAttrGetter, DocumentV8Internal::oncontextmenuAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondblclick' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondblclick", DocumentV8Internal::ondblclickAttrGetter, DocumentV8Internal::ondblclickAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondrag' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondrag", DocumentV8Internal::ondragAttrGetter, DocumentV8Internal::ondragAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragend' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragend", DocumentV8Internal::ondragendAttrGetter, DocumentV8Internal::ondragendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragenter' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragenter", DocumentV8Internal::ondragenterAttrGetter, DocumentV8Internal::ondragenterAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragleave' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragleave", DocumentV8Internal::ondragleaveAttrGetter, DocumentV8Internal::ondragleaveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragover' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragover", DocumentV8Internal::ondragoverAttrGetter, DocumentV8Internal::ondragoverAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragstart' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragstart", DocumentV8Internal::ondragstartAttrGetter, DocumentV8Internal::ondragstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondrop' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondrop", DocumentV8Internal::ondropAttrGetter, DocumentV8Internal::ondropAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onerror", DocumentV8Internal::onerrorAttrGetter, DocumentV8Internal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onfocus' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onfocus", DocumentV8Internal::onfocusAttrGetter, DocumentV8Internal::onfocusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oninput' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"oninput", DocumentV8Internal::oninputAttrGetter, DocumentV8Internal::oninputAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oninvalid' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"oninvalid", DocumentV8Internal::oninvalidAttrGetter, DocumentV8Internal::oninvalidAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeydown' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onkeydown", DocumentV8Internal::onkeydownAttrGetter, DocumentV8Internal::onkeydownAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeypress' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onkeypress", DocumentV8Internal::onkeypressAttrGetter, DocumentV8Internal::onkeypressAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeyup' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onkeyup", DocumentV8Internal::onkeyupAttrGetter, DocumentV8Internal::onkeyupAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onload' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onload", DocumentV8Internal::onloadAttrGetter, DocumentV8Internal::onloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousedown' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmousedown", DocumentV8Internal::onmousedownAttrGetter, DocumentV8Internal::onmousedownAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousemove' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmousemove", DocumentV8Internal::onmousemoveAttrGetter, DocumentV8Internal::onmousemoveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseout' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmouseout", DocumentV8Internal::onmouseoutAttrGetter, DocumentV8Internal::onmouseoutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseover' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmouseover", DocumentV8Internal::onmouseoverAttrGetter, DocumentV8Internal::onmouseoverAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseup' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmouseup", DocumentV8Internal::onmouseupAttrGetter, DocumentV8Internal::onmouseupAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousewheel' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmousewheel", DocumentV8Internal::onmousewheelAttrGetter, DocumentV8Internal::onmousewheelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onreadystatechange' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onreadystatechange", DocumentV8Internal::onreadystatechangeAttrGetter, DocumentV8Internal::onreadystatechangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onscroll' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onscroll", DocumentV8Internal::onscrollAttrGetter, DocumentV8Internal::onscrollAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onselect' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onselect", DocumentV8Internal::onselectAttrGetter, DocumentV8Internal::onselectAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onsubmit' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onsubmit", DocumentV8Internal::onsubmitAttrGetter, DocumentV8Internal::onsubmitAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforecut' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onbeforecut", DocumentV8Internal::onbeforecutAttrGetter, DocumentV8Internal::onbeforecutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncut' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"oncut", DocumentV8Internal::oncutAttrGetter, DocumentV8Internal::oncutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforecopy' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onbeforecopy", DocumentV8Internal::onbeforecopyAttrGetter, DocumentV8Internal::onbeforecopyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncopy' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"oncopy", DocumentV8Internal::oncopyAttrGetter, DocumentV8Internal::oncopyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforepaste' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onbeforepaste", DocumentV8Internal::onbeforepasteAttrGetter, DocumentV8Internal::onbeforepasteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onpaste' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onpaste", DocumentV8Internal::onpasteAttrGetter, DocumentV8Internal::onpasteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onreset' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onreset", DocumentV8Internal::onresetAttrGetter, DocumentV8Internal::onresetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onsearch' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onsearch", DocumentV8Internal::onsearchAttrGetter, DocumentV8Internal::onsearchAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onselectstart' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onselectstart", DocumentV8Internal::onselectstartAttrGetter, DocumentV8Internal::onselectstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onselectionchange' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onselectionchange", DocumentV8Internal::onselectionchangeAttrGetter, DocumentV8Internal::onselectionchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#if ENABLE(FULLSCREEN_API)
    // Attribute 'onwebkitfullscreenchange' (Type: 'attribute' ExtAttr: 'NotEnumerable Conditional')
    {"onwebkitfullscreenchange", DocumentV8Internal::onwebkitfullscreenchangeAttrGetter, DocumentV8Internal::onwebkitfullscreenchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(FULLSCREEN_API)
#if ENABLE(FULLSCREEN_API)
    // Attribute 'onwebkitfullscreenerror' (Type: 'attribute' ExtAttr: 'NotEnumerable Conditional')
    {"onwebkitfullscreenerror", DocumentV8Internal::onwebkitfullscreenerrorAttrGetter, DocumentV8Internal::onwebkitfullscreenerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(FULLSCREEN_API)
#if ENABLE(POINTER_LOCK)
    // Attribute 'onwebkitpointerlockchange' (Type: 'attribute' ExtAttr: 'NotEnumerable Conditional')
    {"onwebkitpointerlockchange", DocumentV8Internal::onwebkitpointerlockchangeAttrGetter, DocumentV8Internal::onwebkitpointerlockchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(POINTER_LOCK)
#if ENABLE(POINTER_LOCK)
    // Attribute 'onwebkitpointerlockerror' (Type: 'attribute' ExtAttr: 'NotEnumerable Conditional')
    {"onwebkitpointerlockerror", DocumentV8Internal::onwebkitpointerlockerrorAttrGetter, DocumentV8Internal::onwebkitpointerlockerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(POINTER_LOCK)
#if ENABLE(PAGE_VISIBILITY_API)
    // Attribute 'webkitVisibilityState' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"webkitVisibilityState", DocumentV8Internal::webkitVisibilityStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(PAGE_VISIBILITY_API)
#if ENABLE(PAGE_VISIBILITY_API)
    // Attribute 'webkitHidden' (Type: 'readonly attribute' ExtAttr: 'Conditional')
    {"webkitHidden", DocumentV8Internal::webkitHiddenAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(PAGE_VISIBILITY_API)
};

static const V8DOMConfiguration::BatchedCallback V8DocumentCallbacks[] = {
    {"createElement", DocumentV8Internal::createElementCallback},
    {"createDocumentFragment", DocumentV8Internal::createDocumentFragmentCallback},
    {"createTextNode", DocumentV8Internal::createTextNodeCallback},
    {"createComment", DocumentV8Internal::createCommentCallback},
    {"createCDATASection", DocumentV8Internal::createCDATASectionCallback},
    {"createProcessingInstruction", DocumentV8Internal::createProcessingInstructionCallback},
    {"createAttribute", DocumentV8Internal::createAttributeCallback},
    {"createEntityReference", DocumentV8Internal::createEntityReferenceCallback},
    {"getElementsByTagName", DocumentV8Internal::getElementsByTagNameCallback},
    {"importNode", DocumentV8Internal::importNodeCallback},
    {"createElementNS", DocumentV8Internal::createElementNSCallback},
    {"createAttributeNS", DocumentV8Internal::createAttributeNSCallback},
    {"getElementsByTagNameNS", DocumentV8Internal::getElementsByTagNameNSCallback},
    {"getElementById", DocumentV8Internal::getElementByIdCallback},
    {"createEvent", DocumentV8Internal::createEventCallback},
    {"createRange", DocumentV8Internal::createRangeCallback},
    {"evaluate", V8Document::evaluateCallback},
    {"execCommand", DocumentV8Internal::execCommandCallback},
    {"queryCommandEnabled", DocumentV8Internal::queryCommandEnabledCallback},
    {"queryCommandIndeterm", DocumentV8Internal::queryCommandIndetermCallback},
    {"queryCommandState", DocumentV8Internal::queryCommandStateCallback},
    {"queryCommandSupported", DocumentV8Internal::queryCommandSupportedCallback},
    {"queryCommandValue", DocumentV8Internal::queryCommandValueCallback},
    {"getElementsByName", DocumentV8Internal::getElementsByNameCallback},
    {"elementFromPoint", DocumentV8Internal::elementFromPointCallback},
    {"caretRangeFromPoint", DocumentV8Internal::caretRangeFromPointCallback},
    {"getSelection", DocumentV8Internal::getSelectionCallback},
    {"getCSSCanvasContext", DocumentV8Internal::getCSSCanvasContextCallback},
    {"getElementsByClassName", DocumentV8Internal::getElementsByClassNameCallback},
    {"querySelector", DocumentV8Internal::querySelectorCallback},
    {"querySelectorAll", DocumentV8Internal::querySelectorAllCallback},
#if ENABLE(POINTER_LOCK)
    {"webkitExitPointerLock", DocumentV8Internal::webkitExitPointerLockCallback},
#endif
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8DocumentTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "Document", V8Node::GetTemplate(), V8Document::internalFieldCount,
        V8DocumentAttrs, WTF_ARRAY_LENGTH(V8DocumentAttrs),
        V8DocumentCallbacks, WTF_ARRAY_LENGTH(V8DocumentCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    if (RuntimeEnabledFeatures::webkitIsFullScreenEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'webkitIsFullScreen' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime')
        {"webkitIsFullScreen", DocumentV8Internal::webkitIsFullScreenAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitFullScreenKeyboardInputAllowedEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'webkitFullScreenKeyboardInputAllowed' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime')
        {"webkitFullScreenKeyboardInputAllowed", DocumentV8Internal::webkitFullScreenKeyboardInputAllowedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitCurrentFullScreenElementEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'webkitCurrentFullScreenElement' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime')
        {"webkitCurrentFullScreenElement", DocumentV8Internal::webkitCurrentFullScreenElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitFullscreenEnabledEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'webkitFullscreenEnabled' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime')
        {"webkitFullscreenEnabled", DocumentV8Internal::webkitFullscreenEnabledAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::webkitFullscreenElementEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'webkitFullscreenElement' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime')
        {"webkitFullscreenElement", DocumentV8Internal::webkitFullscreenElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::touchEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'ontouchstart' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime NotEnumerable Conditional')
        {"ontouchstart", DocumentV8Internal::ontouchstartAttrGetter, DocumentV8Internal::ontouchstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::touchEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'ontouchmove' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime NotEnumerable Conditional')
        {"ontouchmove", DocumentV8Internal::ontouchmoveAttrGetter, DocumentV8Internal::ontouchmoveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::touchEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'ontouchend' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime NotEnumerable Conditional')
        {"ontouchend", DocumentV8Internal::ontouchendAttrGetter, DocumentV8Internal::ontouchendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::touchEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'ontouchcancel' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime NotEnumerable Conditional')
        {"ontouchcancel", DocumentV8Internal::ontouchcancelAttrGetter, DocumentV8Internal::ontouchcancelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(CSP_NEXT)
    if (RuntimeEnabledFeatures::experimentalContentSecurityPolicyFeaturesEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'securityPolicy' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime Conditional')
        {"securityPolicy", DocumentV8Internal::securityPolicyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(CSP_NEXT)

    // Custom Signature 'adoptNode'
    const int adoptNodeArgc = 1;
    v8::Handle<v8::FunctionTemplate> adoptNodeArgv[adoptNodeArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> adoptNodeSignature = v8::Signature::New(desc, adoptNodeArgc, adoptNodeArgv);
    proto->Set(v8::String::NewSymbol("adoptNode"), v8::FunctionTemplate::New(DocumentV8Internal::adoptNodeCallback, v8Undefined(), adoptNodeSignature));

    // Custom Signature 'createNodeIterator'
    const int createNodeIteratorArgc = 4;
    v8::Handle<v8::FunctionTemplate> createNodeIteratorArgv[createNodeIteratorArgc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> createNodeIteratorSignature = v8::Signature::New(desc, createNodeIteratorArgc, createNodeIteratorArgv);
    proto->Set(v8::String::NewSymbol("createNodeIterator"), v8::FunctionTemplate::New(DocumentV8Internal::createNodeIteratorCallback, v8Undefined(), createNodeIteratorSignature));

    // Custom Signature 'createTreeWalker'
    const int createTreeWalkerArgc = 4;
    v8::Handle<v8::FunctionTemplate> createTreeWalkerArgv[createTreeWalkerArgc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> createTreeWalkerSignature = v8::Signature::New(desc, createTreeWalkerArgc, createTreeWalkerArgv);
    proto->Set(v8::String::NewSymbol("createTreeWalker"), v8::FunctionTemplate::New(DocumentV8Internal::createTreeWalkerCallback, v8Undefined(), createTreeWalkerSignature));

    // Custom Signature 'getOverrideStyle'
    const int getOverrideStyleArgc = 2;
    v8::Handle<v8::FunctionTemplate> getOverrideStyleArgv[getOverrideStyleArgc] = { V8Element::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> getOverrideStyleSignature = v8::Signature::New(desc, getOverrideStyleArgc, getOverrideStyleArgv);
    proto->Set(v8::String::NewSymbol("getOverrideStyle"), v8::FunctionTemplate::New(DocumentV8Internal::getOverrideStyleCallback, v8Undefined(), getOverrideStyleSignature));

    // Custom Signature 'createExpression'
    const int createExpressionArgc = 2;
    v8::Handle<v8::FunctionTemplate> createExpressionArgv[createExpressionArgc] = { v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> createExpressionSignature = v8::Signature::New(desc, createExpressionArgc, createExpressionArgv);
    proto->Set(v8::String::NewSymbol("createExpression"), v8::FunctionTemplate::New(DocumentV8Internal::createExpressionCallback, v8Undefined(), createExpressionSignature));

    // Custom Signature 'createNSResolver'
    const int createNSResolverArgc = 1;
    v8::Handle<v8::FunctionTemplate> createNSResolverArgv[createNSResolverArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> createNSResolverSignature = v8::Signature::New(desc, createNSResolverArgc, createNSResolverArgv);
    proto->Set(v8::String::NewSymbol("createNSResolver"), v8::FunctionTemplate::New(DocumentV8Internal::createNSResolverCallback, v8Undefined(), createNSResolverSignature));
    if (RuntimeEnabledFeatures::webkitCancelFullScreenEnabled())
        proto->Set(v8::String::NewSymbol("webkitCancelFullScreen"), v8::FunctionTemplate::New(DocumentV8Internal::webkitCancelFullScreenCallback, v8Undefined(), defaultSignature));
    if (RuntimeEnabledFeatures::webkitExitFullscreenEnabled())
        proto->Set(v8::String::NewSymbol("webkitExitFullscreen"), v8::FunctionTemplate::New(DocumentV8Internal::webkitExitFullscreenCallback, v8Undefined(), defaultSignature));
#if ENABLE(CSS_REGIONS)
    if (RuntimeEnabledFeatures::cssRegionsEnabled())
        proto->Set(v8::String::NewSymbol("webkitGetNamedFlows"), v8::FunctionTemplate::New(DocumentV8Internal::webkitGetNamedFlowsCallback, v8Undefined(), defaultSignature));
#endif // ENABLE(CSS_REGIONS)

    // Custom Signature 'createTouch'
    const int createTouchArgc = 11;
    v8::Handle<v8::FunctionTemplate> createTouchArgv[createTouchArgc] = { V8DOMWindow::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> createTouchSignature = v8::Signature::New(desc, createTouchArgc, createTouchArgv);
    if (RuntimeEnabledFeatures::touchEnabled())
        proto->Set(v8::String::NewSymbol("createTouch"), v8::FunctionTemplate::New(DocumentV8Internal::createTouchCallback, v8Undefined(), createTouchSignature));
    if (RuntimeEnabledFeatures::touchEnabled())
        proto->Set(v8::String::NewSymbol("createTouchList"), v8::FunctionTemplate::New(V8Document::createTouchListCallback, v8Undefined(), defaultSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Document::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Document::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8DocumentTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Document::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Document::createWrapper(PassRefPtr<Document> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<Node*>(impl.get())) == static_cast<void*>(impl.get()));
    if (Frame* frame = impl->frame()) {
        if (frame->script()->initializeMainWorld()) {
            // initializeMainWorld may have created a wrapper for the object, retry from the start.
            v8::Handle<v8::Object> wrapper = DOMDataStore::getWrapper(impl.get(), isolate);
            if (!wrapper.IsEmpty())
                return wrapper;
        }
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8Document::derefObject(void* object)
{
    static_cast<Document*>(object)->deref();
}

} // namespace WebCore
