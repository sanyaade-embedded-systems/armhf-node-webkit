/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8XSLTProcessor.h"

#if ENABLE(XSLT)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8Document.h"
#include "V8DocumentFragment.h"
#include "V8Node.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8XSLTProcessor::info = { V8XSLTProcessor::GetTemplate, V8XSLTProcessor::derefObject, 0, 0, V8XSLTProcessor::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace XSLTProcessorV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> importStylesheetCallback(const v8::Arguments& args)
{
    XSLTProcessor* imp = V8XSLTProcessor::toNative(args.Holder());
    V8TRYCATCH(Node*, stylesheet, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->importStylesheet(stylesheet);
    return v8Undefined();
}

static v8::Handle<v8::Value> transformToFragmentCallback(const v8::Arguments& args)
{
    XSLTProcessor* imp = V8XSLTProcessor::toNative(args.Holder());
    V8TRYCATCH(Node*, source, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(Document*, docVal, V8Document::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8Document::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    return toV8(imp->transformToFragment(source, docVal), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> transformToDocumentCallback(const v8::Arguments& args)
{
    XSLTProcessor* imp = V8XSLTProcessor::toNative(args.Holder());
    V8TRYCATCH(Node*, source, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    return toV8(imp->transformToDocument(source), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> clearParametersCallback(const v8::Arguments& args)
{
    XSLTProcessor* imp = V8XSLTProcessor::toNative(args.Holder());
    imp->clearParameters();
    return v8Undefined();
}

static v8::Handle<v8::Value> resetCallback(const v8::Arguments& args)
{
    XSLTProcessor* imp = V8XSLTProcessor::toNative(args.Holder());
    imp->reset();
    return v8Undefined();
}

} // namespace XSLTProcessorV8Internal

static const V8DOMConfiguration::BatchedCallback V8XSLTProcessorCallbacks[] = {
    {"setParameter", V8XSLTProcessor::setParameterCallback},
    {"getParameter", V8XSLTProcessor::getParameterCallback},
    {"removeParameter", V8XSLTProcessor::removeParameterCallback},
    {"clearParameters", XSLTProcessorV8Internal::clearParametersCallback},
    {"reset", XSLTProcessorV8Internal::resetCallback},
};

v8::Handle<v8::Value> V8XSLTProcessor::constructorCallback(const v8::Arguments& args)
{
    
    if (!args.IsConstructCall())
        return throwTypeError("DOM object constructor cannot be called as a function.");

    if (ConstructorMode::current() == ConstructorMode::WrapExistingObject)
        return args.Holder();

    RefPtr<XSLTProcessor> impl = XSLTProcessor::create();
    v8::Handle<v8::Object> wrapper = args.Holder();

    V8DOMWrapper::associateObjectWithWrapper(impl.release(), &info, wrapper, args.GetIsolate());
    return wrapper;
}

static v8::Persistent<v8::FunctionTemplate> ConfigureV8XSLTProcessorTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "XSLTProcessor", v8::Persistent<v8::FunctionTemplate>(), V8XSLTProcessor::internalFieldCount,
        0, 0,
        V8XSLTProcessorCallbacks, WTF_ARRAY_LENGTH(V8XSLTProcessorCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    desc->SetCallHandler(V8XSLTProcessor::constructorCallback);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'importStylesheet'
    const int importStylesheetArgc = 1;
    v8::Handle<v8::FunctionTemplate> importStylesheetArgv[importStylesheetArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> importStylesheetSignature = v8::Signature::New(desc, importStylesheetArgc, importStylesheetArgv);
    proto->Set(v8::String::NewSymbol("importStylesheet"), v8::FunctionTemplate::New(XSLTProcessorV8Internal::importStylesheetCallback, v8Undefined(), importStylesheetSignature));

    // Custom Signature 'transformToFragment'
    const int transformToFragmentArgc = 2;
    v8::Handle<v8::FunctionTemplate> transformToFragmentArgv[transformToFragmentArgc] = { V8Node::GetRawTemplate(), V8Document::GetRawTemplate() };
    v8::Handle<v8::Signature> transformToFragmentSignature = v8::Signature::New(desc, transformToFragmentArgc, transformToFragmentArgv);
    proto->Set(v8::String::NewSymbol("transformToFragment"), v8::FunctionTemplate::New(XSLTProcessorV8Internal::transformToFragmentCallback, v8Undefined(), transformToFragmentSignature));

    // Custom Signature 'transformToDocument'
    const int transformToDocumentArgc = 1;
    v8::Handle<v8::FunctionTemplate> transformToDocumentArgv[transformToDocumentArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> transformToDocumentSignature = v8::Signature::New(desc, transformToDocumentArgc, transformToDocumentArgv);
    proto->Set(v8::String::NewSymbol("transformToDocument"), v8::FunctionTemplate::New(XSLTProcessorV8Internal::transformToDocumentCallback, v8Undefined(), transformToDocumentSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8XSLTProcessor::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8XSLTProcessor::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8XSLTProcessorTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8XSLTProcessor::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8XSLTProcessor::createWrapper(PassRefPtr<XSLTProcessor> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8XSLTProcessor::derefObject(void* object)
{
    static_cast<XSLTProcessor*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(XSLT)
