/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLDocument.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8Document.h"
#include "V8Element.h"
#include "V8HTMLAllCollection.h"
#include "V8HTMLCollection.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8HTMLDocument::info = { V8HTMLDocument::GetTemplate, V8HTMLDocument::derefObject, 0, 0, V8HTMLDocument::installPerContextPrototypeProperties, &V8Document::info, WrapperTypeObjectPrototype };

namespace HTMLDocumentV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> embedsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return toV8Fast(imp->embeds(), info, imp);
}

static v8::Handle<v8::Value> pluginsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return toV8Fast(imp->plugins(), info, imp);
}

static v8::Handle<v8::Value> scriptsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return toV8Fast(imp->scripts(), info, imp);
}

static v8::Handle<v8::Value> allAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return toV8Fast(imp->all(), info, imp);
}

static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return v8Integer(imp->width(), info.GetIsolate());
}

static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return v8Integer(imp->height(), info.GetIsolate());
}

static v8::Handle<v8::Value> dirAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return v8String(imp->dir(), info.GetIsolate());
}

static void dirAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setDir(v);
    return;
}

static v8::Handle<v8::Value> designModeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return v8String(imp->designMode(), info.GetIsolate());
}

static void designModeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setDesignMode(v);
    return;
}

static v8::Handle<v8::Value> compatModeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return v8String(imp->compatMode(), info.GetIsolate());
}

static v8::Handle<v8::Value> activeElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return toV8Fast(imp->activeElement(), info, imp);
}

static v8::Handle<v8::Value> bgColorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return v8String(imp->bgColor(), info.GetIsolate());
}

static void bgColorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setBgColor(v);
    return;
}

static v8::Handle<v8::Value> fgColorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return v8String(imp->fgColor(), info.GetIsolate());
}

static void fgColorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setFgColor(v);
    return;
}

static v8::Handle<v8::Value> alinkColorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return v8String(imp->alinkColor(), info.GetIsolate());
}

static void alinkColorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setAlinkColor(v);
    return;
}

static v8::Handle<v8::Value> linkColorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return v8String(imp->linkColor(), info.GetIsolate());
}

static void linkColorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setLinkColor(v);
    return;
}

static v8::Handle<v8::Value> vlinkColorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    return v8String(imp->vlinkColor(), info.GetIsolate());
}

static void vlinkColorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setVlinkColor(v);
    return;
}

static v8::Handle<v8::Value> closeCallback(const v8::Arguments& args)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(args.Holder());
    imp->close();
    return v8Undefined();
}

static v8::Handle<v8::Value> clearCallback(const v8::Arguments& args)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(args.Holder());
    imp->clear();
    return v8Undefined();
}

static v8::Handle<v8::Value> captureEventsCallback(const v8::Arguments& args)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(args.Holder());
    imp->captureEvents();
    return v8Undefined();
}

static v8::Handle<v8::Value> releaseEventsCallback(const v8::Arguments& args)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(args.Holder());
    imp->releaseEvents();
    return v8Undefined();
}

static v8::Handle<v8::Value> hasFocusCallback(const v8::Arguments& args)
{
    HTMLDocument* imp = V8HTMLDocument::toNative(args.Holder());
    return v8Boolean(imp->hasFocus(), args.GetIsolate());
}

} // namespace HTMLDocumentV8Internal

static const V8DOMConfiguration::BatchedAttribute V8HTMLDocumentAttrs[] = {
    // Attribute 'embeds' (Type: 'readonly attribute' ExtAttr: '')
    {"embeds", HTMLDocumentV8Internal::embedsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'plugins' (Type: 'readonly attribute' ExtAttr: '')
    {"plugins", HTMLDocumentV8Internal::pluginsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'scripts' (Type: 'readonly attribute' ExtAttr: '')
    {"scripts", HTMLDocumentV8Internal::scriptsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'all' (Type: 'attribute' ExtAttr: 'CustomSetter Deletable JSCustomGetter')
    {"all", HTMLDocumentV8Internal::allAttrGetter, V8HTMLDocument::allAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'width' (Type: 'readonly attribute' ExtAttr: '')
    {"width", HTMLDocumentV8Internal::widthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'height' (Type: 'readonly attribute' ExtAttr: '')
    {"height", HTMLDocumentV8Internal::heightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'dir' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"dir", HTMLDocumentV8Internal::dirAttrGetter, HTMLDocumentV8Internal::dirAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'designMode' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"designMode", HTMLDocumentV8Internal::designModeAttrGetter, HTMLDocumentV8Internal::designModeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'compatMode' (Type: 'readonly attribute' ExtAttr: '')
    {"compatMode", HTMLDocumentV8Internal::compatModeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'activeElement' (Type: 'readonly attribute' ExtAttr: '')
    {"activeElement", HTMLDocumentV8Internal::activeElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'bgColor' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"bgColor", HTMLDocumentV8Internal::bgColorAttrGetter, HTMLDocumentV8Internal::bgColorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'fgColor' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"fgColor", HTMLDocumentV8Internal::fgColorAttrGetter, HTMLDocumentV8Internal::fgColorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'alinkColor' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"alinkColor", HTMLDocumentV8Internal::alinkColorAttrGetter, HTMLDocumentV8Internal::alinkColorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'linkColor' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"linkColor", HTMLDocumentV8Internal::linkColorAttrGetter, HTMLDocumentV8Internal::linkColorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'vlinkColor' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"vlinkColor", HTMLDocumentV8Internal::vlinkColorAttrGetter, HTMLDocumentV8Internal::vlinkColorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8HTMLDocumentCallbacks[] = {
    {"open", V8HTMLDocument::openCallback},
    {"close", HTMLDocumentV8Internal::closeCallback},
    {"write", V8HTMLDocument::writeCallback},
    {"writeln", V8HTMLDocument::writelnCallback},
    {"clear", HTMLDocumentV8Internal::clearCallback},
    {"captureEvents", HTMLDocumentV8Internal::captureEventsCallback},
    {"releaseEvents", HTMLDocumentV8Internal::releaseEventsCallback},
    {"hasFocus", HTMLDocumentV8Internal::hasFocusCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLDocumentTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "HTMLDocument", V8Document::GetTemplate(), V8HTMLDocument::internalFieldCount,
        V8HTMLDocumentAttrs, WTF_ARRAY_LENGTH(V8HTMLDocumentAttrs),
        V8HTMLDocumentCallbacks, WTF_ARRAY_LENGTH(V8HTMLDocumentCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    desc->SetHiddenPrototype(true);

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLDocument::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLDocument::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLDocumentTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLDocument::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLDocument::createWrapper(PassRefPtr<HTMLDocument> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<Node*>(impl.get())) == static_cast<void*>(impl.get()));
    if (Frame* frame = impl->frame()) {
        if (frame->script()->initializeMainWorld()) {
            // initializeMainWorld may have created a wrapper for the object, retry from the start.
            v8::Handle<v8::Object> wrapper = DOMDataStore::getWrapper(impl.get(), isolate);
            if (!wrapper.IsEmpty())
                return wrapper;
        }
    }

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8HTMLDocument::derefObject(void* object)
{
    static_cast<HTMLDocument*>(object)->deref();
}

} // namespace WebCore
