/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8WebSocket.h"

#if ENABLE(WEB_SOCKETS)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8ArrayBuffer.h"
#include "V8ArrayBufferView.h"
#include "V8Binding.h"
#include "V8Blob.h"
#include "V8DOMWrapper.h"
#include "V8Event.h"
#include <wtf/ArrayBuffer.h>
#include <wtf/ArrayBufferView.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8WebSocket::info = { V8WebSocket::GetTemplate, V8WebSocket::derefObject, V8WebSocket::toActiveDOMObject, 0, V8WebSocket::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace WebSocketV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> URLAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return v8String(imp->url(), info.GetIsolate());
}

static v8::Handle<v8::Value> urlAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return v8String(imp->url(), info.GetIsolate());
}

static v8::Handle<v8::Value> readyStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return v8Integer(imp->readyState(), info.GetIsolate());
}

static v8::Handle<v8::Value> bufferedAmountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return v8UnsignedInteger(imp->bufferedAmount(), info.GetIsolate());
}

static v8::Handle<v8::Value> onopenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return imp->onopen() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onopen())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onopenAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onopen(), value, V8WebSocket::eventListenerCacheIndex);
    imp->setOnopen(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return imp->onmessage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmessage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmessageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmessage(), value, V8WebSocket::eventListenerCacheIndex);
    imp->setOnmessage(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8WebSocket::eventListenerCacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncloseAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return imp->onclose() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onclose())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oncloseAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onclose(), value, V8WebSocket::eventListenerCacheIndex);
    imp->setOnclose(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> protocolAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return v8StringOrUndefined(imp->protocol(), info.GetIsolate());
}

static v8::Handle<v8::Value> extensionsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return v8StringOrUndefined(imp->extensions(), info.GetIsolate());
}

static v8::Handle<v8::Value> binaryTypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return v8String(imp->binaryType(), info.GetIsolate());
}

static void binaryTypeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setBinaryType(v);
    return;
}

static v8::Handle<v8::Value> send1Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebSocket* imp = V8WebSocket::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(ArrayBuffer*, data, V8ArrayBuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8ArrayBuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    bool result = imp->send(data, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> send2Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebSocket* imp = V8WebSocket::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(ArrayBufferView*, data, V8ArrayBufferView::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8ArrayBufferView::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    bool result = imp->send(data, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> send3Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebSocket* imp = V8WebSocket::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Blob*, data, V8Blob::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Blob::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    bool result = imp->send(data, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> send4Callback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebSocket* imp = V8WebSocket::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, data, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    bool result = imp->send(data, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> sendCallback(const v8::Arguments& args)
{
    if ((args.Length() == 1 && (V8ArrayBuffer::HasInstance(args[0]))))
        return send1Callback(args);
    if ((args.Length() == 1 && (V8ArrayBufferView::HasInstance(args[0]))))
        return send2Callback(args);
    if ((args.Length() == 1 && (V8Blob::HasInstance(args[0]))))
        return send3Callback(args);
    if (args.Length() == 1)
        return send4Callback(args);
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> closeCallback(const v8::Arguments& args)
{
    WebSocket* imp = V8WebSocket::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        imp->close(ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8Undefined();
    }
    unsigned short code = 0;
    V8TRYCATCH(double, codeNativeValue, args[0]->NumberValue());
    if (!isnan(codeNativeValue))
        code = clampTo<unsigned short>(codeNativeValue);
    if (args.Length() <= 1) {
        imp->close(code, ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8Undefined();
    }
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, reason, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    imp->close(code, reason, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> addEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOrCreate);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8WebSocket::toNative(args.Holder())->addEventListener(stringResource, listener, args[2]->BooleanValue());
        createHiddenDependency(args.Holder(), args[1], V8WebSocket::eventListenerCacheIndex);
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> removeEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOnly);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8WebSocket::toNative(args.Holder())->removeEventListener(stringResource, listener.get(), args[2]->BooleanValue());
        removeHiddenDependency(args.Holder(), args[1], V8WebSocket::eventListenerCacheIndex);
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebSocket* imp = V8WebSocket::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Event*, evt, V8Event::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    bool result = imp->dispatchEvent(evt, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace WebSocketV8Internal

static const V8DOMConfiguration::BatchedAttribute V8WebSocketAttrs[] = {
    // Attribute 'URL' (Type: 'readonly attribute' ExtAttr: '')
    {"URL", WebSocketV8Internal::URLAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'url' (Type: 'readonly attribute' ExtAttr: '')
    {"url", WebSocketV8Internal::urlAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'readyState' (Type: 'readonly attribute' ExtAttr: '')
    {"readyState", WebSocketV8Internal::readyStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'bufferedAmount' (Type: 'readonly attribute' ExtAttr: '')
    {"bufferedAmount", WebSocketV8Internal::bufferedAmountAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onopen' (Type: 'attribute' ExtAttr: '')
    {"onopen", WebSocketV8Internal::onopenAttrGetter, WebSocketV8Internal::onopenAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onmessage' (Type: 'attribute' ExtAttr: '')
    {"onmessage", WebSocketV8Internal::onmessageAttrGetter, WebSocketV8Internal::onmessageAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: '')
    {"onerror", WebSocketV8Internal::onerrorAttrGetter, WebSocketV8Internal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onclose' (Type: 'attribute' ExtAttr: '')
    {"onclose", WebSocketV8Internal::oncloseAttrGetter, WebSocketV8Internal::oncloseAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'protocol' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"protocol", WebSocketV8Internal::protocolAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'extensions' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"extensions", WebSocketV8Internal::extensionsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'binaryType' (Type: 'attribute' ExtAttr: '')
    {"binaryType", WebSocketV8Internal::binaryTypeAttrGetter, WebSocketV8Internal::binaryTypeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8WebSocketCallbacks[] = {
    {"send", WebSocketV8Internal::sendCallback},
    {"close", WebSocketV8Internal::closeCallback},
    {"addEventListener", WebSocketV8Internal::addEventListenerCallback},
    {"removeEventListener", WebSocketV8Internal::removeEventListenerCallback},
};

static const V8DOMConfiguration::BatchedConstant V8WebSocketConsts[] = {
    {"CONNECTING", static_cast<signed int>(0)},
    {"OPEN", static_cast<signed int>(1)},
    {"CLOSING", static_cast<signed int>(2)},
    {"CLOSED", static_cast<signed int>(3)},
};


COMPILE_ASSERT(0 == WebSocket::CONNECTING, WebSocketEnumCONNECTINGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == WebSocket::OPEN, WebSocketEnumOPENIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == WebSocket::CLOSING, WebSocketEnumCLOSINGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == WebSocket::CLOSED, WebSocketEnumCLOSEDIsWrongUseDoNotCheckConstants);

v8::Handle<v8::Value> V8WebSocket::constructor1Callback(const v8::Arguments& args)
{
    

    ExceptionCode ec = 0;
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));

    ScriptExecutionContext* context = getScriptExecutionContext();

    RefPtr<WebSocket> impl = WebSocket::create(context, url, ec);
    v8::Handle<v8::Object> wrapper = args.Holder();
    if (ec)
        goto fail;

    V8DOMWrapper::associateObjectWithWrapper(impl.release(), &info, wrapper, args.GetIsolate());
    return wrapper;
  fail:
    return setDOMException(ec, args.GetIsolate());
}

v8::Handle<v8::Value> V8WebSocket::constructor2Callback(const v8::Arguments& args)
{
    

    ExceptionCode ec = 0;
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(Vector<String>, protocols, toNativeArray<String>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));

    ScriptExecutionContext* context = getScriptExecutionContext();

    RefPtr<WebSocket> impl = WebSocket::create(context, url, protocols, ec);
    v8::Handle<v8::Object> wrapper = args.Holder();
    if (ec)
        goto fail;

    V8DOMWrapper::associateObjectWithWrapper(impl.release(), &info, wrapper, args.GetIsolate());
    return wrapper;
  fail:
    return setDOMException(ec, args.GetIsolate());
}

v8::Handle<v8::Value> V8WebSocket::constructor3Callback(const v8::Arguments& args)
{
    

    ExceptionCode ec = 0;
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, protocol, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));

    ScriptExecutionContext* context = getScriptExecutionContext();

    RefPtr<WebSocket> impl = WebSocket::create(context, url, protocol, ec);
    v8::Handle<v8::Object> wrapper = args.Holder();
    if (ec)
        goto fail;

    V8DOMWrapper::associateObjectWithWrapper(impl.release(), &info, wrapper, args.GetIsolate());
    return wrapper;
  fail:
    return setDOMException(ec, args.GetIsolate());
}

v8::Handle<v8::Value> V8WebSocket::constructorCallback(const v8::Arguments& args)
{
    if (!args.IsConstructCall())
        return throwTypeError("DOM object constructor cannot be called as a function.");

    if (ConstructorMode::current() == ConstructorMode::WrapExistingObject)
        return args.Holder();
    if (args.Length() == 1)
        return constructor1Callback(args);
    if ((args.Length() == 2 && (args[1]->IsArray())))
        return constructor2Callback(args);
    if (args.Length() == 2)
        return constructor3Callback(args);
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Persistent<v8::FunctionTemplate> ConfigureV8WebSocketTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "WebSocket", v8::Persistent<v8::FunctionTemplate>(), V8WebSocket::internalFieldCount,
        V8WebSocketAttrs, WTF_ARRAY_LENGTH(V8WebSocketAttrs),
        V8WebSocketCallbacks, WTF_ARRAY_LENGTH(V8WebSocketCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    desc->SetCallHandler(V8WebSocket::constructorCallback);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'dispatchEvent'
    const int dispatchEventArgc = 1;
    v8::Handle<v8::FunctionTemplate> dispatchEventArgv[dispatchEventArgc] = { V8Event::GetRawTemplate() };
    v8::Handle<v8::Signature> dispatchEventSignature = v8::Signature::New(desc, dispatchEventArgc, dispatchEventArgv);
    proto->Set(v8::String::NewSymbol("dispatchEvent"), v8::FunctionTemplate::New(WebSocketV8Internal::dispatchEventCallback, v8Undefined(), dispatchEventSignature));
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8WebSocketConsts, WTF_ARRAY_LENGTH(V8WebSocketConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8WebSocket::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8WebSocket::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8WebSocketTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8WebSocket::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}

ActiveDOMObject* V8WebSocket::toActiveDOMObject(v8::Handle<v8::Object> object)
{
    return toNative(object);
}      

v8::Handle<v8::Object> V8WebSocket::createWrapper(PassRefPtr<WebSocket> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8WebSocket::derefObject(void* object)
{
    static_cast<WebSocket*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(WEB_SOCKETS)
