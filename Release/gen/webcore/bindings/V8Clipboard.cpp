/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Clipboard.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8DataTransferItemList.h"
#include "V8FileList.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8Clipboard::info = { V8Clipboard::GetTemplate, V8Clipboard::derefObject, 0, 0, V8Clipboard::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace ClipboardV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> dropEffectAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Clipboard* imp = V8Clipboard::toNative(info.Holder());
    return v8StringOrUndefined(imp->dropEffect(), info.GetIsolate());
}

static void dropEffectAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Clipboard* imp = V8Clipboard::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setDropEffect(v);
    return;
}

static v8::Handle<v8::Value> effectAllowedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Clipboard* imp = V8Clipboard::toNative(info.Holder());
    return v8StringOrUndefined(imp->effectAllowed(), info.GetIsolate());
}

static void effectAllowedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Clipboard* imp = V8Clipboard::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, v, value);
    imp->setEffectAllowed(v);
    return;
}

static v8::Handle<v8::Value> filesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Clipboard* imp = V8Clipboard::toNative(info.Holder());
    RefPtr<FileList> result = imp->files();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "files", wrapper);
    }
    return wrapper;
}

#if ENABLE(DATA_TRANSFER_ITEMS)

static v8::Handle<v8::Value> itemsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Clipboard* imp = V8Clipboard::toNative(info.Holder());
    RefPtr<DataTransferItemList> result = imp->items();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "items", wrapper);
    }
    return wrapper;
}

#endif // ENABLE(DATA_TRANSFER_ITEMS)

static v8::Handle<v8::Value> getDataCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Clipboard* imp = V8Clipboard::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, type, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8String(imp->getData(type), args.GetIsolate());
}

static v8::Handle<v8::Value> setDataCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Clipboard* imp = V8Clipboard::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, type, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, data, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    return v8Boolean(imp->setData(type, data), args.GetIsolate());
}

} // namespace ClipboardV8Internal

static const V8DOMConfiguration::BatchedAttribute V8ClipboardAttrs[] = {
    // Attribute 'dropEffect' (Type: 'attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"dropEffect", ClipboardV8Internal::dropEffectAttrGetter, ClipboardV8Internal::dropEffectAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'effectAllowed' (Type: 'attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"effectAllowed", ClipboardV8Internal::effectAllowedAttrGetter, ClipboardV8Internal::effectAllowedAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'types' (Type: 'readonly attribute' ExtAttr: 'CustomGetter')
    {"types", V8Clipboard::typesAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'files' (Type: 'readonly attribute' ExtAttr: '')
    {"files", ClipboardV8Internal::filesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8ClipboardCallbacks[] = {
    {"clearData", V8Clipboard::clearDataCallback},
    {"getData", ClipboardV8Internal::getDataCallback},
    {"setData", ClipboardV8Internal::setDataCallback},
    {"setDragImage", V8Clipboard::setDragImageCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8ClipboardTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "Clipboard", v8::Persistent<v8::FunctionTemplate>(), V8Clipboard::internalFieldCount,
        V8ClipboardAttrs, WTF_ARRAY_LENGTH(V8ClipboardAttrs),
        V8ClipboardCallbacks, WTF_ARRAY_LENGTH(V8ClipboardCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

#if ENABLE(DATA_TRANSFER_ITEMS)
    if (RuntimeEnabledFeatures::dataTransferItemsEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'items' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime Conditional')
        {"items", ClipboardV8Internal::itemsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(DATA_TRANSFER_ITEMS)

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Clipboard::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Clipboard::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8ClipboardTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Clipboard::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Clipboard::createWrapper(PassRefPtr<Clipboard> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8Clipboard::derefObject(void* object)
{
    static_cast<Clipboard*>(object)->deref();
}

} // namespace WebCore
