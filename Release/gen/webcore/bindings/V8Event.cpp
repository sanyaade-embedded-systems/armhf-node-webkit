/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Event.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "Dictionary.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8EventTarget.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8Event::info = { V8Event::GetTemplate, V8Event::derefObject, 0, 0, V8Event::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace EventV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Event* imp = V8Event::toNative(info.Holder());
    return v8String(imp->type(), info.GetIsolate());
}

static v8::Handle<v8::Value> targetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Event* imp = V8Event::toNative(info.Holder());
    return toV8Fast(imp->target(), info, imp);
}

static v8::Handle<v8::Value> currentTargetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Event* imp = V8Event::toNative(info.Holder());
    return toV8Fast(imp->currentTarget(), info, imp);
}

static v8::Handle<v8::Value> eventPhaseAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Event* imp = V8Event::toNative(info.Holder());
    return v8Integer(imp->eventPhase(), info.GetIsolate());
}

static v8::Handle<v8::Value> bubblesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Event* imp = V8Event::toNative(info.Holder());
    return v8Boolean(imp->bubbles(), info.GetIsolate());
}

static v8::Handle<v8::Value> cancelableAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Event* imp = V8Event::toNative(info.Holder());
    return v8Boolean(imp->cancelable(), info.GetIsolate());
}

static v8::Handle<v8::Value> timeStampAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Event* imp = V8Event::toNative(info.Holder());
    return v8::Number::New(static_cast<double>(imp->timeStamp()));
}

static v8::Handle<v8::Value> defaultPreventedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Event* imp = V8Event::toNative(info.Holder());
    return v8Boolean(imp->defaultPrevented(), info.GetIsolate());
}

static v8::Handle<v8::Value> srcElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Event* imp = V8Event::toNative(info.Holder());
    return toV8Fast(imp->srcElement(), info, imp);
}

static v8::Handle<v8::Value> returnValueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Event* imp = V8Event::toNative(info.Holder());
    return v8Boolean(imp->returnValue(), info.GetIsolate());
}

static void returnValueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Event* imp = V8Event::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setReturnValue(v);
    return;
}

static v8::Handle<v8::Value> cancelBubbleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Event* imp = V8Event::toNative(info.Holder());
    return v8Boolean(imp->cancelBubble(), info.GetIsolate());
}

static void cancelBubbleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Event* imp = V8Event::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setCancelBubble(v);
    return;
}

static v8::Handle<v8::Value> stopPropagationCallback(const v8::Arguments& args)
{
    Event* imp = V8Event::toNative(args.Holder());
    imp->stopPropagation();
    return v8Undefined();
}

static v8::Handle<v8::Value> preventDefaultCallback(const v8::Arguments& args)
{
    Event* imp = V8Event::toNative(args.Holder());
    imp->preventDefault();
    return v8Undefined();
}

static v8::Handle<v8::Value> initEventCallback(const v8::Arguments& args)
{
    Event* imp = V8Event::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, eventTypeArg, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(bool, canBubbleArg, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->BooleanValue());
    V8TRYCATCH(bool, cancelableArg, MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->BooleanValue());
    imp->initEvent(eventTypeArg, canBubbleArg, cancelableArg);
    return v8Undefined();
}

static v8::Handle<v8::Value> stopImmediatePropagationCallback(const v8::Arguments& args)
{
    Event* imp = V8Event::toNative(args.Holder());
    imp->stopImmediatePropagation();
    return v8Undefined();
}

} // namespace EventV8Internal

static const V8DOMConfiguration::BatchedAttribute V8EventAttrs[] = {
    // Attribute 'type' (Type: 'readonly attribute' ExtAttr: '')
    {"type", EventV8Internal::typeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'target' (Type: 'readonly attribute' ExtAttr: '')
    {"target", EventV8Internal::targetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'currentTarget' (Type: 'readonly attribute' ExtAttr: '')
    {"currentTarget", EventV8Internal::currentTargetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'eventPhase' (Type: 'readonly attribute' ExtAttr: '')
    {"eventPhase", EventV8Internal::eventPhaseAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'bubbles' (Type: 'readonly attribute' ExtAttr: 'InitializedByEventConstructor')
    {"bubbles", EventV8Internal::bubblesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'cancelable' (Type: 'readonly attribute' ExtAttr: 'InitializedByEventConstructor')
    {"cancelable", EventV8Internal::cancelableAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'timeStamp' (Type: 'readonly attribute' ExtAttr: '')
    {"timeStamp", EventV8Internal::timeStampAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultPrevented' (Type: 'readonly attribute' ExtAttr: '')
    {"defaultPrevented", EventV8Internal::defaultPreventedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'srcElement' (Type: 'readonly attribute' ExtAttr: '')
    {"srcElement", EventV8Internal::srcElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'returnValue' (Type: 'attribute' ExtAttr: '')
    {"returnValue", EventV8Internal::returnValueAttrGetter, EventV8Internal::returnValueAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'cancelBubble' (Type: 'attribute' ExtAttr: '')
    {"cancelBubble", EventV8Internal::cancelBubbleAttrGetter, EventV8Internal::cancelBubbleAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'clipboardData' (Type: 'readonly attribute' ExtAttr: 'Custom')
    {"clipboardData", V8Event::clipboardDataAccessorGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8EventCallbacks[] = {
    {"stopPropagation", EventV8Internal::stopPropagationCallback},
    {"preventDefault", EventV8Internal::preventDefaultCallback},
    {"initEvent", EventV8Internal::initEventCallback},
    {"stopImmediatePropagation", EventV8Internal::stopImmediatePropagationCallback},
};

static const V8DOMConfiguration::BatchedConstant V8EventConsts[] = {
    {"NONE", static_cast<signed int>(0)},
    {"CAPTURING_PHASE", static_cast<signed int>(1)},
    {"AT_TARGET", static_cast<signed int>(2)},
    {"BUBBLING_PHASE", static_cast<signed int>(3)},
    {"MOUSEDOWN", static_cast<signed int>(1)},
    {"MOUSEUP", static_cast<signed int>(2)},
    {"MOUSEOVER", static_cast<signed int>(4)},
    {"MOUSEOUT", static_cast<signed int>(8)},
    {"MOUSEMOVE", static_cast<signed int>(16)},
    {"MOUSEDRAG", static_cast<signed int>(32)},
    {"CLICK", static_cast<signed int>(64)},
    {"DBLCLICK", static_cast<signed int>(128)},
    {"KEYDOWN", static_cast<signed int>(256)},
    {"KEYUP", static_cast<signed int>(512)},
    {"KEYPRESS", static_cast<signed int>(1024)},
    {"DRAGDROP", static_cast<signed int>(2048)},
    {"FOCUS", static_cast<signed int>(4096)},
    {"BLUR", static_cast<signed int>(8192)},
    {"SELECT", static_cast<signed int>(16384)},
    {"CHANGE", static_cast<signed int>(32768)},
};


COMPILE_ASSERT(0 == Event::NONE, EventEnumNONEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == Event::CAPTURING_PHASE, EventEnumCAPTURING_PHASEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == Event::AT_TARGET, EventEnumAT_TARGETIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == Event::BUBBLING_PHASE, EventEnumBUBBLING_PHASEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == Event::MOUSEDOWN, EventEnumMOUSEDOWNIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == Event::MOUSEUP, EventEnumMOUSEUPIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(4 == Event::MOUSEOVER, EventEnumMOUSEOVERIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(8 == Event::MOUSEOUT, EventEnumMOUSEOUTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(16 == Event::MOUSEMOVE, EventEnumMOUSEMOVEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(32 == Event::MOUSEDRAG, EventEnumMOUSEDRAGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(64 == Event::CLICK, EventEnumCLICKIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(128 == Event::DBLCLICK, EventEnumDBLCLICKIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(256 == Event::KEYDOWN, EventEnumKEYDOWNIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(512 == Event::KEYUP, EventEnumKEYUPIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1024 == Event::KEYPRESS, EventEnumKEYPRESSIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2048 == Event::DRAGDROP, EventEnumDRAGDROPIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(4096 == Event::FOCUS, EventEnumFOCUSIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(8192 == Event::BLUR, EventEnumBLURIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(16384 == Event::SELECT, EventEnumSELECTIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(32768 == Event::CHANGE, EventEnumCHANGEIsWrongUseDoNotCheckConstants);

v8::Handle<v8::Value> V8Event::constructorCallback(const v8::Arguments& args)
{
    if (!args.IsConstructCall())
        return throwTypeError("DOM object constructor cannot be called as a function.");

    if (ConstructorMode::current() == ConstructorMode::WrapExistingObject)
        return args.Holder();
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());

    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, type, args[0]);
    EventInit eventInit;
    if (args.Length() >= 2) {
        V8TRYCATCH(Dictionary, options, Dictionary(args[1], args.GetIsolate()));
        if (!fillEventInit(eventInit, options))
            return v8Undefined();
    }

    RefPtr<Event> event = Event::create(type, eventInit);

    v8::Handle<v8::Object> wrapper = args.Holder();
    V8DOMWrapper::associateObjectWithWrapper(event.release(), &info, wrapper, args.GetIsolate());
    return wrapper;
}

bool fillEventInit(EventInit& eventInit, const Dictionary& options)
{
    options.get("bubbles", eventInit.bubbles);
    options.get("cancelable", eventInit.cancelable);
    return true;
}

static v8::Persistent<v8::FunctionTemplate> ConfigureV8EventTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "Event", v8::Persistent<v8::FunctionTemplate>(), V8Event::internalFieldCount,
        V8EventAttrs, WTF_ARRAY_LENGTH(V8EventAttrs),
        V8EventCallbacks, WTF_ARRAY_LENGTH(V8EventCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    desc->SetCallHandler(V8Event::constructorCallback);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8EventConsts, WTF_ARRAY_LENGTH(V8EventConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Event::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Event::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8EventTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Event::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Event::createWrapper(PassRefPtr<Event> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8Event::derefObject(void* object)
{
    static_cast<Event*>(object)->deref();
}

} // namespace WebCore
