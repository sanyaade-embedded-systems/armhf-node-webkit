/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8PerformanceResourceTiming.h"

#if ENABLE(RESOURCE_TIMING)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8PerformanceEntry.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8PerformanceResourceTiming::info = { V8PerformanceResourceTiming::GetTemplate, V8PerformanceResourceTiming::derefObject, 0, 0, V8PerformanceResourceTiming::installPerContextPrototypeProperties, &V8PerformanceEntry::info, WrapperTypeObjectPrototype };

namespace PerformanceResourceTimingV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> initiatorTypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    PerformanceResourceTiming* imp = V8PerformanceResourceTiming::toNative(info.Holder());
    return v8String(imp->initiatorType(), info.GetIsolate());
}

static v8::Handle<v8::Value> redirectStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    PerformanceResourceTiming* imp = V8PerformanceResourceTiming::toNative(info.Holder());
    return v8::Number::New(imp->redirectStart());
}

static v8::Handle<v8::Value> redirectEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    PerformanceResourceTiming* imp = V8PerformanceResourceTiming::toNative(info.Holder());
    return v8::Number::New(imp->redirectEnd());
}

static v8::Handle<v8::Value> fetchStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    PerformanceResourceTiming* imp = V8PerformanceResourceTiming::toNative(info.Holder());
    return v8::Number::New(imp->fetchStart());
}

static v8::Handle<v8::Value> domainLookupStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    PerformanceResourceTiming* imp = V8PerformanceResourceTiming::toNative(info.Holder());
    return v8::Number::New(imp->domainLookupStart());
}

static v8::Handle<v8::Value> domainLookupEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    PerformanceResourceTiming* imp = V8PerformanceResourceTiming::toNative(info.Holder());
    return v8::Number::New(imp->domainLookupEnd());
}

static v8::Handle<v8::Value> connectStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    PerformanceResourceTiming* imp = V8PerformanceResourceTiming::toNative(info.Holder());
    return v8::Number::New(imp->connectStart());
}

static v8::Handle<v8::Value> connectEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    PerformanceResourceTiming* imp = V8PerformanceResourceTiming::toNative(info.Holder());
    return v8::Number::New(imp->connectEnd());
}

static v8::Handle<v8::Value> secureConnectionStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    PerformanceResourceTiming* imp = V8PerformanceResourceTiming::toNative(info.Holder());
    return v8::Number::New(imp->secureConnectionStart());
}

static v8::Handle<v8::Value> requestStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    PerformanceResourceTiming* imp = V8PerformanceResourceTiming::toNative(info.Holder());
    return v8::Number::New(imp->requestStart());
}

static v8::Handle<v8::Value> responseStartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    PerformanceResourceTiming* imp = V8PerformanceResourceTiming::toNative(info.Holder());
    return v8::Number::New(imp->responseStart());
}

static v8::Handle<v8::Value> responseEndAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    PerformanceResourceTiming* imp = V8PerformanceResourceTiming::toNative(info.Holder());
    return v8::Number::New(imp->responseEnd());
}

} // namespace PerformanceResourceTimingV8Internal

static const V8DOMConfiguration::BatchedAttribute V8PerformanceResourceTimingAttrs[] = {
    // Attribute 'initiatorType' (Type: 'readonly attribute' ExtAttr: '')
    {"initiatorType", PerformanceResourceTimingV8Internal::initiatorTypeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'redirectStart' (Type: 'readonly attribute' ExtAttr: '')
    {"redirectStart", PerformanceResourceTimingV8Internal::redirectStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'redirectEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"redirectEnd", PerformanceResourceTimingV8Internal::redirectEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'fetchStart' (Type: 'readonly attribute' ExtAttr: '')
    {"fetchStart", PerformanceResourceTimingV8Internal::fetchStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'domainLookupStart' (Type: 'readonly attribute' ExtAttr: '')
    {"domainLookupStart", PerformanceResourceTimingV8Internal::domainLookupStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'domainLookupEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"domainLookupEnd", PerformanceResourceTimingV8Internal::domainLookupEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'connectStart' (Type: 'readonly attribute' ExtAttr: '')
    {"connectStart", PerformanceResourceTimingV8Internal::connectStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'connectEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"connectEnd", PerformanceResourceTimingV8Internal::connectEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'secureConnectionStart' (Type: 'readonly attribute' ExtAttr: '')
    {"secureConnectionStart", PerformanceResourceTimingV8Internal::secureConnectionStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'requestStart' (Type: 'readonly attribute' ExtAttr: '')
    {"requestStart", PerformanceResourceTimingV8Internal::requestStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'responseStart' (Type: 'readonly attribute' ExtAttr: '')
    {"responseStart", PerformanceResourceTimingV8Internal::responseStartAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'responseEnd' (Type: 'readonly attribute' ExtAttr: '')
    {"responseEnd", PerformanceResourceTimingV8Internal::responseEndAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8PerformanceResourceTimingTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "PerformanceResourceTiming", V8PerformanceEntry::GetTemplate(), V8PerformanceResourceTiming::internalFieldCount,
        V8PerformanceResourceTimingAttrs, WTF_ARRAY_LENGTH(V8PerformanceResourceTimingAttrs),
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8PerformanceResourceTiming::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8PerformanceResourceTiming::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8PerformanceResourceTimingTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8PerformanceResourceTiming::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8PerformanceResourceTiming::createWrapper(PassRefPtr<PerformanceResourceTiming> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<PerformanceEntry*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8PerformanceResourceTiming::derefObject(void* object)
{
    static_cast<PerformanceResourceTiming*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(RESOURCE_TIMING)
