/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8StorageInfo.h"

#if ENABLE(QUOTA)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8StorageInfoErrorCallback.h"
#include "V8StorageInfoQuotaCallback.h"
#include "V8StorageInfoUsageCallback.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8StorageInfo::info = { V8StorageInfo::GetTemplate, V8StorageInfo::derefObject, 0, 0, V8StorageInfo::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace StorageInfoV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> queryUsageAndQuotaCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    StorageInfo* imp = V8StorageInfo::toNative(args.Holder());
    V8TRYCATCH(int, storageType, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    RefPtr<StorageInfoUsageCallback> usageCallback;
    if (args.Length() > 1 && !args[1]->IsNull() && !args[1]->IsUndefined()) {
        if (!args[1]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        usageCallback = V8StorageInfoUsageCallback::create(args[1], getScriptExecutionContext());
    }
    RefPtr<StorageInfoErrorCallback> errorCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        errorCallback = V8StorageInfoErrorCallback::create(args[2], getScriptExecutionContext());
    }
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    imp->queryUsageAndQuota(scriptContext, storageType, usageCallback, errorCallback);
    return v8Undefined();
}

static v8::Handle<v8::Value> requestQuotaCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    StorageInfo* imp = V8StorageInfo::toNative(args.Holder());
    V8TRYCATCH(int, storageType, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned long long, newQuotaInBytes, toInt64(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    RefPtr<StorageInfoQuotaCallback> quotaCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        quotaCallback = V8StorageInfoQuotaCallback::create(args[2], getScriptExecutionContext());
    }
    RefPtr<StorageInfoErrorCallback> errorCallback;
    if (args.Length() > 3 && !args[3]->IsNull() && !args[3]->IsUndefined()) {
        if (!args[3]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        errorCallback = V8StorageInfoErrorCallback::create(args[3], getScriptExecutionContext());
    }
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    imp->requestQuota(scriptContext, storageType, newQuotaInBytes, quotaCallback, errorCallback);
    return v8Undefined();
}

} // namespace StorageInfoV8Internal

static const V8DOMConfiguration::BatchedCallback V8StorageInfoCallbacks[] = {
    {"queryUsageAndQuota", StorageInfoV8Internal::queryUsageAndQuotaCallback},
    {"requestQuota", StorageInfoV8Internal::requestQuotaCallback},
};

static const V8DOMConfiguration::BatchedConstant V8StorageInfoConsts[] = {
    {"TEMPORARY", static_cast<signed int>(0)},
    {"PERSISTENT", static_cast<signed int>(1)},
};


COMPILE_ASSERT(0 == StorageInfo::TEMPORARY, StorageInfoEnumTEMPORARYIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == StorageInfo::PERSISTENT, StorageInfoEnumPERSISTENTIsWrongUseDoNotCheckConstants);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8StorageInfoTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "StorageInfo", v8::Persistent<v8::FunctionTemplate>(), V8StorageInfo::internalFieldCount,
        0, 0,
        V8StorageInfoCallbacks, WTF_ARRAY_LENGTH(V8StorageInfoCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8StorageInfoConsts, WTF_ARRAY_LENGTH(V8StorageInfoConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8StorageInfo::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8StorageInfo::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8StorageInfoTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8StorageInfo::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8StorageInfo::createWrapper(PassRefPtr<StorageInfo> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8StorageInfo::derefObject(void* object)
{
    static_cast<StorageInfo*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(QUOTA)
