/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8RTCPeerConnection.h"

#if ENABLE(MEDIA_STREAM)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "Dictionary.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8Event.h"
#include "V8MediaStream.h"
#include "V8MediaStreamList.h"
#include "V8MediaStreamTrack.h"
#include "V8RTCDataChannel.h"
#include "V8RTCErrorCallback.h"
#include "V8RTCIceCandidate.h"
#include "V8RTCSessionDescription.h"
#include "V8RTCSessionDescriptionCallback.h"
#include "V8RTCStatsCallback.h"
#include "V8VoidCallback.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8RTCPeerConnection::info = { V8RTCPeerConnection::GetTemplate, V8RTCPeerConnection::derefObject, V8RTCPeerConnection::toActiveDOMObject, 0, V8RTCPeerConnection::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace RTCPeerConnectionV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> localDescriptionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    ExceptionCode ec = 0;
    RefPtr<RTCSessionDescription> v = imp->localDescription(ec);
    if (UNLIKELY(ec))
        return setDOMException(ec, info.GetIsolate());
    RefPtr<RTCSessionDescription> result = imp->localDescription(ec);
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "localDescription", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> remoteDescriptionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    ExceptionCode ec = 0;
    RefPtr<RTCSessionDescription> v = imp->remoteDescription(ec);
    if (UNLIKELY(ec))
        return setDOMException(ec, info.GetIsolate());
    RefPtr<RTCSessionDescription> result = imp->remoteDescription(ec);
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "remoteDescription", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> readyStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    return v8String(imp->readyState(), info.GetIsolate());
}

static v8::Handle<v8::Value> iceGatheringStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    return v8String(imp->iceGatheringState(), info.GetIsolate());
}

static v8::Handle<v8::Value> iceStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    return v8String(imp->iceState(), info.GetIsolate());
}

static v8::Handle<v8::Value> localStreamsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    RefPtr<MediaStreamList> result = imp->localStreams();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "localStreams", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> remoteStreamsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    RefPtr<MediaStreamList> result = imp->remoteStreams();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "remoteStreams", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> onnegotiationneededAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    return imp->onnegotiationneeded() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onnegotiationneeded())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onnegotiationneededAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onnegotiationneeded(), value, V8RTCPeerConnection::eventListenerCacheIndex);
    imp->setOnnegotiationneeded(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onicecandidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    return imp->onicecandidate() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onicecandidate())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onicecandidateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onicecandidate(), value, V8RTCPeerConnection::eventListenerCacheIndex);
    imp->setOnicecandidate(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onopenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    return imp->onopen() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onopen())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onopenAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onopen(), value, V8RTCPeerConnection::eventListenerCacheIndex);
    imp->setOnopen(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onstatechangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    return imp->onstatechange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onstatechange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onstatechangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onstatechange(), value, V8RTCPeerConnection::eventListenerCacheIndex);
    imp->setOnstatechange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onaddstreamAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    return imp->onaddstream() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onaddstream())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onaddstreamAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onaddstream(), value, V8RTCPeerConnection::eventListenerCacheIndex);
    imp->setOnaddstream(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onremovestreamAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    return imp->onremovestream() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onremovestream())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onremovestreamAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onremovestream(), value, V8RTCPeerConnection::eventListenerCacheIndex);
    imp->setOnremovestream(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ongatheringchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    return imp->ongatheringchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ongatheringchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ongatheringchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ongatheringchange(), value, V8RTCPeerConnection::eventListenerCacheIndex);
    imp->setOngatheringchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onicechangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    return imp->onicechange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onicechange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onicechangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onicechange(), value, V8RTCPeerConnection::eventListenerCacheIndex);
    imp->setOnicechange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondatachannelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    return imp->ondatachannel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondatachannel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondatachannelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondatachannel(), value, V8RTCPeerConnection::eventListenerCacheIndex);
    imp->setOndatachannel(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> createOfferCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0 || !args[0]->IsFunction())
        return throwTypeError(0, args.GetIsolate());
    RefPtr<RTCSessionDescriptionCallback> successCallback = V8RTCSessionDescriptionCallback::create(args[0], getScriptExecutionContext());
    RefPtr<RTCErrorCallback> failureCallback;
    if (args.Length() > 1 && !args[1]->IsNull() && !args[1]->IsUndefined()) {
        if (!args[1]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        failureCallback = V8RTCErrorCallback::create(args[1], getScriptExecutionContext());
    }
    V8TRYCATCH(Dictionary, mediaConstraints, Dictionary(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined), args.GetIsolate()));
    if (!mediaConstraints.isUndefinedOrNull() && !mediaConstraints.isObject())
        return throwTypeError("Not an object.", args.GetIsolate());
    imp->createOffer(successCallback, failureCallback, mediaConstraints, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createAnswerCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0 || !args[0]->IsFunction())
        return throwTypeError(0, args.GetIsolate());
    RefPtr<RTCSessionDescriptionCallback> successCallback = V8RTCSessionDescriptionCallback::create(args[0], getScriptExecutionContext());
    RefPtr<RTCErrorCallback> failureCallback;
    if (args.Length() > 1 && !args[1]->IsNull() && !args[1]->IsUndefined()) {
        if (!args[1]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        failureCallback = V8RTCErrorCallback::create(args[1], getScriptExecutionContext());
    }
    V8TRYCATCH(Dictionary, mediaConstraints, Dictionary(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined), args.GetIsolate()));
    if (!mediaConstraints.isUndefinedOrNull() && !mediaConstraints.isObject())
        return throwTypeError("Not an object.", args.GetIsolate());
    imp->createAnswer(successCallback, failureCallback, mediaConstraints, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setLocalDescriptionCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(RTCSessionDescription*, description, V8RTCSessionDescription::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8RTCSessionDescription::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    RefPtr<VoidCallback> successCallback;
    if (args.Length() > 1 && !args[1]->IsNull() && !args[1]->IsUndefined()) {
        if (!args[1]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        successCallback = V8VoidCallback::create(args[1], getScriptExecutionContext());
    }
    RefPtr<RTCErrorCallback> failureCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        failureCallback = V8RTCErrorCallback::create(args[2], getScriptExecutionContext());
    }
    imp->setLocalDescription(description, successCallback, failureCallback, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> setRemoteDescriptionCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(RTCSessionDescription*, description, V8RTCSessionDescription::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8RTCSessionDescription::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    RefPtr<VoidCallback> successCallback;
    if (args.Length() > 1 && !args[1]->IsNull() && !args[1]->IsUndefined()) {
        if (!args[1]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        successCallback = V8VoidCallback::create(args[1], getScriptExecutionContext());
    }
    RefPtr<RTCErrorCallback> failureCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        failureCallback = V8RTCErrorCallback::create(args[2], getScriptExecutionContext());
    }
    imp->setRemoteDescription(description, successCallback, failureCallback, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> updateIceCallback(const v8::Arguments& args)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Dictionary, configuration, Dictionary(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined), args.GetIsolate()));
    if (!configuration.isUndefinedOrNull() && !configuration.isObject())
        return throwTypeError("Not an object.", args.GetIsolate());
    V8TRYCATCH(Dictionary, mediaConstraints, Dictionary(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined), args.GetIsolate()));
    if (!mediaConstraints.isUndefinedOrNull() && !mediaConstraints.isObject())
        return throwTypeError("Not an object.", args.GetIsolate());
    imp->updateIce(configuration, mediaConstraints, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> addIceCandidateCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(RTCIceCandidate*, candidate, V8RTCIceCandidate::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8RTCIceCandidate::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->addIceCandidate(candidate, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> addStreamCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8MediaStream::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(MediaStream*, stream, V8MediaStream::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8MediaStream::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(Dictionary, mediaConstraints, Dictionary(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined), args.GetIsolate()));
    if (!mediaConstraints.isUndefinedOrNull() && !mediaConstraints.isObject())
        return throwTypeError("Not an object.", args.GetIsolate());
    imp->addStream(stream, mediaConstraints, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> removeStreamCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8MediaStream::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(MediaStream*, stream, V8MediaStream::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8MediaStream::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->removeStream(stream, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getStatsCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(args.Holder());
    if (args.Length() <= 0 || !args[0]->IsFunction())
        return throwTypeError(0, args.GetIsolate());
    RefPtr<RTCStatsCallback> successCallback = V8RTCStatsCallback::create(args[0], getScriptExecutionContext());
    V8TRYCATCH(MediaStreamTrack*, selector, V8MediaStreamTrack::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8MediaStreamTrack::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    imp->getStats(successCallback, selector);
    return v8Undefined();
}

static v8::Handle<v8::Value> createDataChannelCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithUndefinedOrNullCheck>, label, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH(Dictionary, options, Dictionary(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined), args.GetIsolate()));
    if (!options.isUndefinedOrNull() && !options.isObject())
        return throwTypeError("Not an object.", args.GetIsolate());
    RefPtr<RTCDataChannel> result = imp->createDataChannel(label, options, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> closeCallback(const v8::Arguments& args)
{
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->close(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> addEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOrCreate);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8RTCPeerConnection::toNative(args.Holder())->addEventListener(stringResource, listener, args[2]->BooleanValue());
        createHiddenDependency(args.Holder(), args[1], V8RTCPeerConnection::eventListenerCacheIndex);
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> removeEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOnly);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8RTCPeerConnection::toNative(args.Holder())->removeEventListener(stringResource, listener.get(), args[2]->BooleanValue());
        removeHiddenDependency(args.Holder(), args[1], V8RTCPeerConnection::eventListenerCacheIndex);
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RTCPeerConnection* imp = V8RTCPeerConnection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Event*, event, V8Event::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    bool result = imp->dispatchEvent(event, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace RTCPeerConnectionV8Internal

static const V8DOMConfiguration::BatchedAttribute V8RTCPeerConnectionAttrs[] = {
    // Attribute 'localDescription' (Type: 'readonly attribute' ExtAttr: '')
    {"localDescription", RTCPeerConnectionV8Internal::localDescriptionAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'remoteDescription' (Type: 'readonly attribute' ExtAttr: '')
    {"remoteDescription", RTCPeerConnectionV8Internal::remoteDescriptionAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'readyState' (Type: 'readonly attribute' ExtAttr: '')
    {"readyState", RTCPeerConnectionV8Internal::readyStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'iceGatheringState' (Type: 'readonly attribute' ExtAttr: '')
    {"iceGatheringState", RTCPeerConnectionV8Internal::iceGatheringStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'iceState' (Type: 'readonly attribute' ExtAttr: '')
    {"iceState", RTCPeerConnectionV8Internal::iceStateAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'localStreams' (Type: 'readonly attribute' ExtAttr: '')
    {"localStreams", RTCPeerConnectionV8Internal::localStreamsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'remoteStreams' (Type: 'readonly attribute' ExtAttr: '')
    {"remoteStreams", RTCPeerConnectionV8Internal::remoteStreamsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onnegotiationneeded' (Type: 'attribute' ExtAttr: '')
    {"onnegotiationneeded", RTCPeerConnectionV8Internal::onnegotiationneededAttrGetter, RTCPeerConnectionV8Internal::onnegotiationneededAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onicecandidate' (Type: 'attribute' ExtAttr: '')
    {"onicecandidate", RTCPeerConnectionV8Internal::onicecandidateAttrGetter, RTCPeerConnectionV8Internal::onicecandidateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onopen' (Type: 'attribute' ExtAttr: '')
    {"onopen", RTCPeerConnectionV8Internal::onopenAttrGetter, RTCPeerConnectionV8Internal::onopenAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onstatechange' (Type: 'attribute' ExtAttr: '')
    {"onstatechange", RTCPeerConnectionV8Internal::onstatechangeAttrGetter, RTCPeerConnectionV8Internal::onstatechangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onaddstream' (Type: 'attribute' ExtAttr: '')
    {"onaddstream", RTCPeerConnectionV8Internal::onaddstreamAttrGetter, RTCPeerConnectionV8Internal::onaddstreamAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onremovestream' (Type: 'attribute' ExtAttr: '')
    {"onremovestream", RTCPeerConnectionV8Internal::onremovestreamAttrGetter, RTCPeerConnectionV8Internal::onremovestreamAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'ongatheringchange' (Type: 'attribute' ExtAttr: '')
    {"ongatheringchange", RTCPeerConnectionV8Internal::ongatheringchangeAttrGetter, RTCPeerConnectionV8Internal::ongatheringchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onicechange' (Type: 'attribute' ExtAttr: '')
    {"onicechange", RTCPeerConnectionV8Internal::onicechangeAttrGetter, RTCPeerConnectionV8Internal::onicechangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'ondatachannel' (Type: 'attribute' ExtAttr: '')
    {"ondatachannel", RTCPeerConnectionV8Internal::ondatachannelAttrGetter, RTCPeerConnectionV8Internal::ondatachannelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8RTCPeerConnectionCallbacks[] = {
    {"createOffer", RTCPeerConnectionV8Internal::createOfferCallback},
    {"createAnswer", RTCPeerConnectionV8Internal::createAnswerCallback},
    {"setLocalDescription", RTCPeerConnectionV8Internal::setLocalDescriptionCallback},
    {"setRemoteDescription", RTCPeerConnectionV8Internal::setRemoteDescriptionCallback},
    {"updateIce", RTCPeerConnectionV8Internal::updateIceCallback},
    {"addStream", RTCPeerConnectionV8Internal::addStreamCallback},
    {"removeStream", RTCPeerConnectionV8Internal::removeStreamCallback},
    {"getStats", RTCPeerConnectionV8Internal::getStatsCallback},
    {"createDataChannel", RTCPeerConnectionV8Internal::createDataChannelCallback},
    {"close", RTCPeerConnectionV8Internal::closeCallback},
    {"addEventListener", RTCPeerConnectionV8Internal::addEventListenerCallback},
    {"removeEventListener", RTCPeerConnectionV8Internal::removeEventListenerCallback},
};

v8::Handle<v8::Value> V8RTCPeerConnection::constructorCallback(const v8::Arguments& args)
{
    
    if (!args.IsConstructCall())
        return throwTypeError("DOM object constructor cannot be called as a function.");

    if (ConstructorMode::current() == ConstructorMode::WrapExistingObject)
        return args.Holder();
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());

    ExceptionCode ec = 0;
    V8TRYCATCH(Dictionary, rtcIceServers, Dictionary(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined), args.GetIsolate()));
    if (!rtcIceServers.isUndefinedOrNull() && !rtcIceServers.isObject())
        return throwTypeError("Not an object.", args.GetIsolate());
    V8TRYCATCH(Dictionary, mediaConstraints, Dictionary(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined), args.GetIsolate()));
    if (!mediaConstraints.isUndefinedOrNull() && !mediaConstraints.isObject())
        return throwTypeError("Not an object.", args.GetIsolate());

    ScriptExecutionContext* context = getScriptExecutionContext();

    RefPtr<RTCPeerConnection> impl = RTCPeerConnection::create(context, rtcIceServers, mediaConstraints, ec);
    v8::Handle<v8::Object> wrapper = args.Holder();
    if (ec)
        goto fail;

    V8DOMWrapper::associateObjectWithWrapper(impl.release(), &info, wrapper, args.GetIsolate());
    return wrapper;
  fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Persistent<v8::FunctionTemplate> ConfigureV8RTCPeerConnectionTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "RTCPeerConnection", v8::Persistent<v8::FunctionTemplate>(), V8RTCPeerConnection::internalFieldCount,
        V8RTCPeerConnectionAttrs, WTF_ARRAY_LENGTH(V8RTCPeerConnectionAttrs),
        V8RTCPeerConnectionCallbacks, WTF_ARRAY_LENGTH(V8RTCPeerConnectionCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    desc->SetCallHandler(V8RTCPeerConnection::constructorCallback);
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'addIceCandidate'
    const int addIceCandidateArgc = 1;
    v8::Handle<v8::FunctionTemplate> addIceCandidateArgv[addIceCandidateArgc] = { V8RTCIceCandidate::GetRawTemplate() };
    v8::Handle<v8::Signature> addIceCandidateSignature = v8::Signature::New(desc, addIceCandidateArgc, addIceCandidateArgv);
    proto->Set(v8::String::NewSymbol("addIceCandidate"), v8::FunctionTemplate::New(RTCPeerConnectionV8Internal::addIceCandidateCallback, v8Undefined(), addIceCandidateSignature));

    // Custom Signature 'dispatchEvent'
    const int dispatchEventArgc = 1;
    v8::Handle<v8::FunctionTemplate> dispatchEventArgv[dispatchEventArgc] = { V8Event::GetRawTemplate() };
    v8::Handle<v8::Signature> dispatchEventSignature = v8::Signature::New(desc, dispatchEventArgc, dispatchEventArgv);
    proto->Set(v8::String::NewSymbol("dispatchEvent"), v8::FunctionTemplate::New(RTCPeerConnectionV8Internal::dispatchEventCallback, v8Undefined(), dispatchEventSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8RTCPeerConnection::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8RTCPeerConnection::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8RTCPeerConnectionTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8RTCPeerConnection::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}

ActiveDOMObject* V8RTCPeerConnection::toActiveDOMObject(v8::Handle<v8::Object> object)
{
    return toNative(object);
}      

v8::Handle<v8::Object> V8RTCPeerConnection::createWrapper(PassRefPtr<RTCPeerConnection> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8RTCPeerConnection::derefObject(void* object)
{
    static_cast<RTCPeerConnection*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(MEDIA_STREAM)
