/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8AudioParam.h"

#if ENABLE(WEB_AUDIO)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "FeatureObserver.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8Float32Array.h"
#include <wtf/Float32Array.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8AudioParam::info = { V8AudioParam::GetTemplate, V8AudioParam::derefObject, 0, 0, V8AudioParam::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace AudioParamV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> valueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioParam* imp = V8AudioParam::toNative(info.Holder());
    return v8::Number::New(imp->value());
}

static void valueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    AudioParam* imp = V8AudioParam::toNative(info.Holder());
    float v = static_cast<float>(value->NumberValue());
    imp->setValue(v);
    return;
}

static v8::Handle<v8::Value> minValueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioParam* imp = V8AudioParam::toNative(info.Holder());
    return v8::Number::New(imp->minValue());
}

static v8::Handle<v8::Value> maxValueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioParam* imp = V8AudioParam::toNative(info.Holder());
    return v8::Number::New(imp->maxValue());
}

static v8::Handle<v8::Value> defaultValueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioParam* imp = V8AudioParam::toNative(info.Holder());
    return v8::Number::New(imp->defaultValue());
}

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioParam* imp = V8AudioParam::toNative(info.Holder());
    return v8String(imp->name(), info.GetIsolate());
}

static v8::Handle<v8::Value> unitsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    AudioParam* imp = V8AudioParam::toNative(info.Holder());
    return v8Integer(imp->units(), info.GetIsolate());
}

static v8::Handle<v8::Value> setValueAtTimeCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioParam* imp = V8AudioParam::toNative(args.Holder());
    V8TRYCATCH(float, value, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, time, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->setValueAtTime(value, time);
    return v8Undefined();
}

static v8::Handle<v8::Value> linearRampToValueAtTimeCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioParam* imp = V8AudioParam::toNative(args.Holder());
    V8TRYCATCH(float, value, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, time, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->linearRampToValueAtTime(value, time);
    return v8Undefined();
}

static v8::Handle<v8::Value> exponentialRampToValueAtTimeCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioParam* imp = V8AudioParam::toNative(args.Holder());
    V8TRYCATCH(float, value, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, time, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->exponentialRampToValueAtTime(value, time);
    return v8Undefined();
}

static v8::Handle<v8::Value> setTargetAtTimeCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioParam* imp = V8AudioParam::toNative(args.Holder());
    V8TRYCATCH(float, target, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, time, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, timeConstant, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    imp->setTargetAtTime(target, time, timeConstant);
    return v8Undefined();
}

static v8::Handle<v8::Value> setValueCurveAtTimeCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioParam* imp = V8AudioParam::toNative(args.Holder());
    V8TRYCATCH(Float32Array*, values, V8Float32Array::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Float32Array::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, time, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, duration, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    imp->setValueCurveAtTime(values, time, duration);
    return v8Undefined();
}

static v8::Handle<v8::Value> cancelScheduledValuesCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioParam* imp = V8AudioParam::toNative(args.Holder());
    V8TRYCATCH(float, startTime, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    imp->cancelScheduledValues(startTime);
    return v8Undefined();
}

static v8::Handle<v8::Value> setTargetValueAtTimeCallback(const v8::Arguments& args)
{
    FeatureObserver::observe(activeDOMWindow(BindingState::instance()), FeatureObserver::LegacyWebAudio);
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    AudioParam* imp = V8AudioParam::toNative(args.Holder());
    V8TRYCATCH(float, targetValue, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, time, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, timeConstant, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    imp->setTargetAtTime(targetValue, time, timeConstant);
    return v8Undefined();
}

} // namespace AudioParamV8Internal

static const V8DOMConfiguration::BatchedAttribute V8AudioParamAttrs[] = {
    // Attribute 'value' (Type: 'attribute' ExtAttr: '')
    {"value", AudioParamV8Internal::valueAttrGetter, AudioParamV8Internal::valueAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'minValue' (Type: 'readonly attribute' ExtAttr: '')
    {"minValue", AudioParamV8Internal::minValueAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'maxValue' (Type: 'readonly attribute' ExtAttr: '')
    {"maxValue", AudioParamV8Internal::maxValueAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'defaultValue' (Type: 'readonly attribute' ExtAttr: '')
    {"defaultValue", AudioParamV8Internal::defaultValueAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'name' (Type: 'readonly attribute' ExtAttr: '')
    {"name", AudioParamV8Internal::nameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'units' (Type: 'readonly attribute' ExtAttr: '')
    {"units", AudioParamV8Internal::unitsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8AudioParamCallbacks[] = {
    {"setValueAtTime", AudioParamV8Internal::setValueAtTimeCallback},
    {"linearRampToValueAtTime", AudioParamV8Internal::linearRampToValueAtTimeCallback},
    {"exponentialRampToValueAtTime", AudioParamV8Internal::exponentialRampToValueAtTimeCallback},
    {"setTargetAtTime", AudioParamV8Internal::setTargetAtTimeCallback},
    {"cancelScheduledValues", AudioParamV8Internal::cancelScheduledValuesCallback},
    {"setTargetValueAtTime", AudioParamV8Internal::setTargetValueAtTimeCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8AudioParamTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "AudioParam", v8::Persistent<v8::FunctionTemplate>(), V8AudioParam::internalFieldCount,
        V8AudioParamAttrs, WTF_ARRAY_LENGTH(V8AudioParamAttrs),
        V8AudioParamCallbacks, WTF_ARRAY_LENGTH(V8AudioParamCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'setValueCurveAtTime'
    const int setValueCurveAtTimeArgc = 3;
    v8::Handle<v8::FunctionTemplate> setValueCurveAtTimeArgv[setValueCurveAtTimeArgc] = { V8Float32Array::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
    v8::Handle<v8::Signature> setValueCurveAtTimeSignature = v8::Signature::New(desc, setValueCurveAtTimeArgc, setValueCurveAtTimeArgv);
    proto->Set(v8::String::NewSymbol("setValueCurveAtTime"), v8::FunctionTemplate::New(AudioParamV8Internal::setValueCurveAtTimeCallback, v8Undefined(), setValueCurveAtTimeSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8AudioParam::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8AudioParam::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8AudioParamTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8AudioParam::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8AudioParam::createWrapper(PassRefPtr<AudioParam> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8AudioParam::derefObject(void* object)
{
    static_cast<AudioParam*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(WEB_AUDIO)
