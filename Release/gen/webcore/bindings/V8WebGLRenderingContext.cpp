/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8WebGLRenderingContext.h"

#if ENABLE(WEBGL)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8ArrayBuffer.h"
#include "V8ArrayBufferView.h"
#include "V8Binding.h"
#include "V8CanvasRenderingContext.h"
#include "V8DOMWrapper.h"
#include "V8HTMLCanvasElement.h"
#include "V8HTMLImageElement.h"
#include "V8HTMLVideoElement.h"
#include "V8ImageData.h"
#include "V8WebGLActiveInfo.h"
#include "V8WebGLBuffer.h"
#include "V8WebGLContextAttributes.h"
#include "V8WebGLFramebuffer.h"
#include "V8WebGLProgram.h"
#include "V8WebGLRenderbuffer.h"
#include "V8WebGLShader.h"
#include "V8WebGLShaderPrecisionFormat.h"
#include "V8WebGLTexture.h"
#include "V8WebGLUniformLocation.h"
#include <wtf/ArrayBuffer.h>
#include <wtf/ArrayBufferView.h>
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8WebGLRenderingContext::info = { V8WebGLRenderingContext::GetTemplate, V8WebGLRenderingContext::derefObject, 0, 0, V8WebGLRenderingContext::installPerContextPrototypeProperties, &V8CanvasRenderingContext::info, WrapperTypeObjectPrototype };

namespace WebGLRenderingContextV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> drawingBufferWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(info.Holder());
    return v8Integer(imp->drawingBufferWidth(), info.GetIsolate());
}

static v8::Handle<v8::Value> drawingBufferHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(info.Holder());
    return v8Integer(imp->drawingBufferHeight(), info.GetIsolate());
}

static v8::Handle<v8::Value> activeTextureCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, texture, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->activeTexture(texture, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> attachShaderCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLProgram*, program, V8WebGLProgram::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    if (args.Length() > 1 && !isUndefinedOrNull(args[1]) && !V8WebGLShader::HasInstance(args[1]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLShader*, shader, V8WebGLShader::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    imp->attachShader(program, shader, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> bindAttribLocationCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLProgram*, program, V8WebGLProgram::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(unsigned, index, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined));
    imp->bindAttribLocation(program, index, name, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> bindBufferCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (args.Length() > 1 && !isUndefinedOrNull(args[1]) && !V8WebGLBuffer::HasInstance(args[1]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLBuffer*, buffer, V8WebGLBuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8WebGLBuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    imp->bindBuffer(target, buffer, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> bindFramebufferCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (args.Length() > 1 && !isUndefinedOrNull(args[1]) && !V8WebGLFramebuffer::HasInstance(args[1]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLFramebuffer*, framebuffer, V8WebGLFramebuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8WebGLFramebuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    imp->bindFramebuffer(target, framebuffer, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> bindRenderbufferCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (args.Length() > 1 && !isUndefinedOrNull(args[1]) && !V8WebGLRenderbuffer::HasInstance(args[1]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLRenderbuffer*, renderbuffer, V8WebGLRenderbuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8WebGLRenderbuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    imp->bindRenderbuffer(target, renderbuffer, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> bindTextureCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (args.Length() > 1 && !isUndefinedOrNull(args[1]) && !V8WebGLTexture::HasInstance(args[1]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLTexture*, texture, V8WebGLTexture::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8WebGLTexture::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    imp->bindTexture(target, texture, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> blendColorCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(float, red, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, green, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, blue, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, alpha, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    imp->blendColor(red, green, blue, alpha);
    return v8Undefined();
}

static v8::Handle<v8::Value> blendEquationCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, mode, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->blendEquation(mode);
    return v8Undefined();
}

static v8::Handle<v8::Value> blendEquationSeparateCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, modeRGB, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, modeAlpha, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    imp->blendEquationSeparate(modeRGB, modeAlpha);
    return v8Undefined();
}

static v8::Handle<v8::Value> blendFuncCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, sfactor, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, dfactor, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    imp->blendFunc(sfactor, dfactor);
    return v8Undefined();
}

static v8::Handle<v8::Value> blendFuncSeparateCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, srcRGB, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, dstRGB, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, srcAlpha, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, dstAlpha, toUInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    imp->blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
    return v8Undefined();
}

static v8::Handle<v8::Value> bufferData1Callback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (args.Length() > 1 && !isUndefinedOrNull(args[1]) && !V8ArrayBuffer::HasInstance(args[1]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(ArrayBuffer*, data, V8ArrayBuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8ArrayBuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    V8TRYCATCH(unsigned, usage, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    imp->bufferData(target, data, usage, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> bufferData2Callback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    if (args.Length() > 1 && !isUndefinedOrNull(args[1]) && !V8ArrayBufferView::HasInstance(args[1]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(ArrayBufferView*, data, V8ArrayBufferView::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8ArrayBufferView::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    V8TRYCATCH(unsigned, usage, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    imp->bufferData(target, data, usage, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> bufferData3Callback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(long long, size, toInt64(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, usage, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    imp->bufferData(target, size, usage, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> bufferDataCallback(const v8::Arguments& args)
{
    if ((args.Length() == 3 && (args[1]->IsNull() || V8ArrayBuffer::HasInstance(args[1]))))
        return bufferData1Callback(args);
    if ((args.Length() == 3 && (args[1]->IsNull() || V8ArrayBufferView::HasInstance(args[1]))))
        return bufferData2Callback(args);
    if (args.Length() == 3)
        return bufferData3Callback(args);
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> bufferSubData1Callback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(long long, offset, toInt64(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    if (args.Length() > 2 && !isUndefinedOrNull(args[2]) && !V8ArrayBuffer::HasInstance(args[2]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(ArrayBuffer*, data, V8ArrayBuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)) ? V8ArrayBuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined))) : 0);
    imp->bufferSubData(target, offset, data, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> bufferSubData2Callback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(long long, offset, toInt64(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    if (args.Length() > 2 && !isUndefinedOrNull(args[2]) && !V8ArrayBufferView::HasInstance(args[2]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(ArrayBufferView*, data, V8ArrayBufferView::HasInstance(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)) ? V8ArrayBufferView::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined))) : 0);
    imp->bufferSubData(target, offset, data, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> bufferSubDataCallback(const v8::Arguments& args)
{
    if ((args.Length() == 3 && (args[2]->IsNull() || V8ArrayBuffer::HasInstance(args[2]))))
        return bufferSubData1Callback(args);
    if ((args.Length() == 3 && (args[2]->IsNull() || V8ArrayBufferView::HasInstance(args[2]))))
        return bufferSubData2Callback(args);
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> checkFramebufferStatusCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    return v8UnsignedInteger(imp->checkFramebufferStatus(target), args.GetIsolate());
}

static v8::Handle<v8::Value> clearCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, mask, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->clear(mask);
    return v8Undefined();
}

static v8::Handle<v8::Value> clearColorCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(float, red, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, green, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, blue, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, alpha, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    imp->clearColor(red, green, blue, alpha);
    return v8Undefined();
}

static v8::Handle<v8::Value> clearDepthCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(float, depth, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    imp->clearDepth(depth);
    return v8Undefined();
}

static v8::Handle<v8::Value> clearStencilCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(int, s, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->clearStencil(s);
    return v8Undefined();
}

static v8::Handle<v8::Value> colorMaskCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(bool, red, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    V8TRYCATCH(bool, green, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->BooleanValue());
    V8TRYCATCH(bool, blue, MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->BooleanValue());
    V8TRYCATCH(bool, alpha, MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->BooleanValue());
    imp->colorMask(red, green, blue, alpha);
    return v8Undefined();
}

static v8::Handle<v8::Value> compileShaderCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLShader::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLShader*, shader, V8WebGLShader::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->compileShader(shader, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> compressedTexImage2DCallback(const v8::Arguments& args)
{
    if (args.Length() < 7)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, internalformat, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, width, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(int, height, toInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    V8TRYCATCH(int, border, toInt32(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)));
    if (args.Length() > 6 && !isUndefinedOrNull(args[6]) && !V8ArrayBufferView::HasInstance(args[6]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(ArrayBufferView*, data, V8ArrayBufferView::HasInstance(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)) ? V8ArrayBufferView::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined))) : 0);
    imp->compressedTexImage2D(target, level, internalformat, width, height, border, data);
    return v8Undefined();
}

static v8::Handle<v8::Value> compressedTexSubImage2DCallback(const v8::Arguments& args)
{
    if (args.Length() < 8)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, xoffset, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, yoffset, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(int, width, toInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    V8TRYCATCH(int, height, toInt32(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, format, toUInt32(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)));
    if (args.Length() > 7 && !isUndefinedOrNull(args[7]) && !V8ArrayBufferView::HasInstance(args[7]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(ArrayBufferView*, data, V8ArrayBufferView::HasInstance(MAYBE_MISSING_PARAMETER(args, 7, DefaultIsUndefined)) ? V8ArrayBufferView::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 7, DefaultIsUndefined))) : 0);
    imp->compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, data);
    return v8Undefined();
}

static v8::Handle<v8::Value> copyTexImage2DCallback(const v8::Arguments& args)
{
    if (args.Length() < 8)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, internalformat, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    V8TRYCATCH(int, width, toInt32(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)));
    V8TRYCATCH(int, height, toInt32(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)));
    V8TRYCATCH(int, border, toInt32(MAYBE_MISSING_PARAMETER(args, 7, DefaultIsUndefined)));
    imp->copyTexImage2D(target, level, internalformat, x, y, width, height, border);
    return v8Undefined();
}

static v8::Handle<v8::Value> copyTexSubImage2DCallback(const v8::Arguments& args)
{
    if (args.Length() < 8)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, xoffset, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, yoffset, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    V8TRYCATCH(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)));
    V8TRYCATCH(int, width, toInt32(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)));
    V8TRYCATCH(int, height, toInt32(MAYBE_MISSING_PARAMETER(args, 7, DefaultIsUndefined)));
    imp->copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    return v8Undefined();
}

static v8::Handle<v8::Value> createBufferCallback(const v8::Arguments& args)
{
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return toV8(imp->createBuffer(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createFramebufferCallback(const v8::Arguments& args)
{
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return toV8(imp->createFramebuffer(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createProgramCallback(const v8::Arguments& args)
{
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return toV8(imp->createProgram(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createRenderbufferCallback(const v8::Arguments& args)
{
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return toV8(imp->createRenderbuffer(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> createShaderCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    RefPtr<WebGLShader> result = imp->createShader(type, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> createTextureCallback(const v8::Arguments& args)
{
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return toV8(imp->createTexture(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> cullFaceCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, mode, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->cullFace(mode);
    return v8Undefined();
}

static v8::Handle<v8::Value> deleteBufferCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLBuffer::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLBuffer*, buffer, V8WebGLBuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLBuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->deleteBuffer(buffer);
    return v8Undefined();
}

static v8::Handle<v8::Value> deleteFramebufferCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLFramebuffer::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLFramebuffer*, framebuffer, V8WebGLFramebuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLFramebuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->deleteFramebuffer(framebuffer);
    return v8Undefined();
}

static v8::Handle<v8::Value> deleteProgramCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLProgram*, program, V8WebGLProgram::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->deleteProgram(program);
    return v8Undefined();
}

static v8::Handle<v8::Value> deleteRenderbufferCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLRenderbuffer::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLRenderbuffer*, renderbuffer, V8WebGLRenderbuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLRenderbuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->deleteRenderbuffer(renderbuffer);
    return v8Undefined();
}

static v8::Handle<v8::Value> deleteShaderCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLShader::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLShader*, shader, V8WebGLShader::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->deleteShader(shader);
    return v8Undefined();
}

static v8::Handle<v8::Value> deleteTextureCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLTexture::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLTexture*, texture, V8WebGLTexture::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLTexture::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->deleteTexture(texture);
    return v8Undefined();
}

static v8::Handle<v8::Value> depthFuncCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, func, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->depthFunc(func);
    return v8Undefined();
}

static v8::Handle<v8::Value> depthMaskCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(bool, flag, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->depthMask(flag);
    return v8Undefined();
}

static v8::Handle<v8::Value> depthRangeCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(float, zNear, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, zFar, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->depthRange(zNear, zFar);
    return v8Undefined();
}

static v8::Handle<v8::Value> detachShaderCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLProgram*, program, V8WebGLProgram::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    if (args.Length() > 1 && !isUndefinedOrNull(args[1]) && !V8WebGLShader::HasInstance(args[1]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLShader*, shader, V8WebGLShader::HasInstance(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined))) : 0);
    imp->detachShader(program, shader, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> disableCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, cap, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->disable(cap);
    return v8Undefined();
}

static v8::Handle<v8::Value> disableVertexAttribArrayCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, index, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->disableVertexAttribArray(index, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> drawArraysCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, mode, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, first, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, count, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    imp->drawArrays(mode, first, count, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> drawElementsCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, mode, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, count, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(long long, offset, toInt64(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    imp->drawElements(mode, count, type, offset, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> enableCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, cap, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->enable(cap);
    return v8Undefined();
}

static v8::Handle<v8::Value> enableVertexAttribArrayCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, index, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->enableVertexAttribArray(index, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> finishCallback(const v8::Arguments& args)
{
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    imp->finish();
    return v8Undefined();
}

static v8::Handle<v8::Value> flushCallback(const v8::Arguments& args)
{
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    imp->flush();
    return v8Undefined();
}

static v8::Handle<v8::Value> framebufferRenderbufferCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, attachment, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, renderbuffertarget, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    if (args.Length() > 3 && !isUndefinedOrNull(args[3]) && !V8WebGLRenderbuffer::HasInstance(args[3]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLRenderbuffer*, renderbuffer, V8WebGLRenderbuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)) ? V8WebGLRenderbuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined))) : 0);
    imp->framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> framebufferTexture2DCallback(const v8::Arguments& args)
{
    if (args.Length() < 5)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, attachment, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, textarget, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    if (args.Length() > 3 && !isUndefinedOrNull(args[3]) && !V8WebGLTexture::HasInstance(args[3]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLTexture*, texture, V8WebGLTexture::HasInstance(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)) ? V8WebGLTexture::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined))) : 0);
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    imp->framebufferTexture2D(target, attachment, textarget, texture, level, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> frontFaceCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, mode, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->frontFace(mode);
    return v8Undefined();
}

static v8::Handle<v8::Value> generateMipmapCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->generateMipmap(target);
    return v8Undefined();
}

static v8::Handle<v8::Value> getActiveAttribCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLProgram*, program, V8WebGLProgram::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(unsigned, index, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    RefPtr<WebGLActiveInfo> result = imp->getActiveAttrib(program, index, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getActiveUniformCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLProgram*, program, V8WebGLProgram::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(unsigned, index, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    RefPtr<WebGLActiveInfo> result = imp->getActiveUniform(program, index, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getAttribLocationCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLProgram*, program, V8WebGLProgram::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    return v8Integer(imp->getAttribLocation(program, name), args.GetIsolate());
}

static v8::Handle<v8::Value> getContextAttributesCallback(const v8::Arguments& args)
{
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return toV8(imp->getContextAttributes(), args.Holder(), args.GetIsolate());
}

static v8::Handle<v8::Value> getErrorCallback(const v8::Arguments& args)
{
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return v8UnsignedInteger(imp->getError(), args.GetIsolate());
}

static v8::Handle<v8::Value> getProgramInfoLogCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLProgram*, program, V8WebGLProgram::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    String result = imp->getProgramInfoLog(program, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8StringOrNull(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getShaderInfoLogCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLShader::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLShader*, shader, V8WebGLShader::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    String result = imp->getShaderInfoLog(shader, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8StringOrNull(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getShaderPrecisionFormatCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, shadertype, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, precisiontype, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    RefPtr<WebGLShaderPrecisionFormat> result = imp->getShaderPrecisionFormat(shadertype, precisiontype, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getShaderSourceCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLShader::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLShader*, shader, V8WebGLShader::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    String result = imp->getShaderSource(shader, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8StringOrNull(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getUniformLocationCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLProgram*, program, V8WebGLProgram::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    RefPtr<WebGLUniformLocation> result = imp->getUniformLocation(program, name, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getVertexAttribOffsetCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, index, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, pname, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    return v8::Number::New(static_cast<double>(imp->getVertexAttribOffset(index, pname)));
}

static v8::Handle<v8::Value> hintCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, mode, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    imp->hint(target, mode);
    return v8Undefined();
}

static v8::Handle<v8::Value> isBufferCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLBuffer::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLBuffer*, buffer, V8WebGLBuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLBuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    return v8Boolean(imp->isBuffer(buffer), args.GetIsolate());
}

static v8::Handle<v8::Value> isContextLostCallback(const v8::Arguments& args)
{
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return v8Boolean(imp->isContextLost(), args.GetIsolate());
}

static v8::Handle<v8::Value> isEnabledCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, cap, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    return v8Boolean(imp->isEnabled(cap), args.GetIsolate());
}

static v8::Handle<v8::Value> isFramebufferCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLFramebuffer::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLFramebuffer*, framebuffer, V8WebGLFramebuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLFramebuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    return v8Boolean(imp->isFramebuffer(framebuffer), args.GetIsolate());
}

static v8::Handle<v8::Value> isProgramCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLProgram*, program, V8WebGLProgram::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    return v8Boolean(imp->isProgram(program), args.GetIsolate());
}

static v8::Handle<v8::Value> isRenderbufferCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLRenderbuffer::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLRenderbuffer*, renderbuffer, V8WebGLRenderbuffer::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLRenderbuffer::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    return v8Boolean(imp->isRenderbuffer(renderbuffer), args.GetIsolate());
}

static v8::Handle<v8::Value> isShaderCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLShader::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLShader*, shader, V8WebGLShader::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    return v8Boolean(imp->isShader(shader), args.GetIsolate());
}

static v8::Handle<v8::Value> isTextureCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLTexture::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLTexture*, texture, V8WebGLTexture::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLTexture::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    return v8Boolean(imp->isTexture(texture), args.GetIsolate());
}

static v8::Handle<v8::Value> lineWidthCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(float, width, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    imp->lineWidth(width);
    return v8Undefined();
}

static v8::Handle<v8::Value> linkProgramCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLProgram*, program, V8WebGLProgram::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->linkProgram(program, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> pixelStoreiCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, pname, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, param, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    imp->pixelStorei(pname, param);
    return v8Undefined();
}

static v8::Handle<v8::Value> polygonOffsetCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(float, factor, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, units, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->polygonOffset(factor, units);
    return v8Undefined();
}

static v8::Handle<v8::Value> readPixelsCallback(const v8::Arguments& args)
{
    if (args.Length() < 7)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, width, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, height, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, format, toUInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)));
    if (args.Length() > 6 && !isUndefinedOrNull(args[6]) && !V8ArrayBufferView::HasInstance(args[6]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(ArrayBufferView*, pixels, V8ArrayBufferView::HasInstance(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)) ? V8ArrayBufferView::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined))) : 0);
    imp->readPixels(x, y, width, height, format, type, pixels, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> releaseShaderCompilerCallback(const v8::Arguments& args)
{
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    imp->releaseShaderCompiler();
    return v8Undefined();
}

static v8::Handle<v8::Value> renderbufferStorageCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, internalformat, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, width, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, height, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    imp->renderbufferStorage(target, internalformat, width, height);
    return v8Undefined();
}

static v8::Handle<v8::Value> sampleCoverageCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(float, value, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(bool, invert, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->BooleanValue());
    imp->sampleCoverage(value, invert);
    return v8Undefined();
}

static v8::Handle<v8::Value> scissorCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, width, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, height, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    imp->scissor(x, y, width, height);
    return v8Undefined();
}

static v8::Handle<v8::Value> shaderSourceCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLShader::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLShader*, shader, V8WebGLShader::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, string, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    imp->shaderSource(shader, string, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> stencilFuncCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, func, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, ref, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, mask, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    imp->stencilFunc(func, ref, mask);
    return v8Undefined();
}

static v8::Handle<v8::Value> stencilFuncSeparateCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, face, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, func, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, ref, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, mask, toUInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    imp->stencilFuncSeparate(face, func, ref, mask);
    return v8Undefined();
}

static v8::Handle<v8::Value> stencilMaskCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, mask, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->stencilMask(mask);
    return v8Undefined();
}

static v8::Handle<v8::Value> stencilMaskSeparateCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, face, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, mask, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    imp->stencilMaskSeparate(face, mask);
    return v8Undefined();
}

static v8::Handle<v8::Value> stencilOpCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, fail, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, zfail, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, zpass, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    imp->stencilOp(fail, zfail, zpass);
    return v8Undefined();
}

static v8::Handle<v8::Value> stencilOpSeparateCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, face, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, fail, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, zfail, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, zpass, toUInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    imp->stencilOpSeparate(face, fail, zfail, zpass);
    return v8Undefined();
}

static v8::Handle<v8::Value> texParameterfCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, pname, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(float, param, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    imp->texParameterf(target, pname, param);
    return v8Undefined();
}

static v8::Handle<v8::Value> texParameteriCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, pname, toUInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, param, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    imp->texParameteri(target, pname, param);
    return v8Undefined();
}

static v8::Handle<v8::Value> texImage2D1Callback(const v8::Arguments& args)
{
    if (args.Length() < 9)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, internalformat, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, width, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(int, height, toInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    V8TRYCATCH(int, border, toInt32(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, format, toUInt32(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 7, DefaultIsUndefined)));
    if (args.Length() > 8 && !isUndefinedOrNull(args[8]) && !V8ArrayBufferView::HasInstance(args[8]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(ArrayBufferView*, pixels, V8ArrayBufferView::HasInstance(MAYBE_MISSING_PARAMETER(args, 8, DefaultIsUndefined)) ? V8ArrayBufferView::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 8, DefaultIsUndefined))) : 0);
    imp->texImage2D(target, level, internalformat, width, height, border, format, type, pixels, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> texImage2D2Callback(const v8::Arguments& args)
{
    if (args.Length() < 6)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, internalformat, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, format, toUInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    if (args.Length() > 5 && !isUndefinedOrNull(args[5]) && !V8ImageData::HasInstance(args[5]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(ImageData*, pixels, V8ImageData::HasInstance(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)) ? V8ImageData::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined))) : 0);
    imp->texImage2D(target, level, internalformat, format, type, pixels, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> texImage2D3Callback(const v8::Arguments& args)
{
    if (args.Length() < 6)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, internalformat, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, format, toUInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    if (args.Length() > 5 && !isUndefinedOrNull(args[5]) && !V8HTMLImageElement::HasInstance(args[5]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(HTMLImageElement*, image, V8HTMLImageElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)) ? V8HTMLImageElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined))) : 0);
    imp->texImage2D(target, level, internalformat, format, type, image, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> texImage2D4Callback(const v8::Arguments& args)
{
    if (args.Length() < 6)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, internalformat, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, format, toUInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    if (args.Length() > 5 && !isUndefinedOrNull(args[5]) && !V8HTMLCanvasElement::HasInstance(args[5]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(HTMLCanvasElement*, canvas, V8HTMLCanvasElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)) ? V8HTMLCanvasElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined))) : 0);
    imp->texImage2D(target, level, internalformat, format, type, canvas, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> texImage2D5Callback(const v8::Arguments& args)
{
    if (args.Length() < 6)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, internalformat, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, format, toUInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    if (args.Length() > 5 && !isUndefinedOrNull(args[5]) && !V8HTMLVideoElement::HasInstance(args[5]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(HTMLVideoElement*, video, V8HTMLVideoElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)) ? V8HTMLVideoElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined))) : 0);
    imp->texImage2D(target, level, internalformat, format, type, video, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> texImage2DCallback(const v8::Arguments& args)
{
    if ((args.Length() == 9 && (args[8]->IsNull() || V8ArrayBufferView::HasInstance(args[8]))))
        return texImage2D1Callback(args);
    if ((args.Length() == 6 && (args[5]->IsNull() || V8ImageData::HasInstance(args[5]))))
        return texImage2D2Callback(args);
    if ((args.Length() == 6 && (args[5]->IsNull() || V8HTMLImageElement::HasInstance(args[5]))))
        return texImage2D3Callback(args);
    if ((args.Length() == 6 && (args[5]->IsNull() || V8HTMLCanvasElement::HasInstance(args[5]))))
        return texImage2D4Callback(args);
    if ((args.Length() == 6 && (args[5]->IsNull() || V8HTMLVideoElement::HasInstance(args[5]))))
        return texImage2D5Callback(args);
    if (args.Length() < 6)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> texSubImage2D1Callback(const v8::Arguments& args)
{
    if (args.Length() < 9)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, xoffset, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, yoffset, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(int, width, toInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    V8TRYCATCH(int, height, toInt32(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, format, toUInt32(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 7, DefaultIsUndefined)));
    if (args.Length() > 8 && !isUndefinedOrNull(args[8]) && !V8ArrayBufferView::HasInstance(args[8]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(ArrayBufferView*, pixels, V8ArrayBufferView::HasInstance(MAYBE_MISSING_PARAMETER(args, 8, DefaultIsUndefined)) ? V8ArrayBufferView::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 8, DefaultIsUndefined))) : 0);
    imp->texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> texSubImage2D2Callback(const v8::Arguments& args)
{
    if (args.Length() < 7)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, xoffset, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, yoffset, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, format, toUInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)));
    if (args.Length() > 6 && !isUndefinedOrNull(args[6]) && !V8ImageData::HasInstance(args[6]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(ImageData*, pixels, V8ImageData::HasInstance(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)) ? V8ImageData::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined))) : 0);
    imp->texSubImage2D(target, level, xoffset, yoffset, format, type, pixels, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> texSubImage2D3Callback(const v8::Arguments& args)
{
    if (args.Length() < 7)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, xoffset, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, yoffset, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, format, toUInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)));
    if (args.Length() > 6 && !isUndefinedOrNull(args[6]) && !V8HTMLImageElement::HasInstance(args[6]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(HTMLImageElement*, image, V8HTMLImageElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)) ? V8HTMLImageElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined))) : 0);
    imp->texSubImage2D(target, level, xoffset, yoffset, format, type, image, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> texSubImage2D4Callback(const v8::Arguments& args)
{
    if (args.Length() < 7)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, xoffset, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, yoffset, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, format, toUInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)));
    if (args.Length() > 6 && !isUndefinedOrNull(args[6]) && !V8HTMLCanvasElement::HasInstance(args[6]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(HTMLCanvasElement*, canvas, V8HTMLCanvasElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)) ? V8HTMLCanvasElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined))) : 0);
    imp->texSubImage2D(target, level, xoffset, yoffset, format, type, canvas, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> texSubImage2D5Callback(const v8::Arguments& args)
{
    if (args.Length() < 7)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, target, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, level, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, xoffset, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, yoffset, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, format, toUInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)));
    if (args.Length() > 6 && !isUndefinedOrNull(args[6]) && !V8HTMLVideoElement::HasInstance(args[6]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(HTMLVideoElement*, video, V8HTMLVideoElement::HasInstance(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined)) ? V8HTMLVideoElement::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 6, DefaultIsUndefined))) : 0);
    imp->texSubImage2D(target, level, xoffset, yoffset, format, type, video, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> texSubImage2DCallback(const v8::Arguments& args)
{
    if ((args.Length() == 9 && (args[8]->IsNull() || V8ArrayBufferView::HasInstance(args[8]))))
        return texSubImage2D1Callback(args);
    if ((args.Length() == 7 && (args[6]->IsNull() || V8ImageData::HasInstance(args[6]))))
        return texSubImage2D2Callback(args);
    if ((args.Length() == 7 && (args[6]->IsNull() || V8HTMLImageElement::HasInstance(args[6]))))
        return texSubImage2D3Callback(args);
    if ((args.Length() == 7 && (args[6]->IsNull() || V8HTMLCanvasElement::HasInstance(args[6]))))
        return texSubImage2D4Callback(args);
    if ((args.Length() == 7 && (args[6]->IsNull() || V8HTMLVideoElement::HasInstance(args[6]))))
        return texSubImage2D5Callback(args);
    if (args.Length() < 7)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    return throwTypeError(0, args.GetIsolate());
}

static v8::Handle<v8::Value> uniform1fCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLUniformLocation::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLUniformLocation*, location, V8WebGLUniformLocation::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->uniform1f(location, x, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> uniform1iCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLUniformLocation::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLUniformLocation*, location, V8WebGLUniformLocation::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    imp->uniform1i(location, x, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> uniform2fCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLUniformLocation::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLUniformLocation*, location, V8WebGLUniformLocation::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    imp->uniform2f(location, x, y, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> uniform2iCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLUniformLocation::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLUniformLocation*, location, V8WebGLUniformLocation::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    imp->uniform2i(location, x, y, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> uniform3fCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLUniformLocation::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLUniformLocation*, location, V8WebGLUniformLocation::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, z, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    imp->uniform3f(location, x, y, z, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> uniform3iCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLUniformLocation::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLUniformLocation*, location, V8WebGLUniformLocation::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, z, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    imp->uniform3i(location, x, y, z, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> uniform4fCallback(const v8::Arguments& args)
{
    if (args.Length() < 5)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLUniformLocation::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLUniformLocation*, location, V8WebGLUniformLocation::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, z, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, w, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    imp->uniform4f(location, x, y, z, w, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> uniform4iCallback(const v8::Arguments& args)
{
    if (args.Length() < 5)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLUniformLocation::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLUniformLocation*, location, V8WebGLUniformLocation::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    V8TRYCATCH(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, z, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    V8TRYCATCH(int, w, toInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    imp->uniform4i(location, x, y, z, w, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> useProgramCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLProgram*, program, V8WebGLProgram::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->useProgram(program, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> validateProgramCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(WebGLProgram*, program, V8WebGLProgram::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->validateProgram(program, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> vertexAttrib1fCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, indx, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->vertexAttrib1f(indx, x);
    return v8Undefined();
}

static v8::Handle<v8::Value> vertexAttrib2fCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, indx, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    imp->vertexAttrib2f(indx, x, y);
    return v8Undefined();
}

static v8::Handle<v8::Value> vertexAttrib3fCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, indx, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, z, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    imp->vertexAttrib3f(indx, x, y, z);
    return v8Undefined();
}

static v8::Handle<v8::Value> vertexAttrib4fCallback(const v8::Arguments& args)
{
    if (args.Length() < 5)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(unsigned, indx, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(float, x, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, y, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, z, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->NumberValue()));
    V8TRYCATCH(float, w, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)->NumberValue()));
    imp->vertexAttrib4f(indx, x, y, z, w);
    return v8Undefined();
}

static v8::Handle<v8::Value> vertexAttribPointerCallback(const v8::Arguments& args)
{
    if (args.Length() < 6)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(unsigned, indx, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, size, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(unsigned, type, toUInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(bool, normalized, MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)->BooleanValue());
    V8TRYCATCH(int, stride, toInt32(MAYBE_MISSING_PARAMETER(args, 4, DefaultIsUndefined)));
    V8TRYCATCH(long long, offset, toInt64(MAYBE_MISSING_PARAMETER(args, 5, DefaultIsUndefined)));
    imp->vertexAttribPointer(indx, size, type, normalized, stride, offset, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> viewportCallback(const v8::Arguments& args)
{
    if (args.Length() < 4)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    V8TRYCATCH(int, x, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(int, y, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    V8TRYCATCH(int, width, toInt32(MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined)));
    V8TRYCATCH(int, height, toInt32(MAYBE_MISSING_PARAMETER(args, 3, DefaultIsUndefined)));
    imp->viewport(x, y, width, height);
    return v8Undefined();
}

} // namespace WebGLRenderingContextV8Internal

static const V8DOMConfiguration::BatchedAttribute V8WebGLRenderingContextAttrs[] = {
    // Attribute 'drawingBufferWidth' (Type: 'readonly attribute' ExtAttr: '')
    {"drawingBufferWidth", WebGLRenderingContextV8Internal::drawingBufferWidthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'drawingBufferHeight' (Type: 'readonly attribute' ExtAttr: '')
    {"drawingBufferHeight", WebGLRenderingContextV8Internal::drawingBufferHeightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8WebGLRenderingContextCallbacks[] = {
    {"activeTexture", WebGLRenderingContextV8Internal::activeTextureCallback},
    {"attachShader", WebGLRenderingContextV8Internal::attachShaderCallback},
    {"bindAttribLocation", WebGLRenderingContextV8Internal::bindAttribLocationCallback},
    {"bindBuffer", WebGLRenderingContextV8Internal::bindBufferCallback},
    {"bindFramebuffer", WebGLRenderingContextV8Internal::bindFramebufferCallback},
    {"bindRenderbuffer", WebGLRenderingContextV8Internal::bindRenderbufferCallback},
    {"bindTexture", WebGLRenderingContextV8Internal::bindTextureCallback},
    {"blendColor", WebGLRenderingContextV8Internal::blendColorCallback},
    {"blendEquation", WebGLRenderingContextV8Internal::blendEquationCallback},
    {"blendEquationSeparate", WebGLRenderingContextV8Internal::blendEquationSeparateCallback},
    {"blendFunc", WebGLRenderingContextV8Internal::blendFuncCallback},
    {"blendFuncSeparate", WebGLRenderingContextV8Internal::blendFuncSeparateCallback},
    {"bufferData", WebGLRenderingContextV8Internal::bufferDataCallback},
    {"bufferSubData", WebGLRenderingContextV8Internal::bufferSubDataCallback},
    {"checkFramebufferStatus", WebGLRenderingContextV8Internal::checkFramebufferStatusCallback},
    {"clear", WebGLRenderingContextV8Internal::clearCallback},
    {"clearColor", WebGLRenderingContextV8Internal::clearColorCallback},
    {"clearDepth", WebGLRenderingContextV8Internal::clearDepthCallback},
    {"clearStencil", WebGLRenderingContextV8Internal::clearStencilCallback},
    {"colorMask", WebGLRenderingContextV8Internal::colorMaskCallback},
    {"compileShader", WebGLRenderingContextV8Internal::compileShaderCallback},
    {"compressedTexImage2D", WebGLRenderingContextV8Internal::compressedTexImage2DCallback},
    {"compressedTexSubImage2D", WebGLRenderingContextV8Internal::compressedTexSubImage2DCallback},
    {"copyTexImage2D", WebGLRenderingContextV8Internal::copyTexImage2DCallback},
    {"copyTexSubImage2D", WebGLRenderingContextV8Internal::copyTexSubImage2DCallback},
    {"createBuffer", WebGLRenderingContextV8Internal::createBufferCallback},
    {"createFramebuffer", WebGLRenderingContextV8Internal::createFramebufferCallback},
    {"createProgram", WebGLRenderingContextV8Internal::createProgramCallback},
    {"createRenderbuffer", WebGLRenderingContextV8Internal::createRenderbufferCallback},
    {"createShader", WebGLRenderingContextV8Internal::createShaderCallback},
    {"createTexture", WebGLRenderingContextV8Internal::createTextureCallback},
    {"cullFace", WebGLRenderingContextV8Internal::cullFaceCallback},
    {"deleteBuffer", WebGLRenderingContextV8Internal::deleteBufferCallback},
    {"deleteFramebuffer", WebGLRenderingContextV8Internal::deleteFramebufferCallback},
    {"deleteProgram", WebGLRenderingContextV8Internal::deleteProgramCallback},
    {"deleteRenderbuffer", WebGLRenderingContextV8Internal::deleteRenderbufferCallback},
    {"deleteShader", WebGLRenderingContextV8Internal::deleteShaderCallback},
    {"deleteTexture", WebGLRenderingContextV8Internal::deleteTextureCallback},
    {"depthFunc", WebGLRenderingContextV8Internal::depthFuncCallback},
    {"depthMask", WebGLRenderingContextV8Internal::depthMaskCallback},
    {"depthRange", WebGLRenderingContextV8Internal::depthRangeCallback},
    {"detachShader", WebGLRenderingContextV8Internal::detachShaderCallback},
    {"disable", WebGLRenderingContextV8Internal::disableCallback},
    {"disableVertexAttribArray", WebGLRenderingContextV8Internal::disableVertexAttribArrayCallback},
    {"drawArrays", WebGLRenderingContextV8Internal::drawArraysCallback},
    {"drawElements", WebGLRenderingContextV8Internal::drawElementsCallback},
    {"enable", WebGLRenderingContextV8Internal::enableCallback},
    {"enableVertexAttribArray", WebGLRenderingContextV8Internal::enableVertexAttribArrayCallback},
    {"finish", WebGLRenderingContextV8Internal::finishCallback},
    {"flush", WebGLRenderingContextV8Internal::flushCallback},
    {"framebufferRenderbuffer", WebGLRenderingContextV8Internal::framebufferRenderbufferCallback},
    {"framebufferTexture2D", WebGLRenderingContextV8Internal::framebufferTexture2DCallback},
    {"frontFace", WebGLRenderingContextV8Internal::frontFaceCallback},
    {"generateMipmap", WebGLRenderingContextV8Internal::generateMipmapCallback},
    {"getActiveAttrib", WebGLRenderingContextV8Internal::getActiveAttribCallback},
    {"getActiveUniform", WebGLRenderingContextV8Internal::getActiveUniformCallback},
    {"getAttachedShaders", V8WebGLRenderingContext::getAttachedShadersCallback},
    {"getAttribLocation", WebGLRenderingContextV8Internal::getAttribLocationCallback},
    {"getBufferParameter", V8WebGLRenderingContext::getBufferParameterCallback},
    {"getContextAttributes", WebGLRenderingContextV8Internal::getContextAttributesCallback},
    {"getError", WebGLRenderingContextV8Internal::getErrorCallback},
    {"getExtension", V8WebGLRenderingContext::getExtensionCallback},
    {"getFramebufferAttachmentParameter", V8WebGLRenderingContext::getFramebufferAttachmentParameterCallback},
    {"getParameter", V8WebGLRenderingContext::getParameterCallback},
    {"getProgramParameter", V8WebGLRenderingContext::getProgramParameterCallback},
    {"getProgramInfoLog", WebGLRenderingContextV8Internal::getProgramInfoLogCallback},
    {"getRenderbufferParameter", V8WebGLRenderingContext::getRenderbufferParameterCallback},
    {"getShaderParameter", V8WebGLRenderingContext::getShaderParameterCallback},
    {"getShaderInfoLog", WebGLRenderingContextV8Internal::getShaderInfoLogCallback},
    {"getShaderPrecisionFormat", WebGLRenderingContextV8Internal::getShaderPrecisionFormatCallback},
    {"getShaderSource", WebGLRenderingContextV8Internal::getShaderSourceCallback},
    {"getSupportedExtensions", V8WebGLRenderingContext::getSupportedExtensionsCallback},
    {"getTexParameter", V8WebGLRenderingContext::getTexParameterCallback},
    {"getUniform", V8WebGLRenderingContext::getUniformCallback},
    {"getUniformLocation", WebGLRenderingContextV8Internal::getUniformLocationCallback},
    {"getVertexAttrib", V8WebGLRenderingContext::getVertexAttribCallback},
    {"getVertexAttribOffset", WebGLRenderingContextV8Internal::getVertexAttribOffsetCallback},
    {"hint", WebGLRenderingContextV8Internal::hintCallback},
    {"isBuffer", WebGLRenderingContextV8Internal::isBufferCallback},
    {"isContextLost", WebGLRenderingContextV8Internal::isContextLostCallback},
    {"isEnabled", WebGLRenderingContextV8Internal::isEnabledCallback},
    {"isFramebuffer", WebGLRenderingContextV8Internal::isFramebufferCallback},
    {"isProgram", WebGLRenderingContextV8Internal::isProgramCallback},
    {"isRenderbuffer", WebGLRenderingContextV8Internal::isRenderbufferCallback},
    {"isShader", WebGLRenderingContextV8Internal::isShaderCallback},
    {"isTexture", WebGLRenderingContextV8Internal::isTextureCallback},
    {"lineWidth", WebGLRenderingContextV8Internal::lineWidthCallback},
    {"linkProgram", WebGLRenderingContextV8Internal::linkProgramCallback},
    {"pixelStorei", WebGLRenderingContextV8Internal::pixelStoreiCallback},
    {"polygonOffset", WebGLRenderingContextV8Internal::polygonOffsetCallback},
    {"readPixels", WebGLRenderingContextV8Internal::readPixelsCallback},
    {"releaseShaderCompiler", WebGLRenderingContextV8Internal::releaseShaderCompilerCallback},
    {"renderbufferStorage", WebGLRenderingContextV8Internal::renderbufferStorageCallback},
    {"sampleCoverage", WebGLRenderingContextV8Internal::sampleCoverageCallback},
    {"scissor", WebGLRenderingContextV8Internal::scissorCallback},
    {"shaderSource", WebGLRenderingContextV8Internal::shaderSourceCallback},
    {"stencilFunc", WebGLRenderingContextV8Internal::stencilFuncCallback},
    {"stencilFuncSeparate", WebGLRenderingContextV8Internal::stencilFuncSeparateCallback},
    {"stencilMask", WebGLRenderingContextV8Internal::stencilMaskCallback},
    {"stencilMaskSeparate", WebGLRenderingContextV8Internal::stencilMaskSeparateCallback},
    {"stencilOp", WebGLRenderingContextV8Internal::stencilOpCallback},
    {"stencilOpSeparate", WebGLRenderingContextV8Internal::stencilOpSeparateCallback},
    {"texParameterf", WebGLRenderingContextV8Internal::texParameterfCallback},
    {"texParameteri", WebGLRenderingContextV8Internal::texParameteriCallback},
    {"texImage2D", WebGLRenderingContextV8Internal::texImage2DCallback},
    {"texSubImage2D", WebGLRenderingContextV8Internal::texSubImage2DCallback},
    {"uniform1f", WebGLRenderingContextV8Internal::uniform1fCallback},
    {"uniform1fv", V8WebGLRenderingContext::uniform1fvCallback},
    {"uniform1i", WebGLRenderingContextV8Internal::uniform1iCallback},
    {"uniform1iv", V8WebGLRenderingContext::uniform1ivCallback},
    {"uniform2f", WebGLRenderingContextV8Internal::uniform2fCallback},
    {"uniform2fv", V8WebGLRenderingContext::uniform2fvCallback},
    {"uniform2i", WebGLRenderingContextV8Internal::uniform2iCallback},
    {"uniform2iv", V8WebGLRenderingContext::uniform2ivCallback},
    {"uniform3f", WebGLRenderingContextV8Internal::uniform3fCallback},
    {"uniform3fv", V8WebGLRenderingContext::uniform3fvCallback},
    {"uniform3i", WebGLRenderingContextV8Internal::uniform3iCallback},
    {"uniform3iv", V8WebGLRenderingContext::uniform3ivCallback},
    {"uniform4f", WebGLRenderingContextV8Internal::uniform4fCallback},
    {"uniform4fv", V8WebGLRenderingContext::uniform4fvCallback},
    {"uniform4i", WebGLRenderingContextV8Internal::uniform4iCallback},
    {"uniform4iv", V8WebGLRenderingContext::uniform4ivCallback},
    {"uniformMatrix2fv", V8WebGLRenderingContext::uniformMatrix2fvCallback},
    {"uniformMatrix3fv", V8WebGLRenderingContext::uniformMatrix3fvCallback},
    {"uniformMatrix4fv", V8WebGLRenderingContext::uniformMatrix4fvCallback},
    {"useProgram", WebGLRenderingContextV8Internal::useProgramCallback},
    {"validateProgram", WebGLRenderingContextV8Internal::validateProgramCallback},
    {"vertexAttrib1f", WebGLRenderingContextV8Internal::vertexAttrib1fCallback},
    {"vertexAttrib1fv", V8WebGLRenderingContext::vertexAttrib1fvCallback},
    {"vertexAttrib2f", WebGLRenderingContextV8Internal::vertexAttrib2fCallback},
    {"vertexAttrib2fv", V8WebGLRenderingContext::vertexAttrib2fvCallback},
    {"vertexAttrib3f", WebGLRenderingContextV8Internal::vertexAttrib3fCallback},
    {"vertexAttrib3fv", V8WebGLRenderingContext::vertexAttrib3fvCallback},
    {"vertexAttrib4f", WebGLRenderingContextV8Internal::vertexAttrib4fCallback},
    {"vertexAttrib4fv", V8WebGLRenderingContext::vertexAttrib4fvCallback},
    {"vertexAttribPointer", WebGLRenderingContextV8Internal::vertexAttribPointerCallback},
    {"viewport", WebGLRenderingContextV8Internal::viewportCallback},
};

static const V8DOMConfiguration::BatchedConstant V8WebGLRenderingContextConsts[] = {
    {"DEPTH_BUFFER_BIT", static_cast<signed int>(0x00000100)},
    {"STENCIL_BUFFER_BIT", static_cast<signed int>(0x00000400)},
    {"COLOR_BUFFER_BIT", static_cast<signed int>(0x00004000)},
    {"POINTS", static_cast<signed int>(0x0000)},
    {"LINES", static_cast<signed int>(0x0001)},
    {"LINE_LOOP", static_cast<signed int>(0x0002)},
    {"LINE_STRIP", static_cast<signed int>(0x0003)},
    {"TRIANGLES", static_cast<signed int>(0x0004)},
    {"TRIANGLE_STRIP", static_cast<signed int>(0x0005)},
    {"TRIANGLE_FAN", static_cast<signed int>(0x0006)},
    {"ZERO", static_cast<signed int>(0)},
    {"ONE", static_cast<signed int>(1)},
    {"SRC_COLOR", static_cast<signed int>(0x0300)},
    {"ONE_MINUS_SRC_COLOR", static_cast<signed int>(0x0301)},
    {"SRC_ALPHA", static_cast<signed int>(0x0302)},
    {"ONE_MINUS_SRC_ALPHA", static_cast<signed int>(0x0303)},
    {"DST_ALPHA", static_cast<signed int>(0x0304)},
    {"ONE_MINUS_DST_ALPHA", static_cast<signed int>(0x0305)},
    {"DST_COLOR", static_cast<signed int>(0x0306)},
    {"ONE_MINUS_DST_COLOR", static_cast<signed int>(0x0307)},
    {"SRC_ALPHA_SATURATE", static_cast<signed int>(0x0308)},
    {"FUNC_ADD", static_cast<signed int>(0x8006)},
    {"BLEND_EQUATION", static_cast<signed int>(0x8009)},
    {"BLEND_EQUATION_RGB", static_cast<signed int>(0x8009)},
    {"BLEND_EQUATION_ALPHA", static_cast<signed int>(0x883D)},
    {"FUNC_SUBTRACT", static_cast<signed int>(0x800A)},
    {"FUNC_REVERSE_SUBTRACT", static_cast<signed int>(0x800B)},
    {"BLEND_DST_RGB", static_cast<signed int>(0x80C8)},
    {"BLEND_SRC_RGB", static_cast<signed int>(0x80C9)},
    {"BLEND_DST_ALPHA", static_cast<signed int>(0x80CA)},
    {"BLEND_SRC_ALPHA", static_cast<signed int>(0x80CB)},
    {"CONSTANT_COLOR", static_cast<signed int>(0x8001)},
    {"ONE_MINUS_CONSTANT_COLOR", static_cast<signed int>(0x8002)},
    {"CONSTANT_ALPHA", static_cast<signed int>(0x8003)},
    {"ONE_MINUS_CONSTANT_ALPHA", static_cast<signed int>(0x8004)},
    {"BLEND_COLOR", static_cast<signed int>(0x8005)},
    {"ARRAY_BUFFER", static_cast<signed int>(0x8892)},
    {"ELEMENT_ARRAY_BUFFER", static_cast<signed int>(0x8893)},
    {"ARRAY_BUFFER_BINDING", static_cast<signed int>(0x8894)},
    {"ELEMENT_ARRAY_BUFFER_BINDING", static_cast<signed int>(0x8895)},
    {"STREAM_DRAW", static_cast<signed int>(0x88E0)},
    {"STATIC_DRAW", static_cast<signed int>(0x88E4)},
    {"DYNAMIC_DRAW", static_cast<signed int>(0x88E8)},
    {"BUFFER_SIZE", static_cast<signed int>(0x8764)},
    {"BUFFER_USAGE", static_cast<signed int>(0x8765)},
    {"CURRENT_VERTEX_ATTRIB", static_cast<signed int>(0x8626)},
    {"FRONT", static_cast<signed int>(0x0404)},
    {"BACK", static_cast<signed int>(0x0405)},
    {"FRONT_AND_BACK", static_cast<signed int>(0x0408)},
    {"TEXTURE_2D", static_cast<signed int>(0x0DE1)},
    {"CULL_FACE", static_cast<signed int>(0x0B44)},
    {"BLEND", static_cast<signed int>(0x0BE2)},
    {"DITHER", static_cast<signed int>(0x0BD0)},
    {"STENCIL_TEST", static_cast<signed int>(0x0B90)},
    {"DEPTH_TEST", static_cast<signed int>(0x0B71)},
    {"SCISSOR_TEST", static_cast<signed int>(0x0C11)},
    {"POLYGON_OFFSET_FILL", static_cast<signed int>(0x8037)},
    {"SAMPLE_ALPHA_TO_COVERAGE", static_cast<signed int>(0x809E)},
    {"SAMPLE_COVERAGE", static_cast<signed int>(0x80A0)},
    {"NO_ERROR", static_cast<signed int>(0)},
    {"INVALID_ENUM", static_cast<signed int>(0x0500)},
    {"INVALID_VALUE", static_cast<signed int>(0x0501)},
    {"INVALID_OPERATION", static_cast<signed int>(0x0502)},
    {"OUT_OF_MEMORY", static_cast<signed int>(0x0505)},
    {"CW", static_cast<signed int>(0x0900)},
    {"CCW", static_cast<signed int>(0x0901)},
    {"LINE_WIDTH", static_cast<signed int>(0x0B21)},
    {"ALIASED_POINT_SIZE_RANGE", static_cast<signed int>(0x846D)},
    {"ALIASED_LINE_WIDTH_RANGE", static_cast<signed int>(0x846E)},
    {"CULL_FACE_MODE", static_cast<signed int>(0x0B45)},
    {"FRONT_FACE", static_cast<signed int>(0x0B46)},
    {"DEPTH_RANGE", static_cast<signed int>(0x0B70)},
    {"DEPTH_WRITEMASK", static_cast<signed int>(0x0B72)},
    {"DEPTH_CLEAR_VALUE", static_cast<signed int>(0x0B73)},
    {"DEPTH_FUNC", static_cast<signed int>(0x0B74)},
    {"STENCIL_CLEAR_VALUE", static_cast<signed int>(0x0B91)},
    {"STENCIL_FUNC", static_cast<signed int>(0x0B92)},
    {"STENCIL_FAIL", static_cast<signed int>(0x0B94)},
    {"STENCIL_PASS_DEPTH_FAIL", static_cast<signed int>(0x0B95)},
    {"STENCIL_PASS_DEPTH_PASS", static_cast<signed int>(0x0B96)},
    {"STENCIL_REF", static_cast<signed int>(0x0B97)},
    {"STENCIL_VALUE_MASK", static_cast<signed int>(0x0B93)},
    {"STENCIL_WRITEMASK", static_cast<signed int>(0x0B98)},
    {"STENCIL_BACK_FUNC", static_cast<signed int>(0x8800)},
    {"STENCIL_BACK_FAIL", static_cast<signed int>(0x8801)},
    {"STENCIL_BACK_PASS_DEPTH_FAIL", static_cast<signed int>(0x8802)},
    {"STENCIL_BACK_PASS_DEPTH_PASS", static_cast<signed int>(0x8803)},
    {"STENCIL_BACK_REF", static_cast<signed int>(0x8CA3)},
    {"STENCIL_BACK_VALUE_MASK", static_cast<signed int>(0x8CA4)},
    {"STENCIL_BACK_WRITEMASK", static_cast<signed int>(0x8CA5)},
    {"VIEWPORT", static_cast<signed int>(0x0BA2)},
    {"SCISSOR_BOX", static_cast<signed int>(0x0C10)},
    {"COLOR_CLEAR_VALUE", static_cast<signed int>(0x0C22)},
    {"COLOR_WRITEMASK", static_cast<signed int>(0x0C23)},
    {"UNPACK_ALIGNMENT", static_cast<signed int>(0x0CF5)},
    {"PACK_ALIGNMENT", static_cast<signed int>(0x0D05)},
    {"MAX_TEXTURE_SIZE", static_cast<signed int>(0x0D33)},
    {"MAX_VIEWPORT_DIMS", static_cast<signed int>(0x0D3A)},
    {"SUBPIXEL_BITS", static_cast<signed int>(0x0D50)},
    {"RED_BITS", static_cast<signed int>(0x0D52)},
    {"GREEN_BITS", static_cast<signed int>(0x0D53)},
    {"BLUE_BITS", static_cast<signed int>(0x0D54)},
    {"ALPHA_BITS", static_cast<signed int>(0x0D55)},
    {"DEPTH_BITS", static_cast<signed int>(0x0D56)},
    {"STENCIL_BITS", static_cast<signed int>(0x0D57)},
    {"POLYGON_OFFSET_UNITS", static_cast<signed int>(0x2A00)},
    {"POLYGON_OFFSET_FACTOR", static_cast<signed int>(0x8038)},
    {"TEXTURE_BINDING_2D", static_cast<signed int>(0x8069)},
    {"SAMPLE_BUFFERS", static_cast<signed int>(0x80A8)},
    {"SAMPLES", static_cast<signed int>(0x80A9)},
    {"SAMPLE_COVERAGE_VALUE", static_cast<signed int>(0x80AA)},
    {"SAMPLE_COVERAGE_INVERT", static_cast<signed int>(0x80AB)},
    {"COMPRESSED_TEXTURE_FORMATS", static_cast<signed int>(0x86A3)},
    {"DONT_CARE", static_cast<signed int>(0x1100)},
    {"FASTEST", static_cast<signed int>(0x1101)},
    {"NICEST", static_cast<signed int>(0x1102)},
    {"GENERATE_MIPMAP_HINT", static_cast<signed int>(0x8192)},
    {"BYTE", static_cast<signed int>(0x1400)},
    {"UNSIGNED_BYTE", static_cast<signed int>(0x1401)},
    {"SHORT", static_cast<signed int>(0x1402)},
    {"UNSIGNED_SHORT", static_cast<signed int>(0x1403)},
    {"INT", static_cast<signed int>(0x1404)},
    {"UNSIGNED_INT", static_cast<signed int>(0x1405)},
    {"FLOAT", static_cast<signed int>(0x1406)},
    {"DEPTH_COMPONENT", static_cast<signed int>(0x1902)},
    {"ALPHA", static_cast<signed int>(0x1906)},
    {"RGB", static_cast<signed int>(0x1907)},
    {"RGBA", static_cast<signed int>(0x1908)},
    {"LUMINANCE", static_cast<signed int>(0x1909)},
    {"LUMINANCE_ALPHA", static_cast<signed int>(0x190A)},
    {"UNSIGNED_SHORT_4_4_4_4", static_cast<signed int>(0x8033)},
    {"UNSIGNED_SHORT_5_5_5_1", static_cast<signed int>(0x8034)},
    {"UNSIGNED_SHORT_5_6_5", static_cast<signed int>(0x8363)},
    {"FRAGMENT_SHADER", static_cast<signed int>(0x8B30)},
    {"VERTEX_SHADER", static_cast<signed int>(0x8B31)},
    {"MAX_VERTEX_ATTRIBS", static_cast<signed int>(0x8869)},
    {"MAX_VERTEX_UNIFORM_VECTORS", static_cast<signed int>(0x8DFB)},
    {"MAX_VARYING_VECTORS", static_cast<signed int>(0x8DFC)},
    {"MAX_COMBINED_TEXTURE_IMAGE_UNITS", static_cast<signed int>(0x8B4D)},
    {"MAX_VERTEX_TEXTURE_IMAGE_UNITS", static_cast<signed int>(0x8B4C)},
    {"MAX_TEXTURE_IMAGE_UNITS", static_cast<signed int>(0x8872)},
    {"MAX_FRAGMENT_UNIFORM_VECTORS", static_cast<signed int>(0x8DFD)},
    {"SHADER_TYPE", static_cast<signed int>(0x8B4F)},
    {"DELETE_STATUS", static_cast<signed int>(0x8B80)},
    {"LINK_STATUS", static_cast<signed int>(0x8B82)},
    {"VALIDATE_STATUS", static_cast<signed int>(0x8B83)},
    {"ATTACHED_SHADERS", static_cast<signed int>(0x8B85)},
    {"ACTIVE_UNIFORMS", static_cast<signed int>(0x8B86)},
    {"ACTIVE_ATTRIBUTES", static_cast<signed int>(0x8B89)},
    {"SHADING_LANGUAGE_VERSION", static_cast<signed int>(0x8B8C)},
    {"CURRENT_PROGRAM", static_cast<signed int>(0x8B8D)},
    {"NEVER", static_cast<signed int>(0x0200)},
    {"LESS", static_cast<signed int>(0x0201)},
    {"EQUAL", static_cast<signed int>(0x0202)},
    {"LEQUAL", static_cast<signed int>(0x0203)},
    {"GREATER", static_cast<signed int>(0x0204)},
    {"NOTEQUAL", static_cast<signed int>(0x0205)},
    {"GEQUAL", static_cast<signed int>(0x0206)},
    {"ALWAYS", static_cast<signed int>(0x0207)},
    {"KEEP", static_cast<signed int>(0x1E00)},
    {"REPLACE", static_cast<signed int>(0x1E01)},
    {"INCR", static_cast<signed int>(0x1E02)},
    {"DECR", static_cast<signed int>(0x1E03)},
    {"INVERT", static_cast<signed int>(0x150A)},
    {"INCR_WRAP", static_cast<signed int>(0x8507)},
    {"DECR_WRAP", static_cast<signed int>(0x8508)},
    {"VENDOR", static_cast<signed int>(0x1F00)},
    {"RENDERER", static_cast<signed int>(0x1F01)},
    {"VERSION", static_cast<signed int>(0x1F02)},
    {"NEAREST", static_cast<signed int>(0x2600)},
    {"LINEAR", static_cast<signed int>(0x2601)},
    {"NEAREST_MIPMAP_NEAREST", static_cast<signed int>(0x2700)},
    {"LINEAR_MIPMAP_NEAREST", static_cast<signed int>(0x2701)},
    {"NEAREST_MIPMAP_LINEAR", static_cast<signed int>(0x2702)},
    {"LINEAR_MIPMAP_LINEAR", static_cast<signed int>(0x2703)},
    {"TEXTURE_MAG_FILTER", static_cast<signed int>(0x2800)},
    {"TEXTURE_MIN_FILTER", static_cast<signed int>(0x2801)},
    {"TEXTURE_WRAP_S", static_cast<signed int>(0x2802)},
    {"TEXTURE_WRAP_T", static_cast<signed int>(0x2803)},
    {"TEXTURE", static_cast<signed int>(0x1702)},
    {"TEXTURE_CUBE_MAP", static_cast<signed int>(0x8513)},
    {"TEXTURE_BINDING_CUBE_MAP", static_cast<signed int>(0x8514)},
    {"TEXTURE_CUBE_MAP_POSITIVE_X", static_cast<signed int>(0x8515)},
    {"TEXTURE_CUBE_MAP_NEGATIVE_X", static_cast<signed int>(0x8516)},
    {"TEXTURE_CUBE_MAP_POSITIVE_Y", static_cast<signed int>(0x8517)},
    {"TEXTURE_CUBE_MAP_NEGATIVE_Y", static_cast<signed int>(0x8518)},
    {"TEXTURE_CUBE_MAP_POSITIVE_Z", static_cast<signed int>(0x8519)},
    {"TEXTURE_CUBE_MAP_NEGATIVE_Z", static_cast<signed int>(0x851A)},
    {"MAX_CUBE_MAP_TEXTURE_SIZE", static_cast<signed int>(0x851C)},
    {"TEXTURE0", static_cast<signed int>(0x84C0)},
    {"TEXTURE1", static_cast<signed int>(0x84C1)},
    {"TEXTURE2", static_cast<signed int>(0x84C2)},
    {"TEXTURE3", static_cast<signed int>(0x84C3)},
    {"TEXTURE4", static_cast<signed int>(0x84C4)},
    {"TEXTURE5", static_cast<signed int>(0x84C5)},
    {"TEXTURE6", static_cast<signed int>(0x84C6)},
    {"TEXTURE7", static_cast<signed int>(0x84C7)},
    {"TEXTURE8", static_cast<signed int>(0x84C8)},
    {"TEXTURE9", static_cast<signed int>(0x84C9)},
    {"TEXTURE10", static_cast<signed int>(0x84CA)},
    {"TEXTURE11", static_cast<signed int>(0x84CB)},
    {"TEXTURE12", static_cast<signed int>(0x84CC)},
    {"TEXTURE13", static_cast<signed int>(0x84CD)},
    {"TEXTURE14", static_cast<signed int>(0x84CE)},
    {"TEXTURE15", static_cast<signed int>(0x84CF)},
    {"TEXTURE16", static_cast<signed int>(0x84D0)},
    {"TEXTURE17", static_cast<signed int>(0x84D1)},
    {"TEXTURE18", static_cast<signed int>(0x84D2)},
    {"TEXTURE19", static_cast<signed int>(0x84D3)},
    {"TEXTURE20", static_cast<signed int>(0x84D4)},
    {"TEXTURE21", static_cast<signed int>(0x84D5)},
    {"TEXTURE22", static_cast<signed int>(0x84D6)},
    {"TEXTURE23", static_cast<signed int>(0x84D7)},
    {"TEXTURE24", static_cast<signed int>(0x84D8)},
    {"TEXTURE25", static_cast<signed int>(0x84D9)},
    {"TEXTURE26", static_cast<signed int>(0x84DA)},
    {"TEXTURE27", static_cast<signed int>(0x84DB)},
    {"TEXTURE28", static_cast<signed int>(0x84DC)},
    {"TEXTURE29", static_cast<signed int>(0x84DD)},
    {"TEXTURE30", static_cast<signed int>(0x84DE)},
    {"TEXTURE31", static_cast<signed int>(0x84DF)},
    {"ACTIVE_TEXTURE", static_cast<signed int>(0x84E0)},
    {"REPEAT", static_cast<signed int>(0x2901)},
    {"CLAMP_TO_EDGE", static_cast<signed int>(0x812F)},
    {"MIRRORED_REPEAT", static_cast<signed int>(0x8370)},
    {"FLOAT_VEC2", static_cast<signed int>(0x8B50)},
    {"FLOAT_VEC3", static_cast<signed int>(0x8B51)},
    {"FLOAT_VEC4", static_cast<signed int>(0x8B52)},
    {"INT_VEC2", static_cast<signed int>(0x8B53)},
    {"INT_VEC3", static_cast<signed int>(0x8B54)},
    {"INT_VEC4", static_cast<signed int>(0x8B55)},
    {"BOOL", static_cast<signed int>(0x8B56)},
    {"BOOL_VEC2", static_cast<signed int>(0x8B57)},
    {"BOOL_VEC3", static_cast<signed int>(0x8B58)},
    {"BOOL_VEC4", static_cast<signed int>(0x8B59)},
    {"FLOAT_MAT2", static_cast<signed int>(0x8B5A)},
    {"FLOAT_MAT3", static_cast<signed int>(0x8B5B)},
    {"FLOAT_MAT4", static_cast<signed int>(0x8B5C)},
    {"SAMPLER_2D", static_cast<signed int>(0x8B5E)},
    {"SAMPLER_CUBE", static_cast<signed int>(0x8B60)},
    {"VERTEX_ATTRIB_ARRAY_ENABLED", static_cast<signed int>(0x8622)},
    {"VERTEX_ATTRIB_ARRAY_SIZE", static_cast<signed int>(0x8623)},
    {"VERTEX_ATTRIB_ARRAY_STRIDE", static_cast<signed int>(0x8624)},
    {"VERTEX_ATTRIB_ARRAY_TYPE", static_cast<signed int>(0x8625)},
    {"VERTEX_ATTRIB_ARRAY_NORMALIZED", static_cast<signed int>(0x886A)},
    {"VERTEX_ATTRIB_ARRAY_POINTER", static_cast<signed int>(0x8645)},
    {"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING", static_cast<signed int>(0x889F)},
    {"COMPILE_STATUS", static_cast<signed int>(0x8B81)},
    {"LOW_FLOAT", static_cast<signed int>(0x8DF0)},
    {"MEDIUM_FLOAT", static_cast<signed int>(0x8DF1)},
    {"HIGH_FLOAT", static_cast<signed int>(0x8DF2)},
    {"LOW_INT", static_cast<signed int>(0x8DF3)},
    {"MEDIUM_INT", static_cast<signed int>(0x8DF4)},
    {"HIGH_INT", static_cast<signed int>(0x8DF5)},
    {"FRAMEBUFFER", static_cast<signed int>(0x8D40)},
    {"RENDERBUFFER", static_cast<signed int>(0x8D41)},
    {"RGBA4", static_cast<signed int>(0x8056)},
    {"RGB5_A1", static_cast<signed int>(0x8057)},
    {"RGB565", static_cast<signed int>(0x8D62)},
    {"DEPTH_COMPONENT16", static_cast<signed int>(0x81A5)},
    {"STENCIL_INDEX", static_cast<signed int>(0x1901)},
    {"STENCIL_INDEX8", static_cast<signed int>(0x8D48)},
    {"DEPTH_STENCIL", static_cast<signed int>(0x84F9)},
    {"RENDERBUFFER_WIDTH", static_cast<signed int>(0x8D42)},
    {"RENDERBUFFER_HEIGHT", static_cast<signed int>(0x8D43)},
    {"RENDERBUFFER_INTERNAL_FORMAT", static_cast<signed int>(0x8D44)},
    {"RENDERBUFFER_RED_SIZE", static_cast<signed int>(0x8D50)},
    {"RENDERBUFFER_GREEN_SIZE", static_cast<signed int>(0x8D51)},
    {"RENDERBUFFER_BLUE_SIZE", static_cast<signed int>(0x8D52)},
    {"RENDERBUFFER_ALPHA_SIZE", static_cast<signed int>(0x8D53)},
    {"RENDERBUFFER_DEPTH_SIZE", static_cast<signed int>(0x8D54)},
    {"RENDERBUFFER_STENCIL_SIZE", static_cast<signed int>(0x8D55)},
    {"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE", static_cast<signed int>(0x8CD0)},
    {"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME", static_cast<signed int>(0x8CD1)},
    {"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL", static_cast<signed int>(0x8CD2)},
    {"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE", static_cast<signed int>(0x8CD3)},
    {"COLOR_ATTACHMENT0", static_cast<signed int>(0x8CE0)},
    {"DEPTH_ATTACHMENT", static_cast<signed int>(0x8D00)},
    {"STENCIL_ATTACHMENT", static_cast<signed int>(0x8D20)},
    {"DEPTH_STENCIL_ATTACHMENT", static_cast<signed int>(0x821A)},
    {"NONE", static_cast<signed int>(0)},
    {"FRAMEBUFFER_COMPLETE", static_cast<signed int>(0x8CD5)},
    {"FRAMEBUFFER_INCOMPLETE_ATTACHMENT", static_cast<signed int>(0x8CD6)},
    {"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", static_cast<signed int>(0x8CD7)},
    {"FRAMEBUFFER_INCOMPLETE_DIMENSIONS", static_cast<signed int>(0x8CD9)},
    {"FRAMEBUFFER_UNSUPPORTED", static_cast<signed int>(0x8CDD)},
    {"FRAMEBUFFER_BINDING", static_cast<signed int>(0x8CA6)},
    {"RENDERBUFFER_BINDING", static_cast<signed int>(0x8CA7)},
    {"MAX_RENDERBUFFER_SIZE", static_cast<signed int>(0x84E8)},
    {"INVALID_FRAMEBUFFER_OPERATION", static_cast<signed int>(0x0506)},
    {"UNPACK_FLIP_Y_WEBGL", static_cast<signed int>(0x9240)},
    {"UNPACK_PREMULTIPLY_ALPHA_WEBGL", static_cast<signed int>(0x9241)},
    {"CONTEXT_LOST_WEBGL", static_cast<signed int>(0x9242)},
    {"UNPACK_COLORSPACE_CONVERSION_WEBGL", static_cast<signed int>(0x9243)},
    {"BROWSER_DEFAULT_WEBGL", static_cast<signed int>(0x9244)},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8WebGLRenderingContextTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "WebGLRenderingContext", V8CanvasRenderingContext::GetTemplate(), V8WebGLRenderingContext::internalFieldCount,
        V8WebGLRenderingContextAttrs, WTF_ARRAY_LENGTH(V8WebGLRenderingContextAttrs),
        V8WebGLRenderingContextCallbacks, WTF_ARRAY_LENGTH(V8WebGLRenderingContextCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8WebGLRenderingContextConsts, WTF_ARRAY_LENGTH(V8WebGLRenderingContextConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8WebGLRenderingContext::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8WebGLRenderingContext::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8WebGLRenderingContextTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8WebGLRenderingContext::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8WebGLRenderingContext::createWrapper(PassRefPtr<WebGLRenderingContext> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<CanvasRenderingContext*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8WebGLRenderingContext::derefObject(void* object)
{
    static_cast<WebGLRenderingContext*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(WEBGL)
