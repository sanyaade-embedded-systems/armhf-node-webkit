/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Location.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMStringList.h"
#include "V8DOMWrapper.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8Location::info = { V8Location::GetTemplate, V8Location::derefObject, 0, 0, V8Location::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace LocationV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> hrefAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    v8::Handle<v8::Object> holder = info.This()->FindInstanceInPrototypeChain(V8Location::GetTemplate());
    if (holder.IsEmpty())
        return v8Undefined();
    Location* imp = V8Location::toNative(holder);
    return v8String(imp->href(), info.GetIsolate());
}

static v8::Handle<v8::Value> protocolAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Location* imp = V8Location::toNative(info.Holder());
    return v8String(imp->protocol(), info.GetIsolate());
}

static v8::Handle<v8::Value> hostAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Location* imp = V8Location::toNative(info.Holder());
    return v8String(imp->host(), info.GetIsolate());
}

static v8::Handle<v8::Value> hostnameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Location* imp = V8Location::toNative(info.Holder());
    return v8String(imp->hostname(), info.GetIsolate());
}

static v8::Handle<v8::Value> portAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Location* imp = V8Location::toNative(info.Holder());
    return v8String(imp->port(), info.GetIsolate());
}

static v8::Handle<v8::Value> pathnameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Location* imp = V8Location::toNative(info.Holder());
    return v8String(imp->pathname(), info.GetIsolate());
}

static v8::Handle<v8::Value> searchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Location* imp = V8Location::toNative(info.Holder());
    return v8String(imp->search(), info.GetIsolate());
}

static v8::Handle<v8::Value> hashAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Location* imp = V8Location::toNative(info.Holder());
    return v8String(imp->hash(), info.GetIsolate());
}

static v8::Handle<v8::Value> originAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Location* imp = V8Location::toNative(info.Holder());
    return v8String(imp->origin(), info.GetIsolate());
}

static v8::Handle<v8::Value> ancestorOriginsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Location* imp = V8Location::toNative(info.Holder());
    RefPtr<DOMStringList> result = imp->ancestorOrigins();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "ancestorOrigins", wrapper);
    }
    return wrapper;
}

} // namespace LocationV8Internal

static const V8DOMConfiguration::BatchedAttribute V8LocationAttrs[] = {
    // Attribute 'href' (Type: 'attribute' ExtAttr: 'CustomSetter V8Unforgeable DoNotCheckSecurityOnSetter')
    {"href", LocationV8Internal::hrefAttrGetter, V8Location::hrefAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::ALL_CAN_WRITE | v8::PROHIBITS_OVERWRITING), static_cast<v8::PropertyAttribute>(v8::None | v8::DontDelete), 0 /* on instance */},
    // Attribute 'protocol' (Type: 'attribute' ExtAttr: 'CustomSetter')
    {"protocol", LocationV8Internal::protocolAttrGetter, V8Location::protocolAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'host' (Type: 'attribute' ExtAttr: 'CustomSetter')
    {"host", LocationV8Internal::hostAttrGetter, V8Location::hostAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'hostname' (Type: 'attribute' ExtAttr: 'CustomSetter')
    {"hostname", LocationV8Internal::hostnameAttrGetter, V8Location::hostnameAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'port' (Type: 'attribute' ExtAttr: 'CustomSetter')
    {"port", LocationV8Internal::portAttrGetter, V8Location::portAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'pathname' (Type: 'attribute' ExtAttr: 'CustomSetter')
    {"pathname", LocationV8Internal::pathnameAttrGetter, V8Location::pathnameAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'search' (Type: 'attribute' ExtAttr: 'CustomSetter')
    {"search", LocationV8Internal::searchAttrGetter, V8Location::searchAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'hash' (Type: 'attribute' ExtAttr: 'CustomSetter')
    {"hash", LocationV8Internal::hashAttrGetter, V8Location::hashAccessorSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'origin' (Type: 'readonly attribute' ExtAttr: '')
    {"origin", LocationV8Internal::originAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'ancestorOrigins' (Type: 'readonly attribute' ExtAttr: '')
    {"ancestorOrigins", LocationV8Internal::ancestorOriginsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8LocationTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "Location", v8::Persistent<v8::FunctionTemplate>(), V8Location::internalFieldCount,
        V8LocationAttrs, WTF_ARRAY_LENGTH(V8LocationAttrs),
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    instance->SetAccessCheckCallbacks(V8Location::namedSecurityCheck, V8Location::indexedSecurityCheck, v8::External::New(&V8Location::info));
    instance->Set(v8::String::NewSymbol("assign"), v8::FunctionTemplate::New(V8Location::assignCallback, v8Undefined(), defaultSignature));
    instance->Set(v8::String::NewSymbol("replace"), v8::FunctionTemplate::New(V8Location::replaceCallback, v8Undefined(), defaultSignature));
    instance->Set(v8::String::NewSymbol("reload"), v8::FunctionTemplate::New(V8Location::reloadCallback, v8Undefined(), defaultSignature));
    instance->Set(v8::String::NewSymbol("toString"), v8::FunctionTemplate::New(V8Location::toStringCallback, v8Undefined(), defaultSignature), static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::DontEnum | v8::ReadOnly));
    instance->Set(v8::String::NewSymbol("valueOf"), v8::FunctionTemplate::New(V8Location::valueOfCallback, v8Undefined(), defaultSignature), static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::DontEnum | v8::ReadOnly));

    // For security reasons, these functions are on the instance instead
    // of on the prototype object to ensure that they cannot be overwritten.
    instance->SetAccessor(v8::String::NewSymbol("reload"), V8Location::reloadAccessorGetter, 0, v8Undefined(), v8::ALL_CAN_READ, static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly));
    instance->SetAccessor(v8::String::NewSymbol("replace"), V8Location::replaceAccessorGetter, 0, v8Undefined(), v8::ALL_CAN_READ, static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly));
    instance->SetAccessor(v8::String::NewSymbol("assign"), V8Location::assignAccessorGetter, 0, v8Undefined(), v8::ALL_CAN_READ, static_cast<v8::PropertyAttribute>(v8::DontDelete | v8::ReadOnly));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Location::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Location::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8LocationTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Location::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Location::createWrapper(PassRefPtr<Location> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8Location::derefObject(void* object)
{
    static_cast<Location*>(object)->deref();
}

} // namespace WebCore
