/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGElementInstance.h"

#if ENABLE(SVG)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "EventListener.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8EventTarget.h"
#include "V8SVGElement.h"
#include "V8SVGElementInstanceList.h"
#include "V8SVGUseElement.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8SVGElementInstance::info = { V8SVGElementInstance::GetTemplate, V8SVGElementInstance::derefObject, 0, 0, V8SVGElementInstance::installPerContextPrototypeProperties, &V8EventTarget::info, WrapperTypeObjectPrototype };

namespace SVGElementInstanceV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> correspondingElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return toV8Fast(imp->correspondingElement(), info, imp);
}

static v8::Handle<v8::Value> correspondingUseElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return toV8Fast(imp->correspondingUseElement(), info, imp);
}

static v8::Handle<v8::Value> parentNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return toV8Fast(imp->parentNode(), info, imp);
}

static v8::Handle<v8::Value> childNodesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return toV8Fast(imp->childNodes(), info, imp);
}

static v8::Handle<v8::Value> firstChildAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return toV8Fast(imp->firstChild(), info, imp);
}

static v8::Handle<v8::Value> lastChildAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return toV8Fast(imp->lastChild(), info, imp);
}

static v8::Handle<v8::Value> previousSiblingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return toV8Fast(imp->previousSibling(), info, imp);
}

static v8::Handle<v8::Value> nextSiblingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return toV8Fast(imp->nextSibling(), info, imp);
}

static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onabort(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnabort(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onblurAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onblur() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onblur())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onblurAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onblur(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnblur(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onchange(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onclick(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnclick(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncontextmenuAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->oncontextmenu() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncontextmenu())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oncontextmenuAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oncontextmenu(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOncontextmenu(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondblclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->ondblclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondblclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondblclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondblclick(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOndblclick(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onfocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onfocus() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onfocus())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onfocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onfocus(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnfocus(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oninputAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->oninput() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninput())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oninputAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oninput(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOninput(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeydownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onkeydown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeydown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onkeydownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onkeydown(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnkeydown(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeypressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onkeypress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeypress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onkeypressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onkeypress(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnkeypress(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeyupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onkeyup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeyup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onkeyupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onkeyup(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnkeyup(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onload(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousedownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onmousedown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousedown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmousedownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmousedown(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnmousedown(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousemoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onmousemove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousemove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmousemoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmousemove(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnmousemove(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseoutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onmouseout() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseout())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmouseoutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmouseout(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnmouseout(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onmouseover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmouseoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmouseover(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnmouseover(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onmouseup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmouseupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmouseup(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnmouseup(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousewheelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onmousewheel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousewheel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmousewheelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmousewheel(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnmousewheel(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforecutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onbeforecut() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforecut())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onbeforecutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onbeforecut(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnbeforecut(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->oncut() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncut())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oncutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oncut(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOncut(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforecopyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onbeforecopy() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforecopy())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onbeforecopyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onbeforecopy(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnbeforecopy(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncopyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->oncopy() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncopy())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oncopyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oncopy(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOncopy(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforepasteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onbeforepaste() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforepaste())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onbeforepasteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onbeforepaste(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnbeforepaste(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onpasteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onpaste() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpaste())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onpasteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onpaste(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnpaste(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragenterAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->ondragenter() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragenter())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragenterAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragenter(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOndragenter(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->ondragover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragover(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOndragover(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragleaveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->ondragleave() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragleave())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragleaveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragleave(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOndragleave(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondropAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->ondrop() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrop())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondropAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondrop(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOndrop(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->ondragstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragstart(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOndragstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->ondrag() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrag())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondrag(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOndrag(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->ondragend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragend(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOndragend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onresetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onreset() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onreset())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onresetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onreset(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnreset(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onresizeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onresize() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onresize())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onresizeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onresize(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnresize(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onscrollAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onscroll() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onscroll())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onscrollAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onscroll(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnscroll(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onsearchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onsearch() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsearch())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onsearchAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onsearch(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnsearch(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onselectAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onselect() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselect())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onselectAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onselect(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnselect(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onselectstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onselectstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselectstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onselectstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onselectstart(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnselectstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onsubmitAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onsubmit() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsubmit())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onsubmitAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onsubmit(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnsubmit(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onunloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    return imp->onunload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onunload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onunloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGElementInstance* imp = V8SVGElementInstance::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onunload(), value, V8SVGElementInstance::eventListenerCacheIndex);
    imp->setOnunload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

} // namespace SVGElementInstanceV8Internal

static const V8DOMConfiguration::BatchedAttribute V8SVGElementInstanceAttrs[] = {
    // Attribute 'correspondingElement' (Type: 'readonly attribute' ExtAttr: '')
    {"correspondingElement", SVGElementInstanceV8Internal::correspondingElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'correspondingUseElement' (Type: 'readonly attribute' ExtAttr: '')
    {"correspondingUseElement", SVGElementInstanceV8Internal::correspondingUseElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'parentNode' (Type: 'readonly attribute' ExtAttr: '')
    {"parentNode", SVGElementInstanceV8Internal::parentNodeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'childNodes' (Type: 'readonly attribute' ExtAttr: '')
    {"childNodes", SVGElementInstanceV8Internal::childNodesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'firstChild' (Type: 'readonly attribute' ExtAttr: '')
    {"firstChild", SVGElementInstanceV8Internal::firstChildAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'lastChild' (Type: 'readonly attribute' ExtAttr: '')
    {"lastChild", SVGElementInstanceV8Internal::lastChildAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'previousSibling' (Type: 'readonly attribute' ExtAttr: '')
    {"previousSibling", SVGElementInstanceV8Internal::previousSiblingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'nextSibling' (Type: 'readonly attribute' ExtAttr: '')
    {"nextSibling", SVGElementInstanceV8Internal::nextSiblingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onabort' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onabort", SVGElementInstanceV8Internal::onabortAttrGetter, SVGElementInstanceV8Internal::onabortAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onblur' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onblur", SVGElementInstanceV8Internal::onblurAttrGetter, SVGElementInstanceV8Internal::onblurAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onchange' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onchange", SVGElementInstanceV8Internal::onchangeAttrGetter, SVGElementInstanceV8Internal::onchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onclick' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onclick", SVGElementInstanceV8Internal::onclickAttrGetter, SVGElementInstanceV8Internal::onclickAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncontextmenu' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"oncontextmenu", SVGElementInstanceV8Internal::oncontextmenuAttrGetter, SVGElementInstanceV8Internal::oncontextmenuAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondblclick' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondblclick", SVGElementInstanceV8Internal::ondblclickAttrGetter, SVGElementInstanceV8Internal::ondblclickAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onerror", SVGElementInstanceV8Internal::onerrorAttrGetter, SVGElementInstanceV8Internal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onfocus' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onfocus", SVGElementInstanceV8Internal::onfocusAttrGetter, SVGElementInstanceV8Internal::onfocusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oninput' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"oninput", SVGElementInstanceV8Internal::oninputAttrGetter, SVGElementInstanceV8Internal::oninputAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeydown' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onkeydown", SVGElementInstanceV8Internal::onkeydownAttrGetter, SVGElementInstanceV8Internal::onkeydownAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeypress' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onkeypress", SVGElementInstanceV8Internal::onkeypressAttrGetter, SVGElementInstanceV8Internal::onkeypressAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeyup' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onkeyup", SVGElementInstanceV8Internal::onkeyupAttrGetter, SVGElementInstanceV8Internal::onkeyupAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onload' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onload", SVGElementInstanceV8Internal::onloadAttrGetter, SVGElementInstanceV8Internal::onloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousedown' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmousedown", SVGElementInstanceV8Internal::onmousedownAttrGetter, SVGElementInstanceV8Internal::onmousedownAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousemove' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmousemove", SVGElementInstanceV8Internal::onmousemoveAttrGetter, SVGElementInstanceV8Internal::onmousemoveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseout' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmouseout", SVGElementInstanceV8Internal::onmouseoutAttrGetter, SVGElementInstanceV8Internal::onmouseoutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseover' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmouseover", SVGElementInstanceV8Internal::onmouseoverAttrGetter, SVGElementInstanceV8Internal::onmouseoverAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseup' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmouseup", SVGElementInstanceV8Internal::onmouseupAttrGetter, SVGElementInstanceV8Internal::onmouseupAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousewheel' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmousewheel", SVGElementInstanceV8Internal::onmousewheelAttrGetter, SVGElementInstanceV8Internal::onmousewheelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforecut' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onbeforecut", SVGElementInstanceV8Internal::onbeforecutAttrGetter, SVGElementInstanceV8Internal::onbeforecutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncut' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"oncut", SVGElementInstanceV8Internal::oncutAttrGetter, SVGElementInstanceV8Internal::oncutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforecopy' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onbeforecopy", SVGElementInstanceV8Internal::onbeforecopyAttrGetter, SVGElementInstanceV8Internal::onbeforecopyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncopy' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"oncopy", SVGElementInstanceV8Internal::oncopyAttrGetter, SVGElementInstanceV8Internal::oncopyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforepaste' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onbeforepaste", SVGElementInstanceV8Internal::onbeforepasteAttrGetter, SVGElementInstanceV8Internal::onbeforepasteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onpaste' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onpaste", SVGElementInstanceV8Internal::onpasteAttrGetter, SVGElementInstanceV8Internal::onpasteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragenter' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragenter", SVGElementInstanceV8Internal::ondragenterAttrGetter, SVGElementInstanceV8Internal::ondragenterAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragover' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragover", SVGElementInstanceV8Internal::ondragoverAttrGetter, SVGElementInstanceV8Internal::ondragoverAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragleave' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragleave", SVGElementInstanceV8Internal::ondragleaveAttrGetter, SVGElementInstanceV8Internal::ondragleaveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondrop' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondrop", SVGElementInstanceV8Internal::ondropAttrGetter, SVGElementInstanceV8Internal::ondropAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragstart' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragstart", SVGElementInstanceV8Internal::ondragstartAttrGetter, SVGElementInstanceV8Internal::ondragstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondrag' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondrag", SVGElementInstanceV8Internal::ondragAttrGetter, SVGElementInstanceV8Internal::ondragAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragend' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragend", SVGElementInstanceV8Internal::ondragendAttrGetter, SVGElementInstanceV8Internal::ondragendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onreset' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onreset", SVGElementInstanceV8Internal::onresetAttrGetter, SVGElementInstanceV8Internal::onresetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onresize' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onresize", SVGElementInstanceV8Internal::onresizeAttrGetter, SVGElementInstanceV8Internal::onresizeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onscroll' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onscroll", SVGElementInstanceV8Internal::onscrollAttrGetter, SVGElementInstanceV8Internal::onscrollAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onsearch' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onsearch", SVGElementInstanceV8Internal::onsearchAttrGetter, SVGElementInstanceV8Internal::onsearchAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onselect' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onselect", SVGElementInstanceV8Internal::onselectAttrGetter, SVGElementInstanceV8Internal::onselectAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onselectstart' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onselectstart", SVGElementInstanceV8Internal::onselectstartAttrGetter, SVGElementInstanceV8Internal::onselectstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onsubmit' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onsubmit", SVGElementInstanceV8Internal::onsubmitAttrGetter, SVGElementInstanceV8Internal::onsubmitAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onunload' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onunload", SVGElementInstanceV8Internal::onunloadAttrGetter, SVGElementInstanceV8Internal::onunloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGElementInstanceTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "SVGElementInstance", V8EventTarget::GetTemplate(), V8SVGElementInstance::internalFieldCount,
        V8SVGElementInstanceAttrs, WTF_ARRAY_LENGTH(V8SVGElementInstanceAttrs),
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGElementInstance::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8SVGElementInstance::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8SVGElementInstanceTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8SVGElementInstance::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGElementInstance::createWrapper(PassRefPtr<SVGElementInstance> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<EventTarget*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8SVGElementInstance::derefObject(void* object)
{
    static_cast<SVGElementInstance*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
