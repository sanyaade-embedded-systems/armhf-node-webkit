/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SourceBuffer.h"

#if ENABLE(MEDIA_SOURCE)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8TimeRanges.h"
#include "V8Uint8Array.h"
#include <wtf/Uint8Array.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8SourceBuffer::info = { V8SourceBuffer::GetTemplate, V8SourceBuffer::derefObject, 0, 0, V8SourceBuffer::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace SourceBufferV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> bufferedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SourceBuffer* imp = V8SourceBuffer::toNative(info.Holder());
    ExceptionCode ec = 0;
    RefPtr<TimeRanges> v = imp->buffered(ec);
    if (UNLIKELY(ec))
        return setDOMException(ec, info.GetIsolate());
    RefPtr<TimeRanges> result = imp->buffered(ec);
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "buffered", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> timestampOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SourceBuffer* imp = V8SourceBuffer::toNative(info.Holder());
    return v8::Number::New(imp->timestampOffset());
}

static void timestampOffsetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SourceBuffer* imp = V8SourceBuffer::toNative(info.Holder());
    double v = static_cast<double>(value->NumberValue());
    ExceptionCode ec = 0;
    imp->setTimestampOffset(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> appendCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    SourceBuffer* imp = V8SourceBuffer::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Uint8Array*, data, V8Uint8Array::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Uint8Array::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    imp->append(data, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> abortCallback(const v8::Arguments& args)
{
    SourceBuffer* imp = V8SourceBuffer::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->abort(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace SourceBufferV8Internal

static const V8DOMConfiguration::BatchedAttribute V8SourceBufferAttrs[] = {
    // Attribute 'buffered' (Type: 'readonly attribute' ExtAttr: '')
    {"buffered", SourceBufferV8Internal::bufferedAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'timestampOffset' (Type: 'attribute' ExtAttr: '')
    {"timestampOffset", SourceBufferV8Internal::timestampOffsetAttrGetter, SourceBufferV8Internal::timestampOffsetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8SourceBufferCallbacks[] = {
    {"abort", SourceBufferV8Internal::abortCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8SourceBufferTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    if (!RuntimeEnabledFeatures::mediaSourceEnabled())
        defaultSignature = V8DOMConfiguration::configureTemplate(desc, "", v8::Persistent<v8::FunctionTemplate>(), V8SourceBuffer::internalFieldCount, 0, 0, 0, 0);
    else
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "SourceBuffer", v8::Persistent<v8::FunctionTemplate>(), V8SourceBuffer::internalFieldCount,
        V8SourceBufferAttrs, WTF_ARRAY_LENGTH(V8SourceBufferAttrs),
        V8SourceBufferCallbacks, WTF_ARRAY_LENGTH(V8SourceBufferCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'append'
    const int appendArgc = 1;
    v8::Handle<v8::FunctionTemplate> appendArgv[appendArgc] = { V8Uint8Array::GetRawTemplate() };
    v8::Handle<v8::Signature> appendSignature = v8::Signature::New(desc, appendArgc, appendArgv);
    proto->Set(v8::String::NewSymbol("append"), v8::FunctionTemplate::New(SourceBufferV8Internal::appendCallback, v8Undefined(), appendSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SourceBuffer::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8SourceBuffer::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8SourceBufferTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8SourceBuffer::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SourceBuffer::createWrapper(PassRefPtr<SourceBuffer> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8SourceBuffer::derefObject(void* object)
{
    static_cast<SourceBuffer*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(MEDIA_SOURCE)
