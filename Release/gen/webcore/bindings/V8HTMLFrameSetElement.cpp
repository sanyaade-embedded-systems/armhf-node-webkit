/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLFrameSetElement.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "EventListener.h"
#include "Frame.h"
#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8HTMLElement.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8HTMLFrameSetElement::info = { V8HTMLFrameSetElement::GetTemplate, V8HTMLFrameSetElement::derefObject, 0, 0, V8HTMLFrameSetElement::installPerContextPrototypeProperties, &V8HTMLElement::info, WrapperTypeObjectPrototype };

namespace HTMLFrameSetElementV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> colsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::colsAttr), info.GetIsolate());
}

static void colsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::colsAttr, stringResource);
}

static v8::Handle<v8::Value> rowsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::rowsAttr), info.GetIsolate());
}

static void rowsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::rowsAttr, stringResource);
}

static v8::Handle<v8::Value> onbeforeunloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onbeforeunload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforeunload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onbeforeunloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    imp->setOnbeforeunload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onhashchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onhashchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onhashchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onhashchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    imp->setOnhashchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onmessage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmessage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmessageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    imp->setOnmessage(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onofflineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onoffline() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onoffline())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onofflineAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    imp->setOnoffline(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ononlineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->ononline() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ononline())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ononlineAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    imp->setOnonline(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onpopstateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onpopstate() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpopstate())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onpopstateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    imp->setOnpopstate(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onresizeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onresize() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onresize())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onresizeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    imp->setOnresize(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onstorageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onstorage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onstorage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onstorageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    imp->setOnstorage(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onunloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onunload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onunload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onunloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    imp->setOnunload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#if ENABLE(ORIENTATION_EVENTS)

static v8::Handle<v8::Value> onorientationchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onorientationchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onorientationchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(ORIENTATION_EVENTS)

#if ENABLE(ORIENTATION_EVENTS)

static void onorientationchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    imp->setOnorientationchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(ORIENTATION_EVENTS)

static v8::Handle<v8::Value> onblurAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onblur() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onblur())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onblurAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    imp->setOnblur(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    imp->setOnerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onfocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onfocus() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onfocus())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onfocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    imp->setOnfocus(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    imp->setOnload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

} // namespace HTMLFrameSetElementV8Internal

static const V8DOMConfiguration::BatchedAttribute V8HTMLFrameSetElementAttrs[] = {
    // Attribute 'cols' (Type: 'attribute' ExtAttr: 'Reflect')
    {"cols", HTMLFrameSetElementV8Internal::colsAttrGetter, HTMLFrameSetElementV8Internal::colsAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'rows' (Type: 'attribute' ExtAttr: 'Reflect')
    {"rows", HTMLFrameSetElementV8Internal::rowsAttrGetter, HTMLFrameSetElementV8Internal::rowsAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onbeforeunload' (Type: 'attribute' ExtAttr: 'JSWindowEventListener NotEnumerable')
    {"onbeforeunload", HTMLFrameSetElementV8Internal::onbeforeunloadAttrGetter, HTMLFrameSetElementV8Internal::onbeforeunloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onhashchange' (Type: 'attribute' ExtAttr: 'JSWindowEventListener NotEnumerable')
    {"onhashchange", HTMLFrameSetElementV8Internal::onhashchangeAttrGetter, HTMLFrameSetElementV8Internal::onhashchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmessage' (Type: 'attribute' ExtAttr: 'JSWindowEventListener NotEnumerable')
    {"onmessage", HTMLFrameSetElementV8Internal::onmessageAttrGetter, HTMLFrameSetElementV8Internal::onmessageAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onoffline' (Type: 'attribute' ExtAttr: 'JSWindowEventListener NotEnumerable')
    {"onoffline", HTMLFrameSetElementV8Internal::onofflineAttrGetter, HTMLFrameSetElementV8Internal::onofflineAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ononline' (Type: 'attribute' ExtAttr: 'JSWindowEventListener NotEnumerable')
    {"ononline", HTMLFrameSetElementV8Internal::ononlineAttrGetter, HTMLFrameSetElementV8Internal::ononlineAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onpopstate' (Type: 'attribute' ExtAttr: 'JSWindowEventListener NotEnumerable')
    {"onpopstate", HTMLFrameSetElementV8Internal::onpopstateAttrGetter, HTMLFrameSetElementV8Internal::onpopstateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onresize' (Type: 'attribute' ExtAttr: 'JSWindowEventListener NotEnumerable')
    {"onresize", HTMLFrameSetElementV8Internal::onresizeAttrGetter, HTMLFrameSetElementV8Internal::onresizeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onstorage' (Type: 'attribute' ExtAttr: 'JSWindowEventListener NotEnumerable')
    {"onstorage", HTMLFrameSetElementV8Internal::onstorageAttrGetter, HTMLFrameSetElementV8Internal::onstorageAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onunload' (Type: 'attribute' ExtAttr: 'JSWindowEventListener NotEnumerable')
    {"onunload", HTMLFrameSetElementV8Internal::onunloadAttrGetter, HTMLFrameSetElementV8Internal::onunloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#if ENABLE(ORIENTATION_EVENTS)
    // Attribute 'onorientationchange' (Type: 'attribute' ExtAttr: 'JSWindowEventListener NotEnumerable Conditional')
    {"onorientationchange", HTMLFrameSetElementV8Internal::onorientationchangeAttrGetter, HTMLFrameSetElementV8Internal::onorientationchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(ORIENTATION_EVENTS)
    // Attribute 'onblur' (Type: 'attribute' ExtAttr: 'JSWindowEventListener NotEnumerable')
    {"onblur", HTMLFrameSetElementV8Internal::onblurAttrGetter, HTMLFrameSetElementV8Internal::onblurAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: 'JSWindowEventListener NotEnumerable')
    {"onerror", HTMLFrameSetElementV8Internal::onerrorAttrGetter, HTMLFrameSetElementV8Internal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onfocus' (Type: 'attribute' ExtAttr: 'JSWindowEventListener NotEnumerable')
    {"onfocus", HTMLFrameSetElementV8Internal::onfocusAttrGetter, HTMLFrameSetElementV8Internal::onfocusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onload' (Type: 'attribute' ExtAttr: 'JSWindowEventListener NotEnumerable')
    {"onload", HTMLFrameSetElementV8Internal::onloadAttrGetter, HTMLFrameSetElementV8Internal::onloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLFrameSetElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "HTMLFrameSetElement", V8HTMLElement::GetTemplate(), V8HTMLFrameSetElement::internalFieldCount,
        V8HTMLFrameSetElementAttrs, WTF_ARRAY_LENGTH(V8HTMLFrameSetElementAttrs),
        0, 0);
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    
    desc->InstanceTemplate()->SetNamedPropertyHandler(V8HTMLFrameSetElement::namedPropertyGetter, 0, 0, 0, 0);

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLFrameSetElement::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLFrameSetElement::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLFrameSetElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLFrameSetElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLFrameSetElement::createWrapper(PassRefPtr<HTMLFrameSetElement> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<Node*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8HTMLFrameSetElement::derefObject(void* object)
{
    static_cast<HTMLFrameSetElement*>(object)->deref();
}

} // namespace WebCore
