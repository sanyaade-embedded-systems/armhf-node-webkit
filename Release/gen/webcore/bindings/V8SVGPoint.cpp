/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGPoint.h"

#if ENABLE(SVG)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "SVGAnimatedPropertyTearOff.h"
#include "SVGPropertyTearOff.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8SVGMatrix.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8SVGPoint::info = { V8SVGPoint::GetTemplate, V8SVGPoint::derefObject, 0, 0, V8SVGPoint::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace SVGPointV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> xAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGPropertyTearOff<FloatPoint>* wrapper = V8SVGPoint::toNative(info.Holder());
    FloatPoint& impInstance = wrapper->propertyReference();
    FloatPoint* imp = &impInstance;
    return v8::Number::New(imp->x());
}

static void xAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGPropertyTearOff<FloatPoint>* wrapper = V8SVGPoint::toNative(info.Holder());
    if (wrapper->isReadOnly()) {
        setDOMException(NO_MODIFICATION_ALLOWED_ERR, info.GetIsolate());
        return;
    }
    FloatPoint& impInstance = wrapper->propertyReference();
    FloatPoint* imp = &impInstance;
    float v = static_cast<float>(value->NumberValue());
    imp->setX(v);
    wrapper->commitChange();
    return;
}

static v8::Handle<v8::Value> yAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGPropertyTearOff<FloatPoint>* wrapper = V8SVGPoint::toNative(info.Holder());
    FloatPoint& impInstance = wrapper->propertyReference();
    FloatPoint* imp = &impInstance;
    return v8::Number::New(imp->y());
}

static void yAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGPropertyTearOff<FloatPoint>* wrapper = V8SVGPoint::toNative(info.Holder());
    if (wrapper->isReadOnly()) {
        setDOMException(NO_MODIFICATION_ALLOWED_ERR, info.GetIsolate());
        return;
    }
    FloatPoint& impInstance = wrapper->propertyReference();
    FloatPoint* imp = &impInstance;
    float v = static_cast<float>(value->NumberValue());
    imp->setY(v);
    wrapper->commitChange();
    return;
}

static v8::Handle<v8::Value> matrixTransformCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RefPtr<SVGPropertyTearOff<FloatPoint> > wrapper = V8SVGPoint::toNative(args.Holder());
    if (wrapper->isReadOnly())
        return setDOMException(NO_MODIFICATION_ALLOWED_ERR, args.GetIsolate());
    FloatPoint& impInstance = wrapper->propertyReference();
    FloatPoint* imp = &impInstance;
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8SVGMatrix::HasInstance(args[0]))
        return throwTypeError(0, args.GetIsolate());
    V8TRYCATCH(RefPtr<SVGPropertyTearOff<SVGMatrix> >, matrix, V8SVGMatrix::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8SVGMatrix::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    if (!matrix)
        return setDOMException(WebCore::TYPE_MISMATCH_ERR, args.GetIsolate());
    return toV8(WTF::getPtr(SVGPropertyTearOff<FloatPoint>::create(imp->matrixTransform(matrix->propertyReference()))), args.Holder(), args.GetIsolate());
}

} // namespace SVGPointV8Internal

static const V8DOMConfiguration::BatchedAttribute V8SVGPointAttrs[] = {
    // Attribute 'x' (Type: 'attribute' ExtAttr: 'StrictTypeChecking')
    {"x", SVGPointV8Internal::xAttrGetter, SVGPointV8Internal::xAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'y' (Type: 'attribute' ExtAttr: 'StrictTypeChecking')
    {"y", SVGPointV8Internal::yAttrGetter, SVGPointV8Internal::yAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8SVGPointCallbacks[] = {
    {"matrixTransform", SVGPointV8Internal::matrixTransformCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGPointTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "SVGPoint", v8::Persistent<v8::FunctionTemplate>(), V8SVGPoint::internalFieldCount,
        V8SVGPointAttrs, WTF_ARRAY_LENGTH(V8SVGPointAttrs),
        V8SVGPointCallbacks, WTF_ARRAY_LENGTH(V8SVGPointCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGPoint::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8SVGPoint::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8SVGPointTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8SVGPoint::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGPoint::createWrapper(PassRefPtr<SVGPropertyTearOff<FloatPoint> > impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8SVGPoint::derefObject(void* object)
{
    static_cast<SVGPropertyTearOff<FloatPoint>*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
