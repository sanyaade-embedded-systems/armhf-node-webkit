/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8SVGAngle.h"

#if ENABLE(SVG)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "SVGAnimatedPropertyTearOff.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8SVGAngle::info = { V8SVGAngle::GetTemplate, V8SVGAngle::derefObject, 0, 0, V8SVGAngle::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace SVGAngleV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> unitTypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGPropertyTearOff<SVGAngle>* wrapper = V8SVGAngle::toNative(info.Holder());
    SVGAngle& impInstance = wrapper->propertyReference();
    SVGAngle* imp = &impInstance;
    return v8Integer(imp->unitType(), info.GetIsolate());
}

static v8::Handle<v8::Value> valueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGPropertyTearOff<SVGAngle>* wrapper = V8SVGAngle::toNative(info.Holder());
    SVGAngle& impInstance = wrapper->propertyReference();
    SVGAngle* imp = &impInstance;
    return v8::Number::New(imp->value());
}

static void valueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGPropertyTearOff<SVGAngle>* wrapper = V8SVGAngle::toNative(info.Holder());
    if (wrapper->isReadOnly()) {
        setDOMException(NO_MODIFICATION_ALLOWED_ERR, info.GetIsolate());
        return;
    }
    SVGAngle& impInstance = wrapper->propertyReference();
    SVGAngle* imp = &impInstance;
    float v = static_cast<float>(value->NumberValue());
    imp->setValue(v);
    wrapper->commitChange();
    return;
}

static v8::Handle<v8::Value> valueInSpecifiedUnitsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGPropertyTearOff<SVGAngle>* wrapper = V8SVGAngle::toNative(info.Holder());
    SVGAngle& impInstance = wrapper->propertyReference();
    SVGAngle* imp = &impInstance;
    return v8::Number::New(imp->valueInSpecifiedUnits());
}

static void valueInSpecifiedUnitsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGPropertyTearOff<SVGAngle>* wrapper = V8SVGAngle::toNative(info.Holder());
    if (wrapper->isReadOnly()) {
        setDOMException(NO_MODIFICATION_ALLOWED_ERR, info.GetIsolate());
        return;
    }
    SVGAngle& impInstance = wrapper->propertyReference();
    SVGAngle* imp = &impInstance;
    float v = static_cast<float>(value->NumberValue());
    imp->setValueInSpecifiedUnits(v);
    wrapper->commitChange();
    return;
}

static v8::Handle<v8::Value> valueAsStringAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    SVGPropertyTearOff<SVGAngle>* wrapper = V8SVGAngle::toNative(info.Holder());
    SVGAngle& impInstance = wrapper->propertyReference();
    SVGAngle* imp = &impInstance;
    return v8String(imp->valueAsString(), info.GetIsolate());
}

static void valueAsStringAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    SVGPropertyTearOff<SVGAngle>* wrapper = V8SVGAngle::toNative(info.Holder());
    if (wrapper->isReadOnly()) {
        setDOMException(NO_MODIFICATION_ALLOWED_ERR, info.GetIsolate());
        return;
    }
    SVGAngle& impInstance = wrapper->propertyReference();
    SVGAngle* imp = &impInstance;
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setValueAsString(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    if (!ec)
        wrapper->commitChange();
    return;
}

static v8::Handle<v8::Value> newValueSpecifiedUnitsCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RefPtr<SVGPropertyTearOff<SVGAngle> > wrapper = V8SVGAngle::toNative(args.Holder());
    if (wrapper->isReadOnly())
        return setDOMException(NO_MODIFICATION_ALLOWED_ERR, args.GetIsolate());
    SVGAngle& impInstance = wrapper->propertyReference();
    SVGAngle* imp = &impInstance;
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, unitType, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    V8TRYCATCH(float, valueInSpecifiedUnits, static_cast<float>(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)->NumberValue()));
    imp->newValueSpecifiedUnits(unitType, valueInSpecifiedUnits, ec);
    if (UNLIKELY(ec))
        goto fail;
    wrapper->commitChange();
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> convertToSpecifiedUnitsCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    RefPtr<SVGPropertyTearOff<SVGAngle> > wrapper = V8SVGAngle::toNative(args.Holder());
    if (wrapper->isReadOnly())
        return setDOMException(NO_MODIFICATION_ALLOWED_ERR, args.GetIsolate());
    SVGAngle& impInstance = wrapper->propertyReference();
    SVGAngle* imp = &impInstance;
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(int, unitType, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->convertToSpecifiedUnits(unitType, ec);
    if (UNLIKELY(ec))
        goto fail;
    wrapper->commitChange();
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace SVGAngleV8Internal

static const V8DOMConfiguration::BatchedAttribute V8SVGAngleAttrs[] = {
    // Attribute 'unitType' (Type: 'readonly attribute' ExtAttr: '')
    {"unitType", SVGAngleV8Internal::unitTypeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'value' (Type: 'attribute' ExtAttr: 'StrictTypeChecking')
    {"value", SVGAngleV8Internal::valueAttrGetter, SVGAngleV8Internal::valueAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'valueInSpecifiedUnits' (Type: 'attribute' ExtAttr: 'StrictTypeChecking')
    {"valueInSpecifiedUnits", SVGAngleV8Internal::valueInSpecifiedUnitsAttrGetter, SVGAngleV8Internal::valueInSpecifiedUnitsAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'valueAsString' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"valueAsString", SVGAngleV8Internal::valueAsStringAttrGetter, SVGAngleV8Internal::valueAsStringAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8SVGAngleCallbacks[] = {
    {"newValueSpecifiedUnits", SVGAngleV8Internal::newValueSpecifiedUnitsCallback},
    {"convertToSpecifiedUnits", SVGAngleV8Internal::convertToSpecifiedUnitsCallback},
};

static const V8DOMConfiguration::BatchedConstant V8SVGAngleConsts[] = {
    {"SVG_ANGLETYPE_UNKNOWN", static_cast<signed int>(0)},
    {"SVG_ANGLETYPE_UNSPECIFIED", static_cast<signed int>(1)},
    {"SVG_ANGLETYPE_DEG", static_cast<signed int>(2)},
    {"SVG_ANGLETYPE_RAD", static_cast<signed int>(3)},
    {"SVG_ANGLETYPE_GRAD", static_cast<signed int>(4)},
};


COMPILE_ASSERT(0 == SVGAngle::SVG_ANGLETYPE_UNKNOWN, SVGAngleEnumSVG_ANGLETYPE_UNKNOWNIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(1 == SVGAngle::SVG_ANGLETYPE_UNSPECIFIED, SVGAngleEnumSVG_ANGLETYPE_UNSPECIFIEDIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == SVGAngle::SVG_ANGLETYPE_DEG, SVGAngleEnumSVG_ANGLETYPE_DEGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == SVGAngle::SVG_ANGLETYPE_RAD, SVGAngleEnumSVG_ANGLETYPE_RADIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(4 == SVGAngle::SVG_ANGLETYPE_GRAD, SVGAngleEnumSVG_ANGLETYPE_GRADIsWrongUseDoNotCheckConstants);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGAngleTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "SVGAngle", v8::Persistent<v8::FunctionTemplate>(), V8SVGAngle::internalFieldCount,
        V8SVGAngleAttrs, WTF_ARRAY_LENGTH(V8SVGAngleAttrs),
        V8SVGAngleCallbacks, WTF_ARRAY_LENGTH(V8SVGAngleCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8SVGAngleConsts, WTF_ARRAY_LENGTH(V8SVGAngleConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGAngle::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8SVGAngle::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8SVGAngleTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8SVGAngle::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGAngle::createWrapper(PassRefPtr<SVGPropertyTearOff<SVGAngle> > impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8SVGAngle::derefObject(void* object)
{
    static_cast<SVGPropertyTearOff<SVGAngle>*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(SVG)
