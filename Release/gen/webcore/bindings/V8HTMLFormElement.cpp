/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8HTMLFormElement.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "EventListener.h"
#include "Frame.h"
#include "HTMLNames.h"
#include "RuntimeEnabledFeatures.h"
#include "V8AbstractEventListener.h"
#include "V8Binding.h"
#include "V8Collection.h"
#include "V8DOMWrapper.h"
#include "V8HTMLCollection.h"
#include "V8HTMLElement.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8HTMLFormElement::info = { V8HTMLFormElement::GetTemplate, V8HTMLFormElement::derefObject, 0, 0, V8HTMLFormElement::installPerContextPrototypeProperties, &V8HTMLElement::info, WrapperTypeObjectPrototype };

namespace HTMLFormElementV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> acceptCharsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::accept_charsetAttr), info.GetIsolate());
}

static void acceptCharsetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::accept_charsetAttr, stringResource);
}

static v8::Handle<v8::Value> actionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(WebCore::HTMLNames::actionAttr), info.GetIsolate());
}

static void actionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::actionAttr, stringResource);
}

static v8::Handle<v8::Value> autocompleteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::autocompleteAttr), info.GetIsolate());
}

static void autocompleteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::autocompleteAttr, stringResource);
}

static v8::Handle<v8::Value> enctypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8String(imp->enctype(), info.GetIsolate());
}

static void enctypeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setEnctype(v);
    return;
}

static v8::Handle<v8::Value> encodingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8String(imp->encoding(), info.GetIsolate());
}

static void encodingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setEncoding(v);
    return;
}

static v8::Handle<v8::Value> methodAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8String(imp->method(), info.GetIsolate());
}

static void methodAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    imp->setMethod(v);
    return;
}

static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->getNameAttribute(), info.GetIsolate());
}

static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::nameAttr, stringResource);
}

static v8::Handle<v8::Value> noValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8Boolean(imp->fastHasAttribute(WebCore::HTMLNames::novalidateAttr), info.GetIsolate());
}

static void noValidateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setBooleanAttribute(WebCore::HTMLNames::novalidateAttr, v);
    return;
}

static v8::Handle<v8::Value> targetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::targetAttr), info.GetIsolate());
}

static void targetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::targetAttr, stringResource);
}

static v8::Handle<v8::Value> elementsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return toV8Fast(imp->elements(), info, imp);
}

static v8::Handle<v8::Value> lengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8Integer(imp->length(), info.GetIsolate());
}

static v8::Handle<v8::Value> onautocompleteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return imp->onautocomplete() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onautocomplete())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onautocompleteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    imp->setOnautocomplete(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onautocompleteerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return imp->onautocompleteerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onautocompleteerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onautocompleteerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    imp->setOnautocompleteerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> submitCallback(const v8::Arguments& args)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(args.Holder());
    imp->submitFromJavaScript();
    return v8Undefined();
}

static v8::Handle<v8::Value> resetCallback(const v8::Arguments& args)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(args.Holder());
    imp->reset();
    return v8Undefined();
}

static v8::Handle<v8::Value> checkValidityCallback(const v8::Arguments& args)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(args.Holder());
    return v8Boolean(imp->checkValidity(), args.GetIsolate());
}

static v8::Handle<v8::Value> requestAutocompleteCallback(const v8::Arguments& args)
{
    HTMLFormElement* imp = V8HTMLFormElement::toNative(args.Holder());
    imp->requestAutocomplete();
    return v8Undefined();
}

} // namespace HTMLFormElementV8Internal

static const V8DOMConfiguration::BatchedAttribute V8HTMLFormElementAttrs[] = {
    // Attribute 'acceptCharset' (Type: 'attribute' ExtAttr: 'Reflect')
    {"acceptCharset", HTMLFormElementV8Internal::acceptCharsetAttrGetter, HTMLFormElementV8Internal::acceptCharsetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'action' (Type: 'attribute' ExtAttr: 'URL Reflect')
    {"action", HTMLFormElementV8Internal::actionAttrGetter, HTMLFormElementV8Internal::actionAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'autocomplete' (Type: 'attribute' ExtAttr: 'Reflect')
    {"autocomplete", HTMLFormElementV8Internal::autocompleteAttrGetter, HTMLFormElementV8Internal::autocompleteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'enctype' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"enctype", HTMLFormElementV8Internal::enctypeAttrGetter, HTMLFormElementV8Internal::enctypeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'encoding' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"encoding", HTMLFormElementV8Internal::encodingAttrGetter, HTMLFormElementV8Internal::encodingAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'method' (Type: 'attribute' ExtAttr: 'TreatNullAs')
    {"method", HTMLFormElementV8Internal::methodAttrGetter, HTMLFormElementV8Internal::methodAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'name' (Type: 'attribute' ExtAttr: 'Reflect')
    {"name", HTMLFormElementV8Internal::nameAttrGetter, HTMLFormElementV8Internal::nameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'noValidate' (Type: 'attribute' ExtAttr: 'Reflect')
    {"noValidate", HTMLFormElementV8Internal::noValidateAttrGetter, HTMLFormElementV8Internal::noValidateAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'target' (Type: 'attribute' ExtAttr: 'Reflect')
    {"target", HTMLFormElementV8Internal::targetAttrGetter, HTMLFormElementV8Internal::targetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'elements' (Type: 'readonly attribute' ExtAttr: '')
    {"elements", HTMLFormElementV8Internal::elementsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'length' (Type: 'readonly attribute' ExtAttr: '')
    {"length", HTMLFormElementV8Internal::lengthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8HTMLFormElementCallbacks[] = {
    {"submit", HTMLFormElementV8Internal::submitCallback},
    {"reset", HTMLFormElementV8Internal::resetCallback},
    {"checkValidity", HTMLFormElementV8Internal::checkValidityCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLFormElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "HTMLFormElement", V8HTMLElement::GetTemplate(), V8HTMLFormElement::internalFieldCount,
        V8HTMLFormElementAttrs, WTF_ARRAY_LENGTH(V8HTMLFormElementAttrs),
        V8HTMLFormElementCallbacks, WTF_ARRAY_LENGTH(V8HTMLFormElementCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    if (RuntimeEnabledFeatures::requestAutocompleteEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'onautocomplete' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime NotEnumerable')
        {"onautocomplete", HTMLFormElementV8Internal::onautocompleteAttrGetter, HTMLFormElementV8Internal::onautocompleteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::requestAutocompleteEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'onautocompleteerror' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime NotEnumerable')
        {"onautocompleteerror", HTMLFormElementV8Internal::onautocompleteerrorAttrGetter, HTMLFormElementV8Internal::onautocompleteerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }
    desc->InstanceTemplate()->SetIndexedPropertyHandler(V8HTMLFormElement::indexedPropertyGetter, 0, 0, 0, nodeCollectionIndexedPropertyEnumerator<HTMLFormElement>);
    desc->InstanceTemplate()->SetNamedPropertyHandler(V8HTMLFormElement::namedPropertyGetter, 0, 0, 0, 0);
    if (RuntimeEnabledFeatures::requestAutocompleteEnabled())
        proto->Set(v8::String::NewSymbol("requestAutocomplete"), v8::FunctionTemplate::New(HTMLFormElementV8Internal::requestAutocompleteCallback, v8Undefined(), defaultSignature));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLFormElement::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLFormElement::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8HTMLFormElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8HTMLFormElement::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLFormElement::createWrapper(PassRefPtr<HTMLFormElement> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<Node*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8HTMLFormElement::derefObject(void* object)
{
    static_cast<HTMLFormElement*>(object)->deref();
}

} // namespace WebCore
