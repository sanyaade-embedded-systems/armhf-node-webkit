/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8IDBCursor.h"

#if ENABLE(INDEXED_DATABASE)

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "IDBBindingUtilities.h"
#include "IDBKey.h"
#include "RuntimeEnabledFeatures.h"
#include "ScriptValue.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8IDBAny.h"
#include "V8IDBRequest.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8IDBCursor::info = { V8IDBCursor::GetTemplate, V8IDBCursor::derefObject, 0, 0, V8IDBCursor::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace IDBCursorV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> directionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    IDBCursor* imp = V8IDBCursor::toNative(info.Holder());
    return v8String(imp->direction(), info.GetIsolate());
}

static v8::Handle<v8::Value> keyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    IDBCursor* imp = V8IDBCursor::toNative(info.Holder());
    return imp->key().v8Value();
}

static v8::Handle<v8::Value> primaryKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    IDBCursor* imp = V8IDBCursor::toNative(info.Holder());
    return imp->primaryKey().v8Value();
}

static v8::Handle<v8::Value> sourceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    IDBCursor* imp = V8IDBCursor::toNative(info.Holder());
    RefPtr<IDBAny> result = imp->source();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "source", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> updateCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    IDBCursor* imp = V8IDBCursor::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(ScriptValue, value, ScriptValue(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return v8Undefined();
    ScriptState& state = *currentState;
    RefPtr<IDBRequest> result = imp->update(&state, value, ec);
    if (UNLIKELY(ec))
        goto fail;
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        return throwError(exception, args.GetIsolate());
    }
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> advanceCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    IDBCursor* imp = V8IDBCursor::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(long long, count, toInt64(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->advance(count, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> continueCallback(const v8::Arguments& args)
{
    IDBCursor* imp = V8IDBCursor::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        imp->continueFunction(ec);
        if (UNLIKELY(ec))
            goto fail;
        return v8Undefined();
    }
    V8TRYCATCH(RefPtr<IDBKey>, key, createIDBKeyFromValue(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->continueFunction(key.get(), ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> deleteCallback(const v8::Arguments& args)
{
    IDBCursor* imp = V8IDBCursor::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    ScriptExecutionContext* scriptContext = getScriptExecutionContext();
    RefPtr<IDBRequest> result = imp->deleteFunction(scriptContext, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8(result.release(), args.Holder(), args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace IDBCursorV8Internal

static const V8DOMConfiguration::BatchedAttribute V8IDBCursorAttrs[] = {
    // Attribute 'direction' (Type: 'readonly attribute' ExtAttr: '')
    {"direction", IDBCursorV8Internal::directionAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'key' (Type: 'readonly attribute' ExtAttr: '')
    {"key", IDBCursorV8Internal::keyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'primaryKey' (Type: 'readonly attribute' ExtAttr: '')
    {"primaryKey", IDBCursorV8Internal::primaryKeyAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'source' (Type: 'readonly attribute' ExtAttr: '')
    {"source", IDBCursorV8Internal::sourceAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8IDBCursorCallbacks[] = {
    {"update", IDBCursorV8Internal::updateCallback},
    {"advance", IDBCursorV8Internal::advanceCallback},
    {"continue", IDBCursorV8Internal::continueCallback},
    {"delete", IDBCursorV8Internal::deleteCallback},
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8IDBCursorTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "IDBCursor", v8::Persistent<v8::FunctionTemplate>(), V8IDBCursor::internalFieldCount,
        V8IDBCursorAttrs, WTF_ARRAY_LENGTH(V8IDBCursorAttrs),
        V8IDBCursorCallbacks, WTF_ARRAY_LENGTH(V8IDBCursorCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8IDBCursor::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8IDBCursor::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8IDBCursorTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8IDBCursor::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8IDBCursor::createWrapper(PassRefPtr<IDBCursor> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8IDBCursor::derefObject(void* object)
{
    static_cast<IDBCursor*>(object)->deref();
}

} // namespace WebCore

#endif // ENABLE(INDEXED_DATABASE)
