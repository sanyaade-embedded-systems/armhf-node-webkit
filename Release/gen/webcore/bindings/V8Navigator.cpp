/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Navigator.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "Dictionary.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "NavigatorBattery.h"
#include "NavigatorContentUtils.h"
#include "NavigatorGamepad.h"
#include "NavigatorGeolocation.h"
#include "NavigatorIntents.h"
#include "NavigatorMediaStream.h"
#include "RuntimeEnabledFeatures.h"
#include "V8BatteryManager.h"
#include "V8Binding.h"
#include "V8DOMMimeTypeArray.h"
#include "V8DOMPluginArray.h"
#include "V8DOMWrapper.h"
#include "V8GamepadList.h"
#include "V8Geolocation.h"
#include "V8Intent.h"
#include "V8IntentResultCallback.h"
#include "V8NavigatorUserMediaErrorCallback.h"
#include "V8NavigatorUserMediaSuccessCallback.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8Navigator::info = { V8Navigator::GetTemplate, V8Navigator::derefObject, 0, 0, V8Navigator::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace NavigatorV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> appCodeNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    return v8String(imp->appCodeName(), info.GetIsolate());
}

static v8::Handle<v8::Value> appNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    return v8String(imp->appName(), info.GetIsolate());
}

static v8::Handle<v8::Value> appVersionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    return v8String(imp->appVersion(), info.GetIsolate());
}

static v8::Handle<v8::Value> languageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    return v8String(imp->language(), info.GetIsolate());
}

static v8::Handle<v8::Value> userAgentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    return v8String(imp->userAgent(), info.GetIsolate());
}

static v8::Handle<v8::Value> platformAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    return v8String(imp->platform(), info.GetIsolate());
}

static v8::Handle<v8::Value> pluginsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    RefPtr<DOMPluginArray> result = imp->plugins();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "plugins", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> mimeTypesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    RefPtr<DOMMimeTypeArray> result = imp->mimeTypes();
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "mimeTypes", wrapper);
    }
    return wrapper;
}

static v8::Handle<v8::Value> productAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    return v8String(imp->product(), info.GetIsolate());
}

static v8::Handle<v8::Value> productSubAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    return v8String(imp->productSub(), info.GetIsolate());
}

static v8::Handle<v8::Value> vendorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    return v8String(imp->vendor(), info.GetIsolate());
}

static v8::Handle<v8::Value> vendorSubAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    return v8String(imp->vendorSub(), info.GetIsolate());
}

static v8::Handle<v8::Value> cookieEnabledAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    return v8Boolean(imp->cookieEnabled(), info.GetIsolate());
}

static v8::Handle<v8::Value> onLineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    return v8Boolean(imp->onLine(), info.GetIsolate());
}

#if ENABLE(BATTERY_STATUS)

static v8::Handle<v8::Value> webkitBatteryAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    RefPtr<BatteryManager> result = NavigatorBattery::webkitBattery(imp);
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "webkitBattery", wrapper);
    }
    return wrapper;
}

#endif // ENABLE(BATTERY_STATUS)

#if ENABLE(GEOLOCATION)

static v8::Handle<v8::Value> geolocationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Navigator* imp = V8Navigator::toNative(info.Holder());
    RefPtr<Geolocation> result = NavigatorGeolocation::geolocation(imp);
    v8::Handle<v8::Value> wrapper = result.get() ? v8::Handle<v8::Value>(DOMDataStore::getWrapper(result.get(), info.GetIsolate())) : v8Undefined();
    if (wrapper.IsEmpty()) {
        wrapper = toV8(result.get(), info.Holder(), info.GetIsolate());
        if (!wrapper.IsEmpty())
            V8DOMWrapper::setNamedHiddenReference(info.Holder(), "geolocation", wrapper);
    }
    return wrapper;
}

#endif // ENABLE(GEOLOCATION)

static v8::Handle<v8::Value> javaEnabledCallback(const v8::Arguments& args)
{
    Navigator* imp = V8Navigator::toNative(args.Holder());
    return v8Boolean(imp->javaEnabled(), args.GetIsolate());
}

static v8::Handle<v8::Value> getStorageUpdatesCallback(const v8::Arguments& args)
{
    Navigator* imp = V8Navigator::toNative(args.Holder());
    imp->getStorageUpdates();
    return v8Undefined();
}

#if ENABLE(MEDIA_STREAM)

static v8::Handle<v8::Value> webkitGetUserMediaCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Navigator* imp = V8Navigator::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Dictionary, options, Dictionary(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined), args.GetIsolate()));
    if (!options.isUndefinedOrNull() && !options.isObject())
        return throwTypeError("Not an object.", args.GetIsolate());
    if (args.Length() <= 1 || !args[1]->IsFunction())
        return throwTypeError(0, args.GetIsolate());
    RefPtr<NavigatorUserMediaSuccessCallback> successCallback = V8NavigatorUserMediaSuccessCallback::create(args[1], getScriptExecutionContext());
    RefPtr<NavigatorUserMediaErrorCallback> errorCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        errorCallback = V8NavigatorUserMediaErrorCallback::create(args[2], getScriptExecutionContext());
    }
    NavigatorMediaStream::webkitGetUserMedia(imp, options, successCallback, errorCallback, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

#endif // ENABLE(MEDIA_STREAM)

#if ENABLE(WEB_INTENTS)

static v8::Handle<v8::Value> webkitStartActivityCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Navigator* imp = V8Navigator::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Intent*, intent, V8Intent::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Intent::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    RefPtr<IntentResultCallback> successCallback;
    if (args.Length() > 1 && !args[1]->IsNull() && !args[1]->IsUndefined()) {
        if (!args[1]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        successCallback = V8IntentResultCallback::create(args[1], getScriptExecutionContext());
    }
    RefPtr<IntentResultCallback> failureCallback;
    if (args.Length() > 2 && !args[2]->IsNull() && !args[2]->IsUndefined()) {
        if (!args[2]->IsFunction())
            return throwTypeError(0, args.GetIsolate());
        failureCallback = V8IntentResultCallback::create(args[2], getScriptExecutionContext());
    }
    NavigatorIntents::webkitStartActivity(imp, intent, successCallback, failureCallback, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

#endif // ENABLE(WEB_INTENTS)

#if ENABLE(GAMEPAD)

static v8::Handle<v8::Value> webkitGetGamepadsCallback(const v8::Arguments& args)
{
    Navigator* imp = V8Navigator::toNative(args.Holder());
    return toV8(NavigatorGamepad::webkitGetGamepads(imp), args.Holder(), args.GetIsolate());
}

#endif // ENABLE(GAMEPAD)

#if ENABLE(NAVIGATOR_CONTENT_UTILS)

static v8::Handle<v8::Value> registerProtocolHandlerCallback(const v8::Arguments& args)
{
    if (args.Length() < 3)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Navigator* imp = V8Navigator::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, scheme, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, title, MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined));
    NavigatorContentUtils::registerProtocolHandler(imp, scheme, url, title, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

#endif // ENABLE(NAVIGATOR_CONTENT_UTILS)

#if ENABLE(CUSTOM_SCHEME_HANDLER) && ENABLE(NAVIGATOR_CONTENT_UTILS)

static v8::Handle<v8::Value> isProtocolHandlerRegisteredCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Navigator* imp = V8Navigator::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, scheme, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    String result = NavigatorContentUtils::isProtocolHandlerRegistered(imp, scheme, url, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8String(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

#endif // ENABLE(CUSTOM_SCHEME_HANDLER) && ENABLE(NAVIGATOR_CONTENT_UTILS)

#if ENABLE(CUSTOM_SCHEME_HANDLER) && ENABLE(NAVIGATOR_CONTENT_UTILS)

static v8::Handle<v8::Value> unregisterProtocolHandlerCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Navigator* imp = V8Navigator::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, scheme, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, url, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    NavigatorContentUtils::unregisterProtocolHandler(imp, scheme, url, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

#endif // ENABLE(CUSTOM_SCHEME_HANDLER) && ENABLE(NAVIGATOR_CONTENT_UTILS)

} // namespace NavigatorV8Internal

static const V8DOMConfiguration::BatchedAttribute V8NavigatorAttrs[] = {
    // Attribute 'appCodeName' (Type: 'readonly attribute' ExtAttr: '')
    {"appCodeName", NavigatorV8Internal::appCodeNameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'appName' (Type: 'readonly attribute' ExtAttr: '')
    {"appName", NavigatorV8Internal::appNameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'appVersion' (Type: 'readonly attribute' ExtAttr: '')
    {"appVersion", NavigatorV8Internal::appVersionAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'language' (Type: 'readonly attribute' ExtAttr: '')
    {"language", NavigatorV8Internal::languageAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'userAgent' (Type: 'readonly attribute' ExtAttr: '')
    {"userAgent", NavigatorV8Internal::userAgentAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'platform' (Type: 'readonly attribute' ExtAttr: '')
    {"platform", NavigatorV8Internal::platformAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'plugins' (Type: 'readonly attribute' ExtAttr: '')
    {"plugins", NavigatorV8Internal::pluginsAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'mimeTypes' (Type: 'readonly attribute' ExtAttr: '')
    {"mimeTypes", NavigatorV8Internal::mimeTypesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'product' (Type: 'readonly attribute' ExtAttr: '')
    {"product", NavigatorV8Internal::productAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'productSub' (Type: 'readonly attribute' ExtAttr: '')
    {"productSub", NavigatorV8Internal::productSubAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'vendor' (Type: 'readonly attribute' ExtAttr: '')
    {"vendor", NavigatorV8Internal::vendorAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'vendorSub' (Type: 'readonly attribute' ExtAttr: '')
    {"vendorSub", NavigatorV8Internal::vendorSubAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'cookieEnabled' (Type: 'readonly attribute' ExtAttr: '')
    {"cookieEnabled", NavigatorV8Internal::cookieEnabledAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onLine' (Type: 'readonly attribute' ExtAttr: '')
    {"onLine", NavigatorV8Internal::onLineAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#if ENABLE(BATTERY_STATUS)
    // Attribute 'webkitBattery' (Type: 'readonly attribute' ExtAttr: 'Conditional ImplementedBy')
    {"webkitBattery", NavigatorV8Internal::webkitBatteryAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
#endif // ENABLE(BATTERY_STATUS)
};

static const V8DOMConfiguration::BatchedCallback V8NavigatorCallbacks[] = {
    {"javaEnabled", NavigatorV8Internal::javaEnabledCallback},
    {"getStorageUpdates", NavigatorV8Internal::getStorageUpdatesCallback},
#if ENABLE(NAVIGATOR_CONTENT_UTILS)
    {"registerProtocolHandler", NavigatorV8Internal::registerProtocolHandlerCallback},
#endif
#if ENABLE(CUSTOM_SCHEME_HANDLER) && ENABLE(NAVIGATOR_CONTENT_UTILS)
    {"isProtocolHandlerRegistered", NavigatorV8Internal::isProtocolHandlerRegisteredCallback},
#endif
#if ENABLE(CUSTOM_SCHEME_HANDLER) && ENABLE(NAVIGATOR_CONTENT_UTILS)
    {"unregisterProtocolHandler", NavigatorV8Internal::unregisterProtocolHandlerCallback},
#endif
};

static v8::Persistent<v8::FunctionTemplate> ConfigureV8NavigatorTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "Navigator", v8::Persistent<v8::FunctionTemplate>(), V8Navigator::internalFieldCount,
        V8NavigatorAttrs, WTF_ARRAY_LENGTH(V8NavigatorAttrs),
        V8NavigatorCallbacks, WTF_ARRAY_LENGTH(V8NavigatorCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

#if ENABLE(GEOLOCATION)
    if (RuntimeEnabledFeatures::geolocationEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'geolocation' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime Conditional ImplementedBy')
        {"geolocation", NavigatorV8Internal::geolocationAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(GEOLOCATION)
#if ENABLE(MEDIA_STREAM)
    if (RuntimeEnabledFeatures::webkitGetUserMediaEnabled())
        proto->Set(v8::String::NewSymbol("webkitGetUserMedia"), v8::FunctionTemplate::New(NavigatorV8Internal::webkitGetUserMediaCallback, v8Undefined(), defaultSignature));
#endif // ENABLE(MEDIA_STREAM)
#if ENABLE(WEB_INTENTS)
    if (RuntimeEnabledFeatures::webkitStartActivityEnabled())
        proto->Set(v8::String::NewSymbol("webkitStartActivity"), v8::FunctionTemplate::New(NavigatorV8Internal::webkitStartActivityCallback, v8Undefined(), defaultSignature));
#endif // ENABLE(WEB_INTENTS)
#if ENABLE(GAMEPAD)
    if (RuntimeEnabledFeatures::webkitGetGamepadsEnabled())
        proto->Set(v8::String::NewSymbol("webkitGetGamepads"), v8::FunctionTemplate::New(NavigatorV8Internal::webkitGetGamepadsCallback, v8Undefined(), defaultSignature));
#endif // ENABLE(GAMEPAD)

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Navigator::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Navigator::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8NavigatorTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Navigator::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Navigator::createWrapper(PassRefPtr<Navigator> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8Navigator::derefObject(void* object)
{
    static_cast<Navigator*>(object)->deref();
}

} // namespace WebCore
