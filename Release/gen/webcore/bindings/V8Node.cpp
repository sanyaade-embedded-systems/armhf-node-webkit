/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Node.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Binding.h"
#include "V8DOMWrapper.h"
#include "V8Document.h"
#include "V8Element.h"
#include "V8Event.h"
#include "V8NamedNodeMap.h"
#include "V8NodeList.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8Node::info = { V8Node::GetTemplate, V8Node::derefObject, 0, 0, V8Node::installPerContextPrototypeProperties, 0, WrapperTypeObjectPrototype };

namespace NodeV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> nodeNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return v8StringOrNull(imp->nodeName(), info.GetIsolate());
}

static v8::Handle<v8::Value> nodeValueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return v8StringOrNull(imp->nodeValue(), info.GetIsolate());
}

static void nodeValueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setNodeValue(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> nodeTypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return v8Integer(imp->nodeType(), info.GetIsolate());
}

static v8::Handle<v8::Value> parentNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return toV8Fast(imp->parentNode(), info, imp);
}

static v8::Handle<v8::Value> childNodesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return toV8Fast(imp->childNodes(), info, imp);
}

static v8::Handle<v8::Value> firstChildAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return toV8Fast(imp->firstChild(), info, imp);
}

static v8::Handle<v8::Value> lastChildAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return toV8Fast(imp->lastChild(), info, imp);
}

static v8::Handle<v8::Value> previousSiblingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return toV8Fast(imp->previousSibling(), info, imp);
}

static v8::Handle<v8::Value> nextSiblingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return toV8Fast(imp->nextSibling(), info, imp);
}

static v8::Handle<v8::Value> attributesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return toV8Fast(imp->attributes(), info, imp);
}

static v8::Handle<v8::Value> ownerDocumentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return toV8Fast(imp->ownerDocument(), info, imp);
}

static v8::Handle<v8::Value> namespaceURIAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return v8StringOrNull(imp->namespaceURI(), info.GetIsolate());
}

static v8::Handle<v8::Value> prefixAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return v8StringOrNull(imp->prefix(), info.GetIsolate());
}

static void prefixAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setPrefix(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> localNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return v8StringOrNull(imp->localName(), info.GetIsolate());
}

static v8::Handle<v8::Value> baseURIAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return v8StringOrNull(imp->baseURI(), info.GetIsolate());
}

static v8::Handle<v8::Value> textContentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return v8StringOrNull(imp->textContent(), info.GetIsolate());
}

static void textContentAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, v, value);
    ExceptionCode ec = 0;
    imp->setTextContent(v, ec);
    if (UNLIKELY(ec))
        setDOMException(ec, info.GetIsolate());
    return;
}

static v8::Handle<v8::Value> parentElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Node* imp = V8Node::toNative(info.Holder());
    return toV8Fast(imp->parentElement(), info, imp);
}

static v8::Handle<v8::Value> hasChildNodesCallback(const v8::Arguments& args)
{
    Node* imp = V8Node::toNative(args.Holder());
    return v8Boolean(imp->hasChildNodes(), args.GetIsolate());
}

static v8::Handle<v8::Value> cloneNodeCallback(const v8::Arguments& args)
{
    Node* imp = V8Node::toNative(args.Holder());
    V8TRYCATCH(bool, deep, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    return toV8Fast(imp->cloneNode(deep), args, imp);
}

static v8::Handle<v8::Value> normalizeCallback(const v8::Arguments& args)
{
    Node* imp = V8Node::toNative(args.Holder());
    imp->normalize();
    return v8Undefined();
}

static v8::Handle<v8::Value> isSupportedCallback(const v8::Arguments& args)
{
    Node* imp = V8Node::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, feature, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, version, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    return v8Boolean(imp->isSupported(feature, version), args.GetIsolate());
}

static v8::Handle<v8::Value> hasAttributesCallback(const v8::Arguments& args)
{
    Node* imp = V8Node::toNative(args.Holder());
    return v8Boolean(imp->hasAttributes(), args.GetIsolate());
}

static v8::Handle<v8::Value> isSameNodeCallback(const v8::Arguments& args)
{
    Node* imp = V8Node::toNative(args.Holder());
    V8TRYCATCH(Node*, other, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    return v8Boolean(imp->isSameNode(other), args.GetIsolate());
}

static v8::Handle<v8::Value> isEqualNodeCallback(const v8::Arguments& args)
{
    Node* imp = V8Node::toNative(args.Holder());
    V8TRYCATCH(Node*, other, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    return v8Boolean(imp->isEqualNode(other), args.GetIsolate());
}

static v8::Handle<v8::Value> lookupPrefixCallback(const v8::Arguments& args)
{
    Node* imp = V8Node::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8StringOrNull(imp->lookupPrefix(namespaceURI), args.GetIsolate());
}

static v8::Handle<v8::Value> isDefaultNamespaceCallback(const v8::Arguments& args)
{
    Node* imp = V8Node::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->isDefaultNamespace(namespaceURI), args.GetIsolate());
}

static v8::Handle<v8::Value> lookupNamespaceURICallback(const v8::Arguments& args)
{
    Node* imp = V8Node::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, prefix, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8StringOrNull(imp->lookupNamespaceURI(prefix), args.GetIsolate());
}

static v8::Handle<v8::Value> compareDocumentPositionCallback(const v8::Arguments& args)
{
    Node* imp = V8Node::toNative(args.Holder());
    V8TRYCATCH(Node*, other, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    return v8Integer(imp->compareDocumentPosition(other), args.GetIsolate());
}

static v8::Handle<v8::Value> containsCallback(const v8::Arguments& args)
{
    Node* imp = V8Node::toNative(args.Holder());
    V8TRYCATCH(Node*, other, V8Node::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    return v8Boolean(imp->contains(other), args.GetIsolate());
}

static v8::Handle<v8::Value> addEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOrCreate);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8Node::toNative(args.Holder())->addEventListener(stringResource, listener, args[2]->BooleanValue());
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> removeEventListenerCallback(const v8::Arguments& args)
{
    RefPtr<EventListener> listener = V8DOMWrapper::getEventListener(args[1], false, ListenerFindOnly);
    if (listener) {
        V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, stringResource, args[0]);
        V8Node::toNative(args.Holder())->removeEventListener(stringResource, listener.get(), args[2]->BooleanValue());
    }
    return v8Undefined();
}

static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Node* imp = V8Node::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH(Event*, event, V8Event::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
    bool result = imp->dispatchEvent(event, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

} // namespace NodeV8Internal

static const V8DOMConfiguration::BatchedAttribute V8NodeAttrs[] = {
    // Attribute 'nodeName' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"nodeName", NodeV8Internal::nodeNameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'nodeValue' (Type: 'attribute' ExtAttr: 'TreatNullAs TreatReturnedNullStringAs')
    {"nodeValue", NodeV8Internal::nodeValueAttrGetter, NodeV8Internal::nodeValueAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'nodeType' (Type: 'readonly attribute' ExtAttr: '')
    {"nodeType", NodeV8Internal::nodeTypeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'parentNode' (Type: 'readonly attribute' ExtAttr: '')
    {"parentNode", NodeV8Internal::parentNodeAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'childNodes' (Type: 'readonly attribute' ExtAttr: '')
    {"childNodes", NodeV8Internal::childNodesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'firstChild' (Type: 'readonly attribute' ExtAttr: '')
    {"firstChild", NodeV8Internal::firstChildAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'lastChild' (Type: 'readonly attribute' ExtAttr: '')
    {"lastChild", NodeV8Internal::lastChildAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'previousSibling' (Type: 'readonly attribute' ExtAttr: '')
    {"previousSibling", NodeV8Internal::previousSiblingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'nextSibling' (Type: 'readonly attribute' ExtAttr: '')
    {"nextSibling", NodeV8Internal::nextSiblingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'attributes' (Type: 'readonly attribute' ExtAttr: '')
    {"attributes", NodeV8Internal::attributesAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'ownerDocument' (Type: 'readonly attribute' ExtAttr: '')
    {"ownerDocument", NodeV8Internal::ownerDocumentAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'namespaceURI' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"namespaceURI", NodeV8Internal::namespaceURIAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'prefix' (Type: 'attribute' ExtAttr: 'TreatNullAs TreatReturnedNullStringAs')
    {"prefix", NodeV8Internal::prefixAttrGetter, NodeV8Internal::prefixAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'localName' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"localName", NodeV8Internal::localNameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'baseURI' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"baseURI", NodeV8Internal::baseURIAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'textContent' (Type: 'attribute' ExtAttr: 'TreatNullAs TreatReturnedNullStringAs')
    {"textContent", NodeV8Internal::textContentAttrGetter, NodeV8Internal::textContentAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'parentElement' (Type: 'readonly attribute' ExtAttr: '')
    {"parentElement", NodeV8Internal::parentElementAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
};

static const V8DOMConfiguration::BatchedCallback V8NodeCallbacks[] = {
    {"insertBefore", V8Node::insertBeforeCallback},
    {"replaceChild", V8Node::replaceChildCallback},
    {"removeChild", V8Node::removeChildCallback},
    {"appendChild", V8Node::appendChildCallback},
    {"hasChildNodes", NodeV8Internal::hasChildNodesCallback},
    {"cloneNode", NodeV8Internal::cloneNodeCallback},
    {"normalize", NodeV8Internal::normalizeCallback},
    {"isSupported", NodeV8Internal::isSupportedCallback},
    {"hasAttributes", NodeV8Internal::hasAttributesCallback},
    {"lookupPrefix", NodeV8Internal::lookupPrefixCallback},
    {"isDefaultNamespace", NodeV8Internal::isDefaultNamespaceCallback},
    {"lookupNamespaceURI", NodeV8Internal::lookupNamespaceURICallback},
    {"addEventListener", NodeV8Internal::addEventListenerCallback},
    {"removeEventListener", NodeV8Internal::removeEventListenerCallback},
};

static const V8DOMConfiguration::BatchedConstant V8NodeConsts[] = {
    {"ELEMENT_NODE", static_cast<signed int>(1)},
    {"ATTRIBUTE_NODE", static_cast<signed int>(2)},
    {"TEXT_NODE", static_cast<signed int>(3)},
    {"CDATA_SECTION_NODE", static_cast<signed int>(4)},
    {"ENTITY_REFERENCE_NODE", static_cast<signed int>(5)},
    {"ENTITY_NODE", static_cast<signed int>(6)},
    {"PROCESSING_INSTRUCTION_NODE", static_cast<signed int>(7)},
    {"COMMENT_NODE", static_cast<signed int>(8)},
    {"DOCUMENT_NODE", static_cast<signed int>(9)},
    {"DOCUMENT_TYPE_NODE", static_cast<signed int>(10)},
    {"DOCUMENT_FRAGMENT_NODE", static_cast<signed int>(11)},
    {"NOTATION_NODE", static_cast<signed int>(12)},
    {"DOCUMENT_POSITION_DISCONNECTED", static_cast<signed int>(0x01)},
    {"DOCUMENT_POSITION_PRECEDING", static_cast<signed int>(0x02)},
    {"DOCUMENT_POSITION_FOLLOWING", static_cast<signed int>(0x04)},
    {"DOCUMENT_POSITION_CONTAINS", static_cast<signed int>(0x08)},
    {"DOCUMENT_POSITION_CONTAINED_BY", static_cast<signed int>(0x10)},
    {"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", static_cast<signed int>(0x20)},
};


COMPILE_ASSERT(1 == Node::ELEMENT_NODE, NodeEnumELEMENT_NODEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(2 == Node::ATTRIBUTE_NODE, NodeEnumATTRIBUTE_NODEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(3 == Node::TEXT_NODE, NodeEnumTEXT_NODEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(4 == Node::CDATA_SECTION_NODE, NodeEnumCDATA_SECTION_NODEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(5 == Node::ENTITY_REFERENCE_NODE, NodeEnumENTITY_REFERENCE_NODEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(6 == Node::ENTITY_NODE, NodeEnumENTITY_NODEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(7 == Node::PROCESSING_INSTRUCTION_NODE, NodeEnumPROCESSING_INSTRUCTION_NODEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(8 == Node::COMMENT_NODE, NodeEnumCOMMENT_NODEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(9 == Node::DOCUMENT_NODE, NodeEnumDOCUMENT_NODEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(10 == Node::DOCUMENT_TYPE_NODE, NodeEnumDOCUMENT_TYPE_NODEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(11 == Node::DOCUMENT_FRAGMENT_NODE, NodeEnumDOCUMENT_FRAGMENT_NODEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(12 == Node::NOTATION_NODE, NodeEnumNOTATION_NODEIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x01 == Node::DOCUMENT_POSITION_DISCONNECTED, NodeEnumDOCUMENT_POSITION_DISCONNECTEDIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x02 == Node::DOCUMENT_POSITION_PRECEDING, NodeEnumDOCUMENT_POSITION_PRECEDINGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x04 == Node::DOCUMENT_POSITION_FOLLOWING, NodeEnumDOCUMENT_POSITION_FOLLOWINGIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x08 == Node::DOCUMENT_POSITION_CONTAINS, NodeEnumDOCUMENT_POSITION_CONTAINSIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x10 == Node::DOCUMENT_POSITION_CONTAINED_BY, NodeEnumDOCUMENT_POSITION_CONTAINED_BYIsWrongUseDoNotCheckConstants);
COMPILE_ASSERT(0x20 == Node::DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC, NodeEnumDOCUMENT_POSITION_IMPLEMENTATION_SPECIFICIsWrongUseDoNotCheckConstants);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8NodeTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "Node", v8::Persistent<v8::FunctionTemplate>(), V8Node::internalFieldCount,
        V8NodeAttrs, WTF_ARRAY_LENGTH(V8NodeAttrs),
        V8NodeCallbacks, WTF_ARRAY_LENGTH(V8NodeCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    

    // Custom Signature 'isSameNode'
    const int isSameNodeArgc = 1;
    v8::Handle<v8::FunctionTemplate> isSameNodeArgv[isSameNodeArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> isSameNodeSignature = v8::Signature::New(desc, isSameNodeArgc, isSameNodeArgv);
    proto->Set(v8::String::NewSymbol("isSameNode"), v8::FunctionTemplate::New(NodeV8Internal::isSameNodeCallback, v8Undefined(), isSameNodeSignature));

    // Custom Signature 'isEqualNode'
    const int isEqualNodeArgc = 1;
    v8::Handle<v8::FunctionTemplate> isEqualNodeArgv[isEqualNodeArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> isEqualNodeSignature = v8::Signature::New(desc, isEqualNodeArgc, isEqualNodeArgv);
    proto->Set(v8::String::NewSymbol("isEqualNode"), v8::FunctionTemplate::New(NodeV8Internal::isEqualNodeCallback, v8Undefined(), isEqualNodeSignature));

    // Custom Signature 'compareDocumentPosition'
    const int compareDocumentPositionArgc = 1;
    v8::Handle<v8::FunctionTemplate> compareDocumentPositionArgv[compareDocumentPositionArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> compareDocumentPositionSignature = v8::Signature::New(desc, compareDocumentPositionArgc, compareDocumentPositionArgv);
    proto->Set(v8::String::NewSymbol("compareDocumentPosition"), v8::FunctionTemplate::New(NodeV8Internal::compareDocumentPositionCallback, v8Undefined(), compareDocumentPositionSignature));

    // Custom Signature 'contains'
    const int containsArgc = 1;
    v8::Handle<v8::FunctionTemplate> containsArgv[containsArgc] = { V8Node::GetRawTemplate() };
    v8::Handle<v8::Signature> containsSignature = v8::Signature::New(desc, containsArgc, containsArgv);
    proto->Set(v8::String::NewSymbol("contains"), v8::FunctionTemplate::New(NodeV8Internal::containsCallback, v8Undefined(), containsSignature));

    // Custom Signature 'dispatchEvent'
    const int dispatchEventArgc = 1;
    v8::Handle<v8::FunctionTemplate> dispatchEventArgv[dispatchEventArgc] = { V8Event::GetRawTemplate() };
    v8::Handle<v8::Signature> dispatchEventSignature = v8::Signature::New(desc, dispatchEventArgc, dispatchEventArgv);
    proto->Set(v8::String::NewSymbol("dispatchEvent"), v8::FunctionTemplate::New(NodeV8Internal::dispatchEventCallback, v8Undefined(), dispatchEventSignature));
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8NodeConsts, WTF_ARRAY_LENGTH(V8NodeConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Node::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Node::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8NodeTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Node::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Node::createWrapper(PassRefPtr<Node> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8Node::derefObject(void* object)
{
    static_cast<Node*>(object)->deref();
}

} // namespace WebCore
