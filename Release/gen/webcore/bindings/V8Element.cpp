/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#include "config.h"
#include "V8Element.h"

#include "BindingState.h"
#include "ContextFeatures.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "Frame.h"
#include "HTMLNames.h"
#include "Range.h"
#include "RuntimeEnabledFeatures.h"
#include "StylePropertySet.h"
#include "V8AbstractEventListener.h"
#include "V8Attr.h"
#include "V8Binding.h"
#include "V8CSSStyleDeclaration.h"
#include "V8ClientRect.h"
#include "V8ClientRectList.h"
#include "V8DOMStringMap.h"
#include "V8DOMTokenList.h"
#include "V8DOMWrapper.h"
#include "V8Node.h"
#include "V8NodeList.h"
#include "V8Range.h"
#include "V8ShadowRoot.h"
#include <wtf/GetPtr.h>
#include <wtf/RefCounted.h>
#include <wtf/RefPtr.h>
#include <wtf/UnusedParam.h>

namespace WebCore {

WrapperTypeInfo V8Element::info = { V8Element::GetTemplate, V8Element::derefObject, 0, 0, V8Element::installPerContextPrototypeProperties, &V8Node::info, WrapperTypeObjectPrototype };

namespace ElementV8Internal {

template <typename T> void V8_USE(T) { }

static v8::Handle<v8::Value> tagNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8StringOrNull(imp->tagName(), info.GetIsolate());
}

static v8::Handle<v8::Value> styleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return toV8Fast(imp->style(), info, imp);
}

static v8::Handle<v8::Value> offsetLeftAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8Integer(imp->offsetLeft(), info.GetIsolate());
}

static v8::Handle<v8::Value> offsetTopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8Integer(imp->offsetTop(), info.GetIsolate());
}

static v8::Handle<v8::Value> offsetWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8Integer(imp->offsetWidth(), info.GetIsolate());
}

static v8::Handle<v8::Value> offsetHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8Integer(imp->offsetHeight(), info.GetIsolate());
}

static v8::Handle<v8::Value> offsetParentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return toV8Fast(imp->offsetParent(), info, imp);
}

static v8::Handle<v8::Value> clientLeftAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8Integer(imp->clientLeft(), info.GetIsolate());
}

static v8::Handle<v8::Value> clientTopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8Integer(imp->clientTop(), info.GetIsolate());
}

static v8::Handle<v8::Value> clientWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8Integer(imp->clientWidth(), info.GetIsolate());
}

static v8::Handle<v8::Value> clientHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8Integer(imp->clientHeight(), info.GetIsolate());
}

static v8::Handle<v8::Value> scrollLeftAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8Integer(imp->scrollLeft(), info.GetIsolate());
}

static void scrollLeftAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    int v = toInt32(value);
    imp->setScrollLeft(v);
    return;
}

static v8::Handle<v8::Value> scrollTopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8Integer(imp->scrollTop(), info.GetIsolate());
}

static void scrollTopAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    int v = toInt32(value);
    imp->setScrollTop(v);
    return;
}

static v8::Handle<v8::Value> scrollWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8Integer(imp->scrollWidth(), info.GetIsolate());
}

static v8::Handle<v8::Value> scrollHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8Integer(imp->scrollHeight(), info.GetIsolate());
}

static v8::Handle<v8::Value> classNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::classAttr), info.GetIsolate());
}

static void classNameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::classAttr, stringResource);
}

static v8::Handle<v8::Value> classListAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return toV8Fast(imp->classList(), info, imp);
}

static v8::Handle<v8::Value> datasetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return toV8Fast(imp->dataset(), info, imp);
}

static v8::Handle<v8::Value> firstElementChildAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return toV8Fast(imp->firstElementChild(), info, imp);
}

static v8::Handle<v8::Value> lastElementChildAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return toV8Fast(imp->lastElementChild(), info, imp);
}

static v8::Handle<v8::Value> previousElementSiblingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return toV8Fast(imp->previousElementSibling(), info, imp);
}

static v8::Handle<v8::Value> nextElementSiblingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return toV8Fast(imp->nextElementSibling(), info, imp);
}

static v8::Handle<v8::Value> childElementCountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8UnsignedInteger(imp->childElementCount(), info.GetIsolate());
}

static v8::Handle<v8::Value> webkitPseudoAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->fastGetAttribute(WebCore::HTMLNames::pseudoAttr), info.GetIsolate());
}

static void webkitPseudoAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithNullCheck>, stringResource, value);
    imp->setAttribute(HTMLNames::pseudoAttr, stringResource);
}

static v8::Handle<v8::Value> webkitShadowRootAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return toV8Fast(imp->shadowRoot(), info, imp);
}

#if ENABLE(CSS_REGIONS)

static v8::Handle<v8::Value> webkitRegionOversetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return v8String(imp->webkitRegionOverset(), info.GetIsolate());
}

#endif // ENABLE(CSS_REGIONS)

static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnabort(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onblurAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onblur() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onblur())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onblurAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnblur(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnclick(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncontextmenuAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oncontextmenu() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncontextmenu())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oncontextmenuAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOncontextmenu(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondblclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondblclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondblclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondblclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndblclick(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondrag() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrag())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndrag(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndragend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragenterAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragenter() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragenter())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragenterAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndragenter(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragleaveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragleave() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragleave())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragleaveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndragleave(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndragover(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondragstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondragstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndragstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> ondropAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondrop() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrop())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void ondropAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOndrop(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onfocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onfocus() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onfocus())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onfocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnfocus(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oninputAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oninput() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninput())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oninputAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOninput(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oninvalidAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oninvalid() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninvalid())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oninvalidAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOninvalid(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeydownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onkeydown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeydown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onkeydownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnkeydown(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeypressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onkeypress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeypress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onkeypressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnkeypress(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onkeyupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onkeyup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeyup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onkeyupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnkeyup(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnload(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousedownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmousedown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousedown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmousedownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnmousedown(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousemoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmousemove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousemove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmousemoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnmousemove(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseoutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmouseout() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseout())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmouseoutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnmouseout(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmouseover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmouseoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnmouseover(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmouseupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmouseup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmouseupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnmouseup(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onmousewheelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmousewheel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousewheel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onmousewheelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnmousewheel(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onscrollAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onscroll() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onscroll())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onscrollAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnscroll(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onselectAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onselect() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselect())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onselectAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnselect(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onsubmitAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onsubmit() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsubmit())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onsubmitAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnsubmit(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforecutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onbeforecut() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforecut())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onbeforecutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnbeforecut(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oncut() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncut())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oncutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOncut(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforecopyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onbeforecopy() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforecopy())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onbeforecopyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnbeforecopy(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> oncopyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oncopy() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncopy())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void oncopyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOncopy(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onbeforepasteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onbeforepaste() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforepaste())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onbeforepasteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnbeforepaste(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onpasteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onpaste() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpaste())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onpasteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnpaste(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onresetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onreset() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onreset())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onresetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnreset(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onsearchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onsearch() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsearch())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onsearchAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnsearch(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

static v8::Handle<v8::Value> onselectstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onselectstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselectstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

static void onselectstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnselectstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ontouchstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOntouchstart(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchmoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ontouchmove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchmove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchmoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOntouchmove(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ontouchend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOntouchend(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static v8::Handle<v8::Value> ontouchcancelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ontouchcancel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchcancel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)

static void ontouchcancelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOntouchcancel(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(FULLSCREEN_API)

static v8::Handle<v8::Value> onwebkitfullscreenchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onwebkitfullscreenchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitfullscreenchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(FULLSCREEN_API)

#if ENABLE(FULLSCREEN_API)

static void onwebkitfullscreenchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnwebkitfullscreenchange(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(FULLSCREEN_API)

#if ENABLE(FULLSCREEN_API)

static v8::Handle<v8::Value> onwebkitfullscreenerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onwebkitfullscreenerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitfullscreenerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8Null(info.GetIsolate()));
}

#endif // ENABLE(FULLSCREEN_API)

#if ENABLE(FULLSCREEN_API)

static void onwebkitfullscreenerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    Element* imp = V8Element::toNative(info.Holder());
    imp->setOnwebkitfullscreenerror(V8DOMWrapper::getEventListener(value, true, ListenerFindOrCreate));
    return;
}

#endif // ENABLE(FULLSCREEN_API)

static v8::Handle<v8::Value> getAttributeCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8StringOrNull(imp->getAttribute(name), args.GetIsolate());
}

static v8::Handle<v8::Value> setAttributeCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, value, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    imp->setAttribute(name, value, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> removeAttributeCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    imp->removeAttribute(name);
    return v8Undefined();
}

static v8::Handle<v8::Value> getAttributeNodeCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8Fast(imp->getAttributeNode(name), args, imp);
}

static v8::Handle<v8::Value> setAttributeNodeCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Attr* newAttr = V8Attr::HasInstance(args[0]) ? V8Attr::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    if (UNLIKELY(!newAttr)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    RefPtr<Attr> result = imp->setAttributeNode(newAttr, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> removeAttributeNodeCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Attr* oldAttr = V8Attr::HasInstance(args[0]) ? V8Attr::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    if (UNLIKELY(!oldAttr)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    RefPtr<Attr> result = imp->removeAttributeNode(oldAttr, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getElementsByTagNameCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8Fast(imp->getElementsByTagName(name), args, imp);
}

static v8::Handle<v8::Value> getAttributeNSCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, localName, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    return v8String(imp->getAttributeNS(namespaceURI, localName), args.GetIsolate());
}

static v8::Handle<v8::Value> setAttributeNSCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, qualifiedName, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, value, MAYBE_MISSING_PARAMETER(args, 2, DefaultIsUndefined));
    imp->setAttributeNS(namespaceURI, qualifiedName, value, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> removeAttributeNSCallback(const v8::Arguments& args)
{
    if (args.Length() < 2)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Element* imp = V8Element::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, localName, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    imp->removeAttributeNS(namespaceURI, localName);
    return v8Undefined();
}

static v8::Handle<v8::Value> getElementsByTagNameNSCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, localName, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    return toV8Fast(imp->getElementsByTagNameNS(namespaceURI, localName), args, imp);
}

static v8::Handle<v8::Value> getAttributeNodeNSCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, localName, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    return toV8Fast(imp->getAttributeNodeNS(namespaceURI, localName), args, imp);
}

static v8::Handle<v8::Value> setAttributeNodeNSCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Attr* newAttr = V8Attr::HasInstance(args[0]) ? V8Attr::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    if (UNLIKELY(!newAttr)) {
        ec = TYPE_MISMATCH_ERR;
        goto fail;
    }
    RefPtr<Attr> result = imp->setAttributeNodeNS(newAttr, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> hasAttributeCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Element* imp = V8Element::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return v8Boolean(imp->hasAttribute(name), args.GetIsolate());
}

static v8::Handle<v8::Value> hasAttributeNSCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<WithNullCheck>, namespaceURI, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, localName, MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined));
    return v8Boolean(imp->hasAttributeNS(namespaceURI, localName), args.GetIsolate());
}

static v8::Handle<v8::Value> focusCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    imp->focus();
    return v8Undefined();
}

static v8::Handle<v8::Value> blurCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    imp->blur();
    return v8Undefined();
}

static v8::Handle<v8::Value> scrollIntoViewCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    if (args.Length() <= 0) {
        imp->scrollIntoView();
        return v8Undefined();
    }
    V8TRYCATCH(bool, alignWithTop, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->scrollIntoView(alignWithTop);
    return v8Undefined();
}

static v8::Handle<v8::Value> scrollIntoViewIfNeededCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    if (args.Length() <= 0) {
        imp->scrollIntoViewIfNeeded();
        return v8Undefined();
    }
    V8TRYCATCH(bool, centerIfNeeded, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)->BooleanValue());
    imp->scrollIntoViewIfNeeded(centerIfNeeded);
    return v8Undefined();
}

static v8::Handle<v8::Value> scrollByLinesCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    V8TRYCATCH(int, lines, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->scrollByLines(lines);
    return v8Undefined();
}

static v8::Handle<v8::Value> scrollByPagesCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    V8TRYCATCH(int, pages, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->scrollByPages(pages);
    return v8Undefined();
}

static v8::Handle<v8::Value> getElementsByClassNameCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, name, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    return toV8Fast(imp->getElementsByClassName(name), args, imp);
}

static v8::Handle<v8::Value> querySelectorCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, selectors, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    RefPtr<Element> result = imp->querySelector(selectors, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> querySelectorAllCallback(const v8::Arguments& args)
{
    if (args.Length() < 1)
        return throwNotEnoughArgumentsError(args.GetIsolate());
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, selectors, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    RefPtr<NodeList> result = imp->querySelectorAll(selectors, ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> webkitMatchesSelectorCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8TRYCATCH_FOR_V8STRINGRESOURCE(V8StringResource<>, selectors, MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined));
    bool result = imp->webkitMatchesSelector(selectors, ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Boolean(result, args.GetIsolate());
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> webkitCreateShadowRootCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    RefPtr<ShadowRoot> result = imp->createShadowRoot(ec);
    if (UNLIKELY(ec))
        goto fail;
    return toV8Fast(result.release(), args, imp);
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> removeCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->remove(ec);
    if (UNLIKELY(ec))
        goto fail;
    return v8Undefined();
    }
    fail:
    return setDOMException(ec, args.GetIsolate());
}

static v8::Handle<v8::Value> getClientRectsCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    return toV8Fast(imp->getClientRects(), args, imp);
}

static v8::Handle<v8::Value> getBoundingClientRectCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    return toV8Fast(imp->getBoundingClientRect(), args, imp);
}

static v8::Handle<v8::Value> webkitRequestFullScreenCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    V8TRYCATCH(int, flags, toUInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
    imp->webkitRequestFullScreen(flags);
    return v8Undefined();
}

static v8::Handle<v8::Value> webkitRequestFullscreenCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    imp->webkitRequestFullscreen();
    return v8Undefined();
}

#if ENABLE(POINTER_LOCK)

static v8::Handle<v8::Value> webkitRequestPointerLockCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    imp->webkitRequestPointerLock();
    return v8Undefined();
}

#endif // ENABLE(POINTER_LOCK)

#if ENABLE(CSS_REGIONS)

static v8::Handle<v8::Value> webkitGetRegionFlowRangesCallback(const v8::Arguments& args)
{
    Element* imp = V8Element::toNative(args.Holder());
    return v8Array(imp->webkitGetRegionFlowRanges(), args.GetIsolate());
}

#endif // ENABLE(CSS_REGIONS)

} // namespace ElementV8Internal

static const V8DOMConfiguration::BatchedAttribute V8ElementAttrs[] = {
    // Attribute 'tagName' (Type: 'readonly attribute' ExtAttr: 'TreatReturnedNullStringAs')
    {"tagName", ElementV8Internal::tagNameAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'style' (Type: 'readonly attribute' ExtAttr: '')
    {"style", ElementV8Internal::styleAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'offsetLeft' (Type: 'readonly attribute' ExtAttr: '')
    {"offsetLeft", ElementV8Internal::offsetLeftAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'offsetTop' (Type: 'readonly attribute' ExtAttr: '')
    {"offsetTop", ElementV8Internal::offsetTopAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'offsetWidth' (Type: 'readonly attribute' ExtAttr: '')
    {"offsetWidth", ElementV8Internal::offsetWidthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'offsetHeight' (Type: 'readonly attribute' ExtAttr: '')
    {"offsetHeight", ElementV8Internal::offsetHeightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'offsetParent' (Type: 'readonly attribute' ExtAttr: '')
    {"offsetParent", ElementV8Internal::offsetParentAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'clientLeft' (Type: 'readonly attribute' ExtAttr: '')
    {"clientLeft", ElementV8Internal::clientLeftAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'clientTop' (Type: 'readonly attribute' ExtAttr: '')
    {"clientTop", ElementV8Internal::clientTopAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'clientWidth' (Type: 'readonly attribute' ExtAttr: '')
    {"clientWidth", ElementV8Internal::clientWidthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'clientHeight' (Type: 'readonly attribute' ExtAttr: '')
    {"clientHeight", ElementV8Internal::clientHeightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'scrollLeft' (Type: 'attribute' ExtAttr: '')
    {"scrollLeft", ElementV8Internal::scrollLeftAttrGetter, ElementV8Internal::scrollLeftAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'scrollTop' (Type: 'attribute' ExtAttr: '')
    {"scrollTop", ElementV8Internal::scrollTopAttrGetter, ElementV8Internal::scrollTopAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'scrollWidth' (Type: 'readonly attribute' ExtAttr: '')
    {"scrollWidth", ElementV8Internal::scrollWidthAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'scrollHeight' (Type: 'readonly attribute' ExtAttr: '')
    {"scrollHeight", ElementV8Internal::scrollHeightAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'className' (Type: 'attribute' ExtAttr: 'Reflect')
    {"className", ElementV8Internal::classNameAttrGetter, ElementV8Internal::classNameAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'classList' (Type: 'readonly attribute' ExtAttr: '')
    {"classList", ElementV8Internal::classListAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'dataset' (Type: 'readonly attribute' ExtAttr: '')
    {"dataset", ElementV8Internal::datasetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'firstElementChild' (Type: 'readonly attribute' ExtAttr: '')
    {"firstElementChild", ElementV8Internal::firstElementChildAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'lastElementChild' (Type: 'readonly attribute' ExtAttr: '')
    {"lastElementChild", ElementV8Internal::lastElementChildAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'previousElementSibling' (Type: 'readonly attribute' ExtAttr: '')
    {"previousElementSibling", ElementV8Internal::previousElementSiblingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'nextElementSibling' (Type: 'readonly attribute' ExtAttr: '')
    {"nextElementSibling", ElementV8Internal::nextElementSiblingAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'childElementCount' (Type: 'readonly attribute' ExtAttr: '')
    {"childElementCount", ElementV8Internal::childElementCountAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */},
    // Attribute 'onabort' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onabort", ElementV8Internal::onabortAttrGetter, ElementV8Internal::onabortAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onblur' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onblur", ElementV8Internal::onblurAttrGetter, ElementV8Internal::onblurAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onchange' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onchange", ElementV8Internal::onchangeAttrGetter, ElementV8Internal::onchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onclick' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onclick", ElementV8Internal::onclickAttrGetter, ElementV8Internal::onclickAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncontextmenu' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"oncontextmenu", ElementV8Internal::oncontextmenuAttrGetter, ElementV8Internal::oncontextmenuAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondblclick' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondblclick", ElementV8Internal::ondblclickAttrGetter, ElementV8Internal::ondblclickAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondrag' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondrag", ElementV8Internal::ondragAttrGetter, ElementV8Internal::ondragAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragend' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragend", ElementV8Internal::ondragendAttrGetter, ElementV8Internal::ondragendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragenter' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragenter", ElementV8Internal::ondragenterAttrGetter, ElementV8Internal::ondragenterAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragleave' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragleave", ElementV8Internal::ondragleaveAttrGetter, ElementV8Internal::ondragleaveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragover' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragover", ElementV8Internal::ondragoverAttrGetter, ElementV8Internal::ondragoverAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondragstart' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondragstart", ElementV8Internal::ondragstartAttrGetter, ElementV8Internal::ondragstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'ondrop' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"ondrop", ElementV8Internal::ondropAttrGetter, ElementV8Internal::ondropAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onerror' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onerror", ElementV8Internal::onerrorAttrGetter, ElementV8Internal::onerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onfocus' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onfocus", ElementV8Internal::onfocusAttrGetter, ElementV8Internal::onfocusAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oninput' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"oninput", ElementV8Internal::oninputAttrGetter, ElementV8Internal::oninputAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oninvalid' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"oninvalid", ElementV8Internal::oninvalidAttrGetter, ElementV8Internal::oninvalidAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeydown' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onkeydown", ElementV8Internal::onkeydownAttrGetter, ElementV8Internal::onkeydownAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeypress' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onkeypress", ElementV8Internal::onkeypressAttrGetter, ElementV8Internal::onkeypressAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onkeyup' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onkeyup", ElementV8Internal::onkeyupAttrGetter, ElementV8Internal::onkeyupAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onload' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onload", ElementV8Internal::onloadAttrGetter, ElementV8Internal::onloadAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousedown' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmousedown", ElementV8Internal::onmousedownAttrGetter, ElementV8Internal::onmousedownAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousemove' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmousemove", ElementV8Internal::onmousemoveAttrGetter, ElementV8Internal::onmousemoveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseout' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmouseout", ElementV8Internal::onmouseoutAttrGetter, ElementV8Internal::onmouseoutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseover' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmouseover", ElementV8Internal::onmouseoverAttrGetter, ElementV8Internal::onmouseoverAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmouseup' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmouseup", ElementV8Internal::onmouseupAttrGetter, ElementV8Internal::onmouseupAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onmousewheel' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onmousewheel", ElementV8Internal::onmousewheelAttrGetter, ElementV8Internal::onmousewheelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onscroll' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onscroll", ElementV8Internal::onscrollAttrGetter, ElementV8Internal::onscrollAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onselect' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onselect", ElementV8Internal::onselectAttrGetter, ElementV8Internal::onselectAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onsubmit' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onsubmit", ElementV8Internal::onsubmitAttrGetter, ElementV8Internal::onsubmitAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforecut' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onbeforecut", ElementV8Internal::onbeforecutAttrGetter, ElementV8Internal::onbeforecutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncut' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"oncut", ElementV8Internal::oncutAttrGetter, ElementV8Internal::oncutAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforecopy' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onbeforecopy", ElementV8Internal::onbeforecopyAttrGetter, ElementV8Internal::onbeforecopyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'oncopy' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"oncopy", ElementV8Internal::oncopyAttrGetter, ElementV8Internal::oncopyAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onbeforepaste' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onbeforepaste", ElementV8Internal::onbeforepasteAttrGetter, ElementV8Internal::onbeforepasteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onpaste' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onpaste", ElementV8Internal::onpasteAttrGetter, ElementV8Internal::onpasteAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onreset' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onreset", ElementV8Internal::onresetAttrGetter, ElementV8Internal::onresetAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onsearch' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onsearch", ElementV8Internal::onsearchAttrGetter, ElementV8Internal::onsearchAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
    // Attribute 'onselectstart' (Type: 'attribute' ExtAttr: 'NotEnumerable')
    {"onselectstart", ElementV8Internal::onselectstartAttrGetter, ElementV8Internal::onselectstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#if ENABLE(FULLSCREEN_API)
    // Attribute 'onwebkitfullscreenchange' (Type: 'attribute' ExtAttr: 'NotEnumerable Conditional')
    {"onwebkitfullscreenchange", ElementV8Internal::onwebkitfullscreenchangeAttrGetter, ElementV8Internal::onwebkitfullscreenchangeAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(FULLSCREEN_API)
#if ENABLE(FULLSCREEN_API)
    // Attribute 'onwebkitfullscreenerror' (Type: 'attribute' ExtAttr: 'NotEnumerable Conditional')
    {"onwebkitfullscreenerror", ElementV8Internal::onwebkitfullscreenerrorAttrGetter, ElementV8Internal::onwebkitfullscreenerrorAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */},
#endif // ENABLE(FULLSCREEN_API)
};

static const V8DOMConfiguration::BatchedCallback V8ElementCallbacks[] = {
    {"getAttribute", ElementV8Internal::getAttributeCallback},
    {"setAttribute", ElementV8Internal::setAttributeCallback},
    {"removeAttribute", ElementV8Internal::removeAttributeCallback},
    {"getAttributeNode", ElementV8Internal::getAttributeNodeCallback},
    {"getElementsByTagName", ElementV8Internal::getElementsByTagNameCallback},
    {"getAttributeNS", ElementV8Internal::getAttributeNSCallback},
    {"setAttributeNS", ElementV8Internal::setAttributeNSCallback},
    {"removeAttributeNS", ElementV8Internal::removeAttributeNSCallback},
    {"getElementsByTagNameNS", ElementV8Internal::getElementsByTagNameNSCallback},
    {"getAttributeNodeNS", ElementV8Internal::getAttributeNodeNSCallback},
    {"hasAttribute", ElementV8Internal::hasAttributeCallback},
    {"hasAttributeNS", ElementV8Internal::hasAttributeNSCallback},
    {"focus", ElementV8Internal::focusCallback},
    {"blur", ElementV8Internal::blurCallback},
    {"scrollIntoView", ElementV8Internal::scrollIntoViewCallback},
    {"scrollIntoViewIfNeeded", ElementV8Internal::scrollIntoViewIfNeededCallback},
    {"scrollByLines", ElementV8Internal::scrollByLinesCallback},
    {"scrollByPages", ElementV8Internal::scrollByPagesCallback},
    {"getElementsByClassName", ElementV8Internal::getElementsByClassNameCallback},
    {"querySelector", ElementV8Internal::querySelectorCallback},
    {"querySelectorAll", ElementV8Internal::querySelectorAllCallback},
    {"webkitMatchesSelector", ElementV8Internal::webkitMatchesSelectorCallback},
    {"remove", ElementV8Internal::removeCallback},
    {"getClientRects", ElementV8Internal::getClientRectsCallback},
    {"getBoundingClientRect", ElementV8Internal::getBoundingClientRectCallback},
#if ENABLE(POINTER_LOCK)
    {"webkitRequestPointerLock", ElementV8Internal::webkitRequestPointerLockCallback},
#endif
};

static const V8DOMConfiguration::BatchedConstant V8ElementConsts[] = {
    {"ALLOW_KEYBOARD_INPUT", static_cast<signed int>(1)},
};


COMPILE_ASSERT(1 == Element::ALLOW_KEYBOARD_INPUT, ElementEnumALLOW_KEYBOARD_INPUTIsWrongUseDoNotCheckConstants);

static v8::Persistent<v8::FunctionTemplate> ConfigureV8ElementTemplate(v8::Persistent<v8::FunctionTemplate> desc)
{
    desc->ReadOnlyPrototype();

    v8::Local<v8::Signature> defaultSignature;
    defaultSignature = V8DOMConfiguration::configureTemplate(desc, "Element", V8Node::GetTemplate(), V8Element::internalFieldCount,
        V8ElementAttrs, WTF_ARRAY_LENGTH(V8ElementAttrs),
        V8ElementCallbacks, WTF_ARRAY_LENGTH(V8ElementCallbacks));
    UNUSED_PARAM(defaultSignature); // In some cases, it will not be used.
    v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
    v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
    UNUSED_PARAM(instance); // In some cases, it will not be used.
    UNUSED_PARAM(proto); // In some cases, it will not be used.
    
    if (RuntimeEnabledFeatures::shadowDOMEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'webkitPseudo' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime ImplementedAs Reflect')
        {"webkitPseudo", ElementV8Internal::webkitPseudoAttrGetter, ElementV8Internal::webkitPseudoAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::shadowDOMEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'webkitShadowRoot' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime ImplementedAs')
        {"webkitShadowRoot", ElementV8Internal::webkitShadowRootAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#if ENABLE(CSS_REGIONS)
    if (RuntimeEnabledFeatures::cssRegionsEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'webkitRegionOverset' (Type: 'readonly attribute' ExtAttr: 'V8EnabledAtRuntime Conditional')
        {"webkitRegionOverset", ElementV8Internal::webkitRegionOversetAttrGetter, 0, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(CSS_REGIONS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::touchEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'ontouchstart' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime NotEnumerable Conditional')
        {"ontouchstart", ElementV8Internal::ontouchstartAttrGetter, ElementV8Internal::ontouchstartAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::touchEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'ontouchmove' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime NotEnumerable Conditional')
        {"ontouchmove", ElementV8Internal::ontouchmoveAttrGetter, ElementV8Internal::ontouchmoveAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::touchEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'ontouchend' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime NotEnumerable Conditional')
        {"ontouchend", ElementV8Internal::ontouchendAttrGetter, ElementV8Internal::ontouchendAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

#if ENABLE(TOUCH_EVENTS)
    if (RuntimeEnabledFeatures::touchEnabled()) {
        static const V8DOMConfiguration::BatchedAttribute attrData =\
        // Attribute 'ontouchcancel' (Type: 'attribute' ExtAttr: 'V8EnabledAtRuntime NotEnumerable Conditional')
        {"ontouchcancel", ElementV8Internal::ontouchcancelAttrGetter, ElementV8Internal::ontouchcancelAttrSetter, 0 /* no data */, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None | v8::DontEnum), 0 /* on instance */};
        V8DOMConfiguration::configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(TOUCH_EVENTS)

    // Custom Signature 'setAttributeNode'
    const int setAttributeNodeArgc = 1;
    v8::Handle<v8::FunctionTemplate> setAttributeNodeArgv[setAttributeNodeArgc] = { V8Attr::GetRawTemplate() };
    v8::Handle<v8::Signature> setAttributeNodeSignature = v8::Signature::New(desc, setAttributeNodeArgc, setAttributeNodeArgv);
    proto->Set(v8::String::NewSymbol("setAttributeNode"), v8::FunctionTemplate::New(ElementV8Internal::setAttributeNodeCallback, v8Undefined(), setAttributeNodeSignature));

    // Custom Signature 'removeAttributeNode'
    const int removeAttributeNodeArgc = 1;
    v8::Handle<v8::FunctionTemplate> removeAttributeNodeArgv[removeAttributeNodeArgc] = { V8Attr::GetRawTemplate() };
    v8::Handle<v8::Signature> removeAttributeNodeSignature = v8::Signature::New(desc, removeAttributeNodeArgc, removeAttributeNodeArgv);
    proto->Set(v8::String::NewSymbol("removeAttributeNode"), v8::FunctionTemplate::New(ElementV8Internal::removeAttributeNodeCallback, v8Undefined(), removeAttributeNodeSignature));

    // Custom Signature 'setAttributeNodeNS'
    const int setAttributeNodeNSArgc = 1;
    v8::Handle<v8::FunctionTemplate> setAttributeNodeNSArgv[setAttributeNodeNSArgc] = { V8Attr::GetRawTemplate() };
    v8::Handle<v8::Signature> setAttributeNodeNSSignature = v8::Signature::New(desc, setAttributeNodeNSArgc, setAttributeNodeNSArgv);
    proto->Set(v8::String::NewSymbol("setAttributeNodeNS"), v8::FunctionTemplate::New(ElementV8Internal::setAttributeNodeNSCallback, v8Undefined(), setAttributeNodeNSSignature));
    if (RuntimeEnabledFeatures::shadowDOMEnabled())
        proto->Set(v8::String::NewSymbol("webkitCreateShadowRoot"), v8::FunctionTemplate::New(ElementV8Internal::webkitCreateShadowRootCallback, v8Undefined(), defaultSignature));
    if (RuntimeEnabledFeatures::webkitRequestFullScreenEnabled())
        proto->Set(v8::String::NewSymbol("webkitRequestFullScreen"), v8::FunctionTemplate::New(ElementV8Internal::webkitRequestFullScreenCallback, v8Undefined(), defaultSignature));
    if (RuntimeEnabledFeatures::webkitRequestFullscreenEnabled())
        proto->Set(v8::String::NewSymbol("webkitRequestFullscreen"), v8::FunctionTemplate::New(ElementV8Internal::webkitRequestFullscreenCallback, v8Undefined(), defaultSignature));
#if ENABLE(CSS_REGIONS)
    if (RuntimeEnabledFeatures::cssRegionsEnabled())
        proto->Set(v8::String::NewSymbol("webkitGetRegionFlowRanges"), v8::FunctionTemplate::New(ElementV8Internal::webkitGetRegionFlowRangesCallback, v8Undefined(), defaultSignature));
#endif // ENABLE(CSS_REGIONS)
    V8DOMConfiguration::batchConfigureConstants(desc, proto, V8ElementConsts, WTF_ARRAY_LENGTH(V8ElementConsts));

    // Custom toString template
    desc->Set(v8::String::NewSymbol("toString"), V8PerIsolateData::current()->toStringTemplate());
    return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Element::GetRawTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->rawTemplateMap().find(&info);
    if (result != data->rawTemplateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ = createRawTemplate();
    data->rawTemplateMap().add(&info, templ);
    return templ;
}

v8::Persistent<v8::FunctionTemplate> V8Element::GetTemplate()
{
    V8PerIsolateData* data = V8PerIsolateData::current();
    V8PerIsolateData::TemplateMap::iterator result = data->templateMap().find(&info);
    if (result != data->templateMap().end())
        return result->value;

    v8::HandleScope handleScope;
    v8::Persistent<v8::FunctionTemplate> templ =
        ConfigureV8ElementTemplate(GetRawTemplate());
    data->templateMap().add(&info, templ);
    return templ;
}

bool V8Element::HasInstance(v8::Handle<v8::Value> value)
{
    return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Element::createWrapper(PassRefPtr<Element> impl, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT(impl.get());
    ASSERT(DOMDataStore::getWrapper(impl.get(), isolate).IsEmpty());
    ASSERT(static_cast<void*>(static_cast<Node*>(impl.get())) == static_cast<void*>(impl.get()));

    v8::Handle<v8::Object> wrapper = V8DOMWrapper::createWrapper(creationContext, &info, impl.get());
    if (UNLIKELY(wrapper.IsEmpty()))
        return wrapper;

    installPerContextProperties(wrapper, impl.get());
    v8::Persistent<v8::Object> wrapperHandle = V8DOMWrapper::associateObjectWithWrapper(impl, &info, wrapper, isolate);
    if (!hasDependentLifetime)
        wrapperHandle.MarkIndependent();
    return wrapper;
}

void V8Element::derefObject(void* object)
{
    static_cast<Element*>(object)->deref();
}

} // namespace WebCore
