// Copyright (c) 2011 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is automatically generated.

#include <string>
#include "gpu/command_buffer/common/gles2_cmd_utils.h"
#include "ui/gl/gl_bindings.h"
#include "ui/gl/gl_context.h"
#include "ui/gl/gl_implementation.h"
#include "ui/gl/gl_osmesa_api_implementation.h"

using gpu::gles2::GLES2Util;

namespace gfx {

static bool g_debugBindingsInitialized;
DriverOSMESA g_driver_osmesa;


void DriverOSMESA::InitializeBindings() {
  fn.OSMesaCreateContextFn = reinterpret_cast<OSMesaCreateContextProc>(GetGLCoreProcAddress("OSMesaCreateContext"));
  fn.OSMesaCreateContextExtFn = reinterpret_cast<OSMesaCreateContextExtProc>(GetGLCoreProcAddress("OSMesaCreateContextExt"));
  fn.OSMesaDestroyContextFn = reinterpret_cast<OSMesaDestroyContextProc>(GetGLCoreProcAddress("OSMesaDestroyContext"));
  fn.OSMesaMakeCurrentFn = reinterpret_cast<OSMesaMakeCurrentProc>(GetGLCoreProcAddress("OSMesaMakeCurrent"));
  fn.OSMesaGetCurrentContextFn = reinterpret_cast<OSMesaGetCurrentContextProc>(GetGLCoreProcAddress("OSMesaGetCurrentContext"));
  fn.OSMesaPixelStoreFn = reinterpret_cast<OSMesaPixelStoreProc>(GetGLCoreProcAddress("OSMesaPixelStore"));
  fn.OSMesaGetIntegervFn = reinterpret_cast<OSMesaGetIntegervProc>(GetGLCoreProcAddress("OSMesaGetIntegerv"));
  fn.OSMesaGetDepthBufferFn = reinterpret_cast<OSMesaGetDepthBufferProc>(GetGLCoreProcAddress("OSMesaGetDepthBuffer"));
  fn.OSMesaGetColorBufferFn = reinterpret_cast<OSMesaGetColorBufferProc>(GetGLCoreProcAddress("OSMesaGetColorBuffer"));
  fn.OSMesaGetProcAddressFn = reinterpret_cast<OSMesaGetProcAddressProc>(GetGLCoreProcAddress("OSMesaGetProcAddress"));
  fn.OSMesaColorClampFn = reinterpret_cast<OSMesaColorClampProc>(GetGLCoreProcAddress("OSMesaColorClamp"));
}

void DriverOSMESA::InitializeExtensionBindings(
    GLContext* context) {
  DCHECK(context && context->IsCurrent(NULL));
  if (g_debugBindingsInitialized)
    UpdateDebugExtensionBindings();
}

extern "C" {

static OSMesaContext GL_BINDING_CALL Debug_OSMesaCreateContext(GLenum format, OSMesaContext sharelist) {
  GL_SERVICE_LOG("OSMesaCreateContext" << "("  << GLES2Util::GetStringEnum(format) << ", " << sharelist << ")");
  OSMesaContext result = g_driver_osmesa.debug_fn.OSMesaCreateContextFn(format, sharelist);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static OSMesaContext GL_BINDING_CALL Debug_OSMesaCreateContextExt(GLenum format, GLint depthBits, GLint stencilBits, GLint accumBits, OSMesaContext sharelist) {
  GL_SERVICE_LOG("OSMesaCreateContextExt" << "("  << GLES2Util::GetStringEnum(format) << ", " << depthBits << ", " << stencilBits << ", " << accumBits << ", " << sharelist << ")");
  OSMesaContext result = g_driver_osmesa.debug_fn.OSMesaCreateContextExtFn(format, depthBits, stencilBits, accumBits, sharelist);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_OSMesaDestroyContext(OSMesaContext ctx) {
  GL_SERVICE_LOG("OSMesaDestroyContext" << "("  << ctx << ")");
  g_driver_osmesa.debug_fn.OSMesaDestroyContextFn(ctx);
}

static GLboolean GL_BINDING_CALL Debug_OSMesaMakeCurrent(OSMesaContext ctx, void* buffer, GLenum type, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("OSMesaMakeCurrent" << "("  << ctx << ", " << static_cast<const void*>(buffer) << ", " << GLES2Util::GetStringEnum(type) << ", " << width << ", " << height << ")");
  GLboolean result = g_driver_osmesa.debug_fn.OSMesaMakeCurrentFn(ctx, buffer, type, width, height);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static OSMesaContext GL_BINDING_CALL Debug_OSMesaGetCurrentContext(void) {
  GL_SERVICE_LOG("OSMesaGetCurrentContext" << "("  << ")");
  OSMesaContext result = g_driver_osmesa.debug_fn.OSMesaGetCurrentContextFn();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_OSMesaPixelStore(GLint pname, GLint value) {
  GL_SERVICE_LOG("OSMesaPixelStore" << "("  << pname << ", " << value << ")");
  g_driver_osmesa.debug_fn.OSMesaPixelStoreFn(pname, value);
}

static void GL_BINDING_CALL Debug_OSMesaGetIntegerv(GLint pname, GLint* value) {
  GL_SERVICE_LOG("OSMesaGetIntegerv" << "("  << pname << ", " << static_cast<const void*>(value) << ")");
  g_driver_osmesa.debug_fn.OSMesaGetIntegervFn(pname, value);
}

static GLboolean GL_BINDING_CALL Debug_OSMesaGetDepthBuffer(OSMesaContext c, GLint* width, GLint* height, GLint* bytesPerValue, void** buffer) {
  GL_SERVICE_LOG("OSMesaGetDepthBuffer" << "("  << c << ", " << static_cast<const void*>(width) << ", " << static_cast<const void*>(height) << ", " << static_cast<const void*>(bytesPerValue) << ", " << buffer << ")");
  GLboolean result = g_driver_osmesa.debug_fn.OSMesaGetDepthBufferFn(c, width, height, bytesPerValue, buffer);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_OSMesaGetColorBuffer(OSMesaContext c, GLint* width, GLint* height, GLint* format, void** buffer) {
  GL_SERVICE_LOG("OSMesaGetColorBuffer" << "("  << c << ", " << static_cast<const void*>(width) << ", " << static_cast<const void*>(height) << ", " << static_cast<const void*>(format) << ", " << buffer << ")");
  GLboolean result = g_driver_osmesa.debug_fn.OSMesaGetColorBufferFn(c, width, height, format, buffer);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static OSMESAproc GL_BINDING_CALL Debug_OSMesaGetProcAddress(const char* funcName) {
  GL_SERVICE_LOG("OSMesaGetProcAddress" << "("  << funcName << ")");
  OSMESAproc result = g_driver_osmesa.debug_fn.OSMesaGetProcAddressFn(funcName);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_OSMesaColorClamp(GLboolean enable) {
  GL_SERVICE_LOG("OSMesaColorClamp" << "("  << GLES2Util::GetStringBool(enable) << ")");
  g_driver_osmesa.debug_fn.OSMesaColorClampFn(enable);
}
}  // extern "C"

void DriverOSMESA::InitializeDebugBindings() {
  if (!debug_fn.OSMesaCreateContextFn) {
    debug_fn.OSMesaCreateContextFn = fn.OSMesaCreateContextFn;
    fn.OSMesaCreateContextFn = Debug_OSMesaCreateContext;
  }
  if (!debug_fn.OSMesaCreateContextExtFn) {
    debug_fn.OSMesaCreateContextExtFn = fn.OSMesaCreateContextExtFn;
    fn.OSMesaCreateContextExtFn = Debug_OSMesaCreateContextExt;
  }
  if (!debug_fn.OSMesaDestroyContextFn) {
    debug_fn.OSMesaDestroyContextFn = fn.OSMesaDestroyContextFn;
    fn.OSMesaDestroyContextFn = Debug_OSMesaDestroyContext;
  }
  if (!debug_fn.OSMesaMakeCurrentFn) {
    debug_fn.OSMesaMakeCurrentFn = fn.OSMesaMakeCurrentFn;
    fn.OSMesaMakeCurrentFn = Debug_OSMesaMakeCurrent;
  }
  if (!debug_fn.OSMesaGetCurrentContextFn) {
    debug_fn.OSMesaGetCurrentContextFn = fn.OSMesaGetCurrentContextFn;
    fn.OSMesaGetCurrentContextFn = Debug_OSMesaGetCurrentContext;
  }
  if (!debug_fn.OSMesaPixelStoreFn) {
    debug_fn.OSMesaPixelStoreFn = fn.OSMesaPixelStoreFn;
    fn.OSMesaPixelStoreFn = Debug_OSMesaPixelStore;
  }
  if (!debug_fn.OSMesaGetIntegervFn) {
    debug_fn.OSMesaGetIntegervFn = fn.OSMesaGetIntegervFn;
    fn.OSMesaGetIntegervFn = Debug_OSMesaGetIntegerv;
  }
  if (!debug_fn.OSMesaGetDepthBufferFn) {
    debug_fn.OSMesaGetDepthBufferFn = fn.OSMesaGetDepthBufferFn;
    fn.OSMesaGetDepthBufferFn = Debug_OSMesaGetDepthBuffer;
  }
  if (!debug_fn.OSMesaGetColorBufferFn) {
    debug_fn.OSMesaGetColorBufferFn = fn.OSMesaGetColorBufferFn;
    fn.OSMesaGetColorBufferFn = Debug_OSMesaGetColorBuffer;
  }
  if (!debug_fn.OSMesaGetProcAddressFn) {
    debug_fn.OSMesaGetProcAddressFn = fn.OSMesaGetProcAddressFn;
    fn.OSMesaGetProcAddressFn = Debug_OSMesaGetProcAddress;
  }
  if (!debug_fn.OSMesaColorClampFn) {
    debug_fn.OSMesaColorClampFn = fn.OSMesaColorClampFn;
    fn.OSMesaColorClampFn = Debug_OSMesaColorClamp;
  }
  g_debugBindingsInitialized = true;
}

void DriverOSMESA::UpdateDebugExtensionBindings() {
}

void DriverOSMESA::ClearBindings() {
  memset(this, 0, sizeof(*this));
}

OSMesaContext OSMESAApiBase::OSMesaCreateContextFn(GLenum format, OSMesaContext sharelist) {
  return driver_->fn.OSMesaCreateContextFn(format, sharelist);
}

OSMesaContext OSMESAApiBase::OSMesaCreateContextExtFn(GLenum format, GLint depthBits, GLint stencilBits, GLint accumBits, OSMesaContext sharelist) {
  return driver_->fn.OSMesaCreateContextExtFn(format, depthBits, stencilBits, accumBits, sharelist);
}

void OSMESAApiBase::OSMesaDestroyContextFn(OSMesaContext ctx) {
  driver_->fn.OSMesaDestroyContextFn(ctx);
}

GLboolean OSMESAApiBase::OSMesaMakeCurrentFn(OSMesaContext ctx, void* buffer, GLenum type, GLsizei width, GLsizei height) {
  return driver_->fn.OSMesaMakeCurrentFn(ctx, buffer, type, width, height);
}

OSMesaContext OSMESAApiBase::OSMesaGetCurrentContextFn(void) {
  return driver_->fn.OSMesaGetCurrentContextFn();
}

void OSMESAApiBase::OSMesaPixelStoreFn(GLint pname, GLint value) {
  driver_->fn.OSMesaPixelStoreFn(pname, value);
}

void OSMESAApiBase::OSMesaGetIntegervFn(GLint pname, GLint* value) {
  driver_->fn.OSMesaGetIntegervFn(pname, value);
}

GLboolean OSMESAApiBase::OSMesaGetDepthBufferFn(OSMesaContext c, GLint* width, GLint* height, GLint* bytesPerValue, void** buffer) {
  return driver_->fn.OSMesaGetDepthBufferFn(c, width, height, bytesPerValue, buffer);
}

GLboolean OSMESAApiBase::OSMesaGetColorBufferFn(OSMesaContext c, GLint* width, GLint* height, GLint* format, void** buffer) {
  return driver_->fn.OSMesaGetColorBufferFn(c, width, height, format, buffer);
}

OSMESAproc OSMESAApiBase::OSMesaGetProcAddressFn(const char* funcName) {
  return driver_->fn.OSMesaGetProcAddressFn(funcName);
}

void OSMESAApiBase::OSMesaColorClampFn(GLboolean enable) {
  driver_->fn.OSMesaColorClampFn(enable);
}

}  // namespace gfx
