// Copyright (c) 2011 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is automatically generated.

#include <string>
#include "gpu/command_buffer/common/gles2_cmd_utils.h"
#include "ui/gl/gl_bindings.h"
#include "ui/gl/gl_context.h"
#include "ui/gl/gl_implementation.h"
#include "ui/gl/gl_gl_api_implementation.h"

using gpu::gles2::GLES2Util;

namespace gfx {

static bool g_debugBindingsInitialized;
DriverGL g_driver_gl;


void DriverGL::InitializeBindings() {
  fn.glActiveTextureFn = reinterpret_cast<glActiveTextureProc>(GetGLCoreProcAddress("glActiveTexture"));
  fn.glAttachShaderFn = reinterpret_cast<glAttachShaderProc>(GetGLCoreProcAddress("glAttachShader"));
  fn.glBeginQueryFn = reinterpret_cast<glBeginQueryProc>(GetGLCoreProcAddress("glBeginQuery"));
  fn.glBeginQueryARBFn = reinterpret_cast<glBeginQueryARBProc>(GetGLCoreProcAddress("glBeginQueryARB"));
  if (!fn.glBeginQueryARBFn)
    fn.glBeginQueryARBFn = reinterpret_cast<glBeginQueryARBProc>(GetGLCoreProcAddress("glBeginQueryEXT"));
  fn.glBindAttribLocationFn = reinterpret_cast<glBindAttribLocationProc>(GetGLCoreProcAddress("glBindAttribLocation"));
  fn.glBindBufferFn = reinterpret_cast<glBindBufferProc>(GetGLCoreProcAddress("glBindBuffer"));
  fn.glBindFragDataLocationFn = reinterpret_cast<glBindFragDataLocationProc>(GetGLCoreProcAddress("glBindFragDataLocation"));
  fn.glBindFragDataLocationIndexedFn = reinterpret_cast<glBindFragDataLocationIndexedProc>(GetGLCoreProcAddress("glBindFragDataLocationIndexed"));
  fn.glBindFramebufferEXTFn = reinterpret_cast<glBindFramebufferEXTProc>(GetGLCoreProcAddress("glBindFramebufferEXT"));
  if (!fn.glBindFramebufferEXTFn)
    fn.glBindFramebufferEXTFn = reinterpret_cast<glBindFramebufferEXTProc>(GetGLCoreProcAddress("glBindFramebuffer"));
  fn.glBindRenderbufferEXTFn = reinterpret_cast<glBindRenderbufferEXTProc>(GetGLCoreProcAddress("glBindRenderbufferEXT"));
  if (!fn.glBindRenderbufferEXTFn)
    fn.glBindRenderbufferEXTFn = reinterpret_cast<glBindRenderbufferEXTProc>(GetGLCoreProcAddress("glBindRenderbuffer"));
  fn.glBindTextureFn = reinterpret_cast<glBindTextureProc>(GetGLCoreProcAddress("glBindTexture"));
  fn.glBlendColorFn = reinterpret_cast<glBlendColorProc>(GetGLCoreProcAddress("glBlendColor"));
  fn.glBlendEquationFn = reinterpret_cast<glBlendEquationProc>(GetGLCoreProcAddress("glBlendEquation"));
  fn.glBlendEquationSeparateFn = reinterpret_cast<glBlendEquationSeparateProc>(GetGLCoreProcAddress("glBlendEquationSeparate"));
  fn.glBlendFuncFn = reinterpret_cast<glBlendFuncProc>(GetGLCoreProcAddress("glBlendFunc"));
  fn.glBlendFuncSeparateFn = reinterpret_cast<glBlendFuncSeparateProc>(GetGLCoreProcAddress("glBlendFuncSeparate"));
  fn.glBlitFramebufferEXTFn = reinterpret_cast<glBlitFramebufferEXTProc>(GetGLCoreProcAddress("glBlitFramebufferEXT"));
  if (!fn.glBlitFramebufferEXTFn)
    fn.glBlitFramebufferEXTFn = reinterpret_cast<glBlitFramebufferEXTProc>(GetGLCoreProcAddress("glBlitFramebuffer"));
  fn.glBlitFramebufferANGLEFn = reinterpret_cast<glBlitFramebufferANGLEProc>(GetGLCoreProcAddress("glBlitFramebufferANGLE"));
  if (!fn.glBlitFramebufferANGLEFn)
    fn.glBlitFramebufferANGLEFn = reinterpret_cast<glBlitFramebufferANGLEProc>(GetGLCoreProcAddress("glBlitFramebuffer"));
  fn.glBufferDataFn = reinterpret_cast<glBufferDataProc>(GetGLCoreProcAddress("glBufferData"));
  fn.glBufferSubDataFn = reinterpret_cast<glBufferSubDataProc>(GetGLCoreProcAddress("glBufferSubData"));
  fn.glCheckFramebufferStatusEXTFn = reinterpret_cast<glCheckFramebufferStatusEXTProc>(GetGLCoreProcAddress("glCheckFramebufferStatusEXT"));
  if (!fn.glCheckFramebufferStatusEXTFn)
    fn.glCheckFramebufferStatusEXTFn = reinterpret_cast<glCheckFramebufferStatusEXTProc>(GetGLCoreProcAddress("glCheckFramebufferStatus"));
  fn.glClearFn = reinterpret_cast<glClearProc>(GetGLCoreProcAddress("glClear"));
  fn.glClearColorFn = reinterpret_cast<glClearColorProc>(GetGLCoreProcAddress("glClearColor"));
  fn.glClearDepthFn = reinterpret_cast<glClearDepthProc>(GetGLCoreProcAddress("glClearDepth"));
  fn.glClearDepthfFn = reinterpret_cast<glClearDepthfProc>(GetGLCoreProcAddress("glClearDepthf"));
  fn.glClearStencilFn = reinterpret_cast<glClearStencilProc>(GetGLCoreProcAddress("glClearStencil"));
  fn.glColorMaskFn = reinterpret_cast<glColorMaskProc>(GetGLCoreProcAddress("glColorMask"));
  fn.glCompileShaderFn = reinterpret_cast<glCompileShaderProc>(GetGLCoreProcAddress("glCompileShader"));
  fn.glCompressedTexImage2DFn = reinterpret_cast<glCompressedTexImage2DProc>(GetGLCoreProcAddress("glCompressedTexImage2D"));
  fn.glCompressedTexSubImage2DFn = reinterpret_cast<glCompressedTexSubImage2DProc>(GetGLCoreProcAddress("glCompressedTexSubImage2D"));
  fn.glCopyTexImage2DFn = reinterpret_cast<glCopyTexImage2DProc>(GetGLCoreProcAddress("glCopyTexImage2D"));
  fn.glCopyTexSubImage2DFn = reinterpret_cast<glCopyTexSubImage2DProc>(GetGLCoreProcAddress("glCopyTexSubImage2D"));
  fn.glCreateProgramFn = reinterpret_cast<glCreateProgramProc>(GetGLCoreProcAddress("glCreateProgram"));
  fn.glCreateShaderFn = reinterpret_cast<glCreateShaderProc>(GetGLCoreProcAddress("glCreateShader"));
  fn.glCullFaceFn = reinterpret_cast<glCullFaceProc>(GetGLCoreProcAddress("glCullFace"));
  fn.glDeleteBuffersARBFn = reinterpret_cast<glDeleteBuffersARBProc>(GetGLCoreProcAddress("glDeleteBuffersARB"));
  if (!fn.glDeleteBuffersARBFn)
    fn.glDeleteBuffersARBFn = reinterpret_cast<glDeleteBuffersARBProc>(GetGLCoreProcAddress("glDeleteBuffers"));
  fn.glDeleteFramebuffersEXTFn = reinterpret_cast<glDeleteFramebuffersEXTProc>(GetGLCoreProcAddress("glDeleteFramebuffersEXT"));
  if (!fn.glDeleteFramebuffersEXTFn)
    fn.glDeleteFramebuffersEXTFn = reinterpret_cast<glDeleteFramebuffersEXTProc>(GetGLCoreProcAddress("glDeleteFramebuffers"));
  fn.glDeleteProgramFn = reinterpret_cast<glDeleteProgramProc>(GetGLCoreProcAddress("glDeleteProgram"));
  fn.glDeleteQueriesFn = reinterpret_cast<glDeleteQueriesProc>(GetGLCoreProcAddress("glDeleteQueries"));
  fn.glDeleteQueriesARBFn = reinterpret_cast<glDeleteQueriesARBProc>(GetGLCoreProcAddress("glDeleteQueriesARB"));
  if (!fn.glDeleteQueriesARBFn)
    fn.glDeleteQueriesARBFn = reinterpret_cast<glDeleteQueriesARBProc>(GetGLCoreProcAddress("glDeleteQueriesEXT"));
  fn.glDeleteRenderbuffersEXTFn = reinterpret_cast<glDeleteRenderbuffersEXTProc>(GetGLCoreProcAddress("glDeleteRenderbuffersEXT"));
  if (!fn.glDeleteRenderbuffersEXTFn)
    fn.glDeleteRenderbuffersEXTFn = reinterpret_cast<glDeleteRenderbuffersEXTProc>(GetGLCoreProcAddress("glDeleteRenderbuffers"));
  fn.glDeleteShaderFn = reinterpret_cast<glDeleteShaderProc>(GetGLCoreProcAddress("glDeleteShader"));
  fn.glDeleteTexturesFn = reinterpret_cast<glDeleteTexturesProc>(GetGLCoreProcAddress("glDeleteTextures"));
  fn.glDepthFuncFn = reinterpret_cast<glDepthFuncProc>(GetGLCoreProcAddress("glDepthFunc"));
  fn.glDepthMaskFn = reinterpret_cast<glDepthMaskProc>(GetGLCoreProcAddress("glDepthMask"));
  fn.glDepthRangeFn = reinterpret_cast<glDepthRangeProc>(GetGLCoreProcAddress("glDepthRange"));
  fn.glDepthRangefFn = reinterpret_cast<glDepthRangefProc>(GetGLCoreProcAddress("glDepthRangef"));
  fn.glDetachShaderFn = reinterpret_cast<glDetachShaderProc>(GetGLCoreProcAddress("glDetachShader"));
  fn.glDisableFn = reinterpret_cast<glDisableProc>(GetGLCoreProcAddress("glDisable"));
  fn.glDisableVertexAttribArrayFn = reinterpret_cast<glDisableVertexAttribArrayProc>(GetGLCoreProcAddress("glDisableVertexAttribArray"));
  fn.glDrawArraysFn = reinterpret_cast<glDrawArraysProc>(GetGLCoreProcAddress("glDrawArrays"));
  fn.glDrawBufferFn = reinterpret_cast<glDrawBufferProc>(GetGLCoreProcAddress("glDrawBuffer"));
  fn.glDrawBuffersARBFn = reinterpret_cast<glDrawBuffersARBProc>(GetGLCoreProcAddress("glDrawBuffersARB"));
  fn.glDrawElementsFn = reinterpret_cast<glDrawElementsProc>(GetGLCoreProcAddress("glDrawElements"));
  fn.glEGLImageTargetTexture2DOESFn = reinterpret_cast<glEGLImageTargetTexture2DOESProc>(GetGLCoreProcAddress("glEGLImageTargetTexture2DOES"));
  fn.glEGLImageTargetRenderbufferStorageOESFn = reinterpret_cast<glEGLImageTargetRenderbufferStorageOESProc>(GetGLCoreProcAddress("glEGLImageTargetRenderbufferStorageOES"));
  fn.glEnableFn = reinterpret_cast<glEnableProc>(GetGLCoreProcAddress("glEnable"));
  fn.glEnableVertexAttribArrayFn = reinterpret_cast<glEnableVertexAttribArrayProc>(GetGLCoreProcAddress("glEnableVertexAttribArray"));
  fn.glEndQueryFn = reinterpret_cast<glEndQueryProc>(GetGLCoreProcAddress("glEndQuery"));
  fn.glEndQueryARBFn = reinterpret_cast<glEndQueryARBProc>(GetGLCoreProcAddress("glEndQueryARB"));
  if (!fn.glEndQueryARBFn)
    fn.glEndQueryARBFn = reinterpret_cast<glEndQueryARBProc>(GetGLCoreProcAddress("glEndQueryEXT"));
  fn.glFinishFn = reinterpret_cast<glFinishProc>(GetGLCoreProcAddress("glFinish"));
  fn.glFlushFn = reinterpret_cast<glFlushProc>(GetGLCoreProcAddress("glFlush"));
  fn.glFramebufferRenderbufferEXTFn = reinterpret_cast<glFramebufferRenderbufferEXTProc>(GetGLCoreProcAddress("glFramebufferRenderbufferEXT"));
  if (!fn.glFramebufferRenderbufferEXTFn)
    fn.glFramebufferRenderbufferEXTFn = reinterpret_cast<glFramebufferRenderbufferEXTProc>(GetGLCoreProcAddress("glFramebufferRenderbuffer"));
  fn.glFramebufferTexture2DEXTFn = reinterpret_cast<glFramebufferTexture2DEXTProc>(GetGLCoreProcAddress("glFramebufferTexture2DEXT"));
  if (!fn.glFramebufferTexture2DEXTFn)
    fn.glFramebufferTexture2DEXTFn = reinterpret_cast<glFramebufferTexture2DEXTProc>(GetGLCoreProcAddress("glFramebufferTexture2D"));
  fn.glFrontFaceFn = reinterpret_cast<glFrontFaceProc>(GetGLCoreProcAddress("glFrontFace"));
  fn.glGenBuffersARBFn = reinterpret_cast<glGenBuffersARBProc>(GetGLCoreProcAddress("glGenBuffersARB"));
  if (!fn.glGenBuffersARBFn)
    fn.glGenBuffersARBFn = reinterpret_cast<glGenBuffersARBProc>(GetGLCoreProcAddress("glGenBuffers"));
  fn.glGenQueriesFn = reinterpret_cast<glGenQueriesProc>(GetGLCoreProcAddress("glGenQueries"));
  fn.glGenQueriesARBFn = reinterpret_cast<glGenQueriesARBProc>(GetGLCoreProcAddress("glGenQueriesARB"));
  if (!fn.glGenQueriesARBFn)
    fn.glGenQueriesARBFn = reinterpret_cast<glGenQueriesARBProc>(GetGLCoreProcAddress("glGenQueriesEXT"));
  fn.glGenerateMipmapEXTFn = reinterpret_cast<glGenerateMipmapEXTProc>(GetGLCoreProcAddress("glGenerateMipmapEXT"));
  if (!fn.glGenerateMipmapEXTFn)
    fn.glGenerateMipmapEXTFn = reinterpret_cast<glGenerateMipmapEXTProc>(GetGLCoreProcAddress("glGenerateMipmap"));
  fn.glGenFramebuffersEXTFn = reinterpret_cast<glGenFramebuffersEXTProc>(GetGLCoreProcAddress("glGenFramebuffersEXT"));
  if (!fn.glGenFramebuffersEXTFn)
    fn.glGenFramebuffersEXTFn = reinterpret_cast<glGenFramebuffersEXTProc>(GetGLCoreProcAddress("glGenFramebuffers"));
  fn.glGenRenderbuffersEXTFn = reinterpret_cast<glGenRenderbuffersEXTProc>(GetGLCoreProcAddress("glGenRenderbuffersEXT"));
  if (!fn.glGenRenderbuffersEXTFn)
    fn.glGenRenderbuffersEXTFn = reinterpret_cast<glGenRenderbuffersEXTProc>(GetGLCoreProcAddress("glGenRenderbuffers"));
  fn.glGenTexturesFn = reinterpret_cast<glGenTexturesProc>(GetGLCoreProcAddress("glGenTextures"));
  fn.glGetActiveAttribFn = reinterpret_cast<glGetActiveAttribProc>(GetGLCoreProcAddress("glGetActiveAttrib"));
  fn.glGetActiveUniformFn = reinterpret_cast<glGetActiveUniformProc>(GetGLCoreProcAddress("glGetActiveUniform"));
  fn.glGetAttachedShadersFn = reinterpret_cast<glGetAttachedShadersProc>(GetGLCoreProcAddress("glGetAttachedShaders"));
  fn.glGetAttribLocationFn = reinterpret_cast<glGetAttribLocationProc>(GetGLCoreProcAddress("glGetAttribLocation"));
  fn.glGetBooleanvFn = reinterpret_cast<glGetBooleanvProc>(GetGLCoreProcAddress("glGetBooleanv"));
  fn.glGetBufferParameterivFn = reinterpret_cast<glGetBufferParameterivProc>(GetGLCoreProcAddress("glGetBufferParameteriv"));
  fn.glGetErrorFn = reinterpret_cast<glGetErrorProc>(GetGLCoreProcAddress("glGetError"));
  fn.glGetFloatvFn = reinterpret_cast<glGetFloatvProc>(GetGLCoreProcAddress("glGetFloatv"));
  fn.glGetFramebufferAttachmentParameterivEXTFn = reinterpret_cast<glGetFramebufferAttachmentParameterivEXTProc>(GetGLCoreProcAddress("glGetFramebufferAttachmentParameterivEXT"));
  if (!fn.glGetFramebufferAttachmentParameterivEXTFn)
    fn.glGetFramebufferAttachmentParameterivEXTFn = reinterpret_cast<glGetFramebufferAttachmentParameterivEXTProc>(GetGLCoreProcAddress("glGetFramebufferAttachmentParameteriv"));
  fn.glGetGraphicsResetStatusARBFn = reinterpret_cast<glGetGraphicsResetStatusARBProc>(GetGLCoreProcAddress("glGetGraphicsResetStatusARB"));
  if (!fn.glGetGraphicsResetStatusARBFn)
    fn.glGetGraphicsResetStatusARBFn = reinterpret_cast<glGetGraphicsResetStatusARBProc>(GetGLCoreProcAddress("glGetGraphicsResetStatusEXT"));
  fn.glGetIntegervFn = reinterpret_cast<glGetIntegervProc>(GetGLCoreProcAddress("glGetIntegerv"));
  fn.glGetProgramBinaryFn = reinterpret_cast<glGetProgramBinaryProc>(GetGLCoreProcAddress("glGetProgramBinary"));
  if (!fn.glGetProgramBinaryFn)
    fn.glGetProgramBinaryFn = reinterpret_cast<glGetProgramBinaryProc>(GetGLCoreProcAddress("glGetProgramBinaryOES"));
  fn.glGetProgramivFn = reinterpret_cast<glGetProgramivProc>(GetGLCoreProcAddress("glGetProgramiv"));
  fn.glGetProgramInfoLogFn = reinterpret_cast<glGetProgramInfoLogProc>(GetGLCoreProcAddress("glGetProgramInfoLog"));
  fn.glGetQueryivFn = reinterpret_cast<glGetQueryivProc>(GetGLCoreProcAddress("glGetQueryiv"));
  fn.glGetQueryivARBFn = reinterpret_cast<glGetQueryivARBProc>(GetGLCoreProcAddress("glGetQueryivARB"));
  if (!fn.glGetQueryivARBFn)
    fn.glGetQueryivARBFn = reinterpret_cast<glGetQueryivARBProc>(GetGLCoreProcAddress("glGetQueryivEXT"));
  fn.glGetQueryObjecti64vFn = reinterpret_cast<glGetQueryObjecti64vProc>(GetGLCoreProcAddress("glGetQueryObjecti64v"));
  fn.glGetQueryObjectivFn = reinterpret_cast<glGetQueryObjectivProc>(GetGLCoreProcAddress("glGetQueryObjectiv"));
  fn.glGetQueryObjectui64vFn = reinterpret_cast<glGetQueryObjectui64vProc>(GetGLCoreProcAddress("glGetQueryObjectui64v"));
  fn.glGetQueryObjectuivFn = reinterpret_cast<glGetQueryObjectuivProc>(GetGLCoreProcAddress("glGetQueryObjectuiv"));
  fn.glGetQueryObjectuivARBFn = reinterpret_cast<glGetQueryObjectuivARBProc>(GetGLCoreProcAddress("glGetQueryObjectuivARB"));
  if (!fn.glGetQueryObjectuivARBFn)
    fn.glGetQueryObjectuivARBFn = reinterpret_cast<glGetQueryObjectuivARBProc>(GetGLCoreProcAddress("glGetQueryObjectuivEXT"));
  fn.glGetRenderbufferParameterivEXTFn = reinterpret_cast<glGetRenderbufferParameterivEXTProc>(GetGLCoreProcAddress("glGetRenderbufferParameterivEXT"));
  if (!fn.glGetRenderbufferParameterivEXTFn)
    fn.glGetRenderbufferParameterivEXTFn = reinterpret_cast<glGetRenderbufferParameterivEXTProc>(GetGLCoreProcAddress("glGetRenderbufferParameteriv"));
  fn.glGetShaderivFn = reinterpret_cast<glGetShaderivProc>(GetGLCoreProcAddress("glGetShaderiv"));
  fn.glGetShaderInfoLogFn = reinterpret_cast<glGetShaderInfoLogProc>(GetGLCoreProcAddress("glGetShaderInfoLog"));
  fn.glGetShaderPrecisionFormatFn = reinterpret_cast<glGetShaderPrecisionFormatProc>(GetGLCoreProcAddress("glGetShaderPrecisionFormat"));
  fn.glGetShaderSourceFn = reinterpret_cast<glGetShaderSourceProc>(GetGLCoreProcAddress("glGetShaderSource"));
  fn.glGetStringFn = reinterpret_cast<glGetStringProc>(GetGLCoreProcAddress("glGetString"));
  fn.glGetTexLevelParameterfvFn = reinterpret_cast<glGetTexLevelParameterfvProc>(GetGLCoreProcAddress("glGetTexLevelParameterfv"));
  fn.glGetTexLevelParameterivFn = reinterpret_cast<glGetTexLevelParameterivProc>(GetGLCoreProcAddress("glGetTexLevelParameteriv"));
  fn.glGetTexParameterfvFn = reinterpret_cast<glGetTexParameterfvProc>(GetGLCoreProcAddress("glGetTexParameterfv"));
  fn.glGetTexParameterivFn = reinterpret_cast<glGetTexParameterivProc>(GetGLCoreProcAddress("glGetTexParameteriv"));
  fn.glGetTranslatedShaderSourceANGLEFn = reinterpret_cast<glGetTranslatedShaderSourceANGLEProc>(GetGLCoreProcAddress("glGetTranslatedShaderSourceANGLE"));
  fn.glGetUniformfvFn = reinterpret_cast<glGetUniformfvProc>(GetGLCoreProcAddress("glGetUniformfv"));
  fn.glGetUniformivFn = reinterpret_cast<glGetUniformivProc>(GetGLCoreProcAddress("glGetUniformiv"));
  fn.glGetUniformLocationFn = reinterpret_cast<glGetUniformLocationProc>(GetGLCoreProcAddress("glGetUniformLocation"));
  fn.glGetVertexAttribfvFn = reinterpret_cast<glGetVertexAttribfvProc>(GetGLCoreProcAddress("glGetVertexAttribfv"));
  fn.glGetVertexAttribivFn = reinterpret_cast<glGetVertexAttribivProc>(GetGLCoreProcAddress("glGetVertexAttribiv"));
  fn.glGetVertexAttribPointervFn = reinterpret_cast<glGetVertexAttribPointervProc>(GetGLCoreProcAddress("glGetVertexAttribPointerv"));
  fn.glHintFn = reinterpret_cast<glHintProc>(GetGLCoreProcAddress("glHint"));
  fn.glIsBufferFn = reinterpret_cast<glIsBufferProc>(GetGLCoreProcAddress("glIsBuffer"));
  fn.glIsEnabledFn = reinterpret_cast<glIsEnabledProc>(GetGLCoreProcAddress("glIsEnabled"));
  fn.glIsFramebufferEXTFn = reinterpret_cast<glIsFramebufferEXTProc>(GetGLCoreProcAddress("glIsFramebufferEXT"));
  if (!fn.glIsFramebufferEXTFn)
    fn.glIsFramebufferEXTFn = reinterpret_cast<glIsFramebufferEXTProc>(GetGLCoreProcAddress("glIsFramebuffer"));
  fn.glIsProgramFn = reinterpret_cast<glIsProgramProc>(GetGLCoreProcAddress("glIsProgram"));
  fn.glIsQueryARBFn = reinterpret_cast<glIsQueryARBProc>(GetGLCoreProcAddress("glIsQueryARB"));
  if (!fn.glIsQueryARBFn)
    fn.glIsQueryARBFn = reinterpret_cast<glIsQueryARBProc>(GetGLCoreProcAddress("glIsQueryEXT"));
  fn.glIsRenderbufferEXTFn = reinterpret_cast<glIsRenderbufferEXTProc>(GetGLCoreProcAddress("glIsRenderbufferEXT"));
  if (!fn.glIsRenderbufferEXTFn)
    fn.glIsRenderbufferEXTFn = reinterpret_cast<glIsRenderbufferEXTProc>(GetGLCoreProcAddress("glIsRenderbuffer"));
  fn.glIsShaderFn = reinterpret_cast<glIsShaderProc>(GetGLCoreProcAddress("glIsShader"));
  fn.glIsTextureFn = reinterpret_cast<glIsTextureProc>(GetGLCoreProcAddress("glIsTexture"));
  fn.glLineWidthFn = reinterpret_cast<glLineWidthProc>(GetGLCoreProcAddress("glLineWidth"));
  fn.glLinkProgramFn = reinterpret_cast<glLinkProgramProc>(GetGLCoreProcAddress("glLinkProgram"));
  fn.glMapBufferFn = reinterpret_cast<glMapBufferProc>(GetGLCoreProcAddress("glMapBuffer"));
  if (!fn.glMapBufferFn)
    fn.glMapBufferFn = reinterpret_cast<glMapBufferProc>(GetGLCoreProcAddress("glMapBufferOES"));
  fn.glPixelStoreiFn = reinterpret_cast<glPixelStoreiProc>(GetGLCoreProcAddress("glPixelStorei"));
  fn.glPointParameteriFn = reinterpret_cast<glPointParameteriProc>(GetGLCoreProcAddress("glPointParameteri"));
  fn.glPolygonOffsetFn = reinterpret_cast<glPolygonOffsetProc>(GetGLCoreProcAddress("glPolygonOffset"));
  fn.glProgramBinaryFn = reinterpret_cast<glProgramBinaryProc>(GetGLCoreProcAddress("glProgramBinary"));
  if (!fn.glProgramBinaryFn)
    fn.glProgramBinaryFn = reinterpret_cast<glProgramBinaryProc>(GetGLCoreProcAddress("glProgramBinaryOES"));
  fn.glProgramParameteriFn = reinterpret_cast<glProgramParameteriProc>(GetGLCoreProcAddress("glProgramParameteri"));
  fn.glQueryCounterFn = reinterpret_cast<glQueryCounterProc>(GetGLCoreProcAddress("glQueryCounter"));
  fn.glReadBufferFn = reinterpret_cast<glReadBufferProc>(GetGLCoreProcAddress("glReadBuffer"));
  fn.glReadPixelsFn = reinterpret_cast<glReadPixelsProc>(GetGLCoreProcAddress("glReadPixels"));
  fn.glReleaseShaderCompilerFn = reinterpret_cast<glReleaseShaderCompilerProc>(GetGLCoreProcAddress("glReleaseShaderCompiler"));
  fn.glRenderbufferStorageMultisampleEXTFn = reinterpret_cast<glRenderbufferStorageMultisampleEXTProc>(GetGLCoreProcAddress("glRenderbufferStorageMultisampleEXT"));
  if (!fn.glRenderbufferStorageMultisampleEXTFn)
    fn.glRenderbufferStorageMultisampleEXTFn = reinterpret_cast<glRenderbufferStorageMultisampleEXTProc>(GetGLCoreProcAddress("glRenderbufferStorageMultisample"));
  fn.glRenderbufferStorageMultisampleANGLEFn = reinterpret_cast<glRenderbufferStorageMultisampleANGLEProc>(GetGLCoreProcAddress("glRenderbufferStorageMultisampleANGLE"));
  if (!fn.glRenderbufferStorageMultisampleANGLEFn)
    fn.glRenderbufferStorageMultisampleANGLEFn = reinterpret_cast<glRenderbufferStorageMultisampleANGLEProc>(GetGLCoreProcAddress("glRenderbufferStorageMultisample"));
  fn.glRenderbufferStorageEXTFn = reinterpret_cast<glRenderbufferStorageEXTProc>(GetGLCoreProcAddress("glRenderbufferStorageEXT"));
  if (!fn.glRenderbufferStorageEXTFn)
    fn.glRenderbufferStorageEXTFn = reinterpret_cast<glRenderbufferStorageEXTProc>(GetGLCoreProcAddress("glRenderbufferStorage"));
  fn.glSampleCoverageFn = reinterpret_cast<glSampleCoverageProc>(GetGLCoreProcAddress("glSampleCoverage"));
  fn.glScissorFn = reinterpret_cast<glScissorProc>(GetGLCoreProcAddress("glScissor"));
  fn.glShaderBinaryFn = reinterpret_cast<glShaderBinaryProc>(GetGLCoreProcAddress("glShaderBinary"));
  fn.glShaderSourceFn = reinterpret_cast<glShaderSourceProc>(GetGLCoreProcAddress("glShaderSource"));
  fn.glStencilFuncFn = reinterpret_cast<glStencilFuncProc>(GetGLCoreProcAddress("glStencilFunc"));
  fn.glStencilFuncSeparateFn = reinterpret_cast<glStencilFuncSeparateProc>(GetGLCoreProcAddress("glStencilFuncSeparate"));
  fn.glStencilMaskFn = reinterpret_cast<glStencilMaskProc>(GetGLCoreProcAddress("glStencilMask"));
  fn.glStencilMaskSeparateFn = reinterpret_cast<glStencilMaskSeparateProc>(GetGLCoreProcAddress("glStencilMaskSeparate"));
  fn.glStencilOpFn = reinterpret_cast<glStencilOpProc>(GetGLCoreProcAddress("glStencilOp"));
  fn.glStencilOpSeparateFn = reinterpret_cast<glStencilOpSeparateProc>(GetGLCoreProcAddress("glStencilOpSeparate"));
  fn.glTexImage2DFn = reinterpret_cast<glTexImage2DProc>(GetGLCoreProcAddress("glTexImage2D"));
  fn.glTexParameterfFn = reinterpret_cast<glTexParameterfProc>(GetGLCoreProcAddress("glTexParameterf"));
  fn.glTexParameterfvFn = reinterpret_cast<glTexParameterfvProc>(GetGLCoreProcAddress("glTexParameterfv"));
  fn.glTexParameteriFn = reinterpret_cast<glTexParameteriProc>(GetGLCoreProcAddress("glTexParameteri"));
  fn.glTexParameterivFn = reinterpret_cast<glTexParameterivProc>(GetGLCoreProcAddress("glTexParameteriv"));
  fn.glTexStorage2DEXTFn = reinterpret_cast<glTexStorage2DEXTProc>(GetGLCoreProcAddress("glTexStorage2DEXT"));
  fn.glTexSubImage2DFn = reinterpret_cast<glTexSubImage2DProc>(GetGLCoreProcAddress("glTexSubImage2D"));
  fn.glUniform1fFn = reinterpret_cast<glUniform1fProc>(GetGLCoreProcAddress("glUniform1f"));
  fn.glUniform1fvFn = reinterpret_cast<glUniform1fvProc>(GetGLCoreProcAddress("glUniform1fv"));
  fn.glUniform1iFn = reinterpret_cast<glUniform1iProc>(GetGLCoreProcAddress("glUniform1i"));
  fn.glUniform1ivFn = reinterpret_cast<glUniform1ivProc>(GetGLCoreProcAddress("glUniform1iv"));
  fn.glUniform2fFn = reinterpret_cast<glUniform2fProc>(GetGLCoreProcAddress("glUniform2f"));
  fn.glUniform2fvFn = reinterpret_cast<glUniform2fvProc>(GetGLCoreProcAddress("glUniform2fv"));
  fn.glUniform2iFn = reinterpret_cast<glUniform2iProc>(GetGLCoreProcAddress("glUniform2i"));
  fn.glUniform2ivFn = reinterpret_cast<glUniform2ivProc>(GetGLCoreProcAddress("glUniform2iv"));
  fn.glUniform3fFn = reinterpret_cast<glUniform3fProc>(GetGLCoreProcAddress("glUniform3f"));
  fn.glUniform3fvFn = reinterpret_cast<glUniform3fvProc>(GetGLCoreProcAddress("glUniform3fv"));
  fn.glUniform3iFn = reinterpret_cast<glUniform3iProc>(GetGLCoreProcAddress("glUniform3i"));
  fn.glUniform3ivFn = reinterpret_cast<glUniform3ivProc>(GetGLCoreProcAddress("glUniform3iv"));
  fn.glUniform4fFn = reinterpret_cast<glUniform4fProc>(GetGLCoreProcAddress("glUniform4f"));
  fn.glUniform4fvFn = reinterpret_cast<glUniform4fvProc>(GetGLCoreProcAddress("glUniform4fv"));
  fn.glUniform4iFn = reinterpret_cast<glUniform4iProc>(GetGLCoreProcAddress("glUniform4i"));
  fn.glUniform4ivFn = reinterpret_cast<glUniform4ivProc>(GetGLCoreProcAddress("glUniform4iv"));
  fn.glUniformMatrix2fvFn = reinterpret_cast<glUniformMatrix2fvProc>(GetGLCoreProcAddress("glUniformMatrix2fv"));
  fn.glUniformMatrix3fvFn = reinterpret_cast<glUniformMatrix3fvProc>(GetGLCoreProcAddress("glUniformMatrix3fv"));
  fn.glUniformMatrix4fvFn = reinterpret_cast<glUniformMatrix4fvProc>(GetGLCoreProcAddress("glUniformMatrix4fv"));
  fn.glUnmapBufferFn = reinterpret_cast<glUnmapBufferProc>(GetGLCoreProcAddress("glUnmapBuffer"));
  if (!fn.glUnmapBufferFn)
    fn.glUnmapBufferFn = reinterpret_cast<glUnmapBufferProc>(GetGLCoreProcAddress("glUnmapBufferOES"));
  fn.glUseProgramFn = reinterpret_cast<glUseProgramProc>(GetGLCoreProcAddress("glUseProgram"));
  fn.glValidateProgramFn = reinterpret_cast<glValidateProgramProc>(GetGLCoreProcAddress("glValidateProgram"));
  fn.glVertexAttrib1fFn = reinterpret_cast<glVertexAttrib1fProc>(GetGLCoreProcAddress("glVertexAttrib1f"));
  fn.glVertexAttrib1fvFn = reinterpret_cast<glVertexAttrib1fvProc>(GetGLCoreProcAddress("glVertexAttrib1fv"));
  fn.glVertexAttrib2fFn = reinterpret_cast<glVertexAttrib2fProc>(GetGLCoreProcAddress("glVertexAttrib2f"));
  fn.glVertexAttrib2fvFn = reinterpret_cast<glVertexAttrib2fvProc>(GetGLCoreProcAddress("glVertexAttrib2fv"));
  fn.glVertexAttrib3fFn = reinterpret_cast<glVertexAttrib3fProc>(GetGLCoreProcAddress("glVertexAttrib3f"));
  fn.glVertexAttrib3fvFn = reinterpret_cast<glVertexAttrib3fvProc>(GetGLCoreProcAddress("glVertexAttrib3fv"));
  fn.glVertexAttrib4fFn = reinterpret_cast<glVertexAttrib4fProc>(GetGLCoreProcAddress("glVertexAttrib4f"));
  fn.glVertexAttrib4fvFn = reinterpret_cast<glVertexAttrib4fvProc>(GetGLCoreProcAddress("glVertexAttrib4fv"));
  fn.glVertexAttribPointerFn = reinterpret_cast<glVertexAttribPointerProc>(GetGLCoreProcAddress("glVertexAttribPointer"));
  fn.glViewportFn = reinterpret_cast<glViewportProc>(GetGLCoreProcAddress("glViewport"));
  fn.glGenFencesNVFn = reinterpret_cast<glGenFencesNVProc>(GetGLCoreProcAddress("glGenFencesNV"));
  fn.glDeleteFencesNVFn = reinterpret_cast<glDeleteFencesNVProc>(GetGLCoreProcAddress("glDeleteFencesNV"));
  fn.glSetFenceNVFn = reinterpret_cast<glSetFenceNVProc>(GetGLCoreProcAddress("glSetFenceNV"));
  fn.glTestFenceNVFn = reinterpret_cast<glTestFenceNVProc>(GetGLCoreProcAddress("glTestFenceNV"));
  fn.glFinishFenceNVFn = reinterpret_cast<glFinishFenceNVProc>(GetGLCoreProcAddress("glFinishFenceNV"));
  fn.glIsFenceNVFn = reinterpret_cast<glIsFenceNVProc>(GetGLCoreProcAddress("glIsFenceNV"));
  fn.glGetFenceivNVFn = reinterpret_cast<glGetFenceivNVProc>(GetGLCoreProcAddress("glGetFenceivNV"));
  fn.glFenceSyncFn = reinterpret_cast<glFenceSyncProc>(GetGLCoreProcAddress("glFenceSync"));
  fn.glDeleteSyncFn = reinterpret_cast<glDeleteSyncProc>(GetGLCoreProcAddress("glDeleteSync"));
  fn.glGetSyncivFn = reinterpret_cast<glGetSyncivProc>(GetGLCoreProcAddress("glGetSynciv"));
  fn.glDrawArraysInstancedANGLEFn = reinterpret_cast<glDrawArraysInstancedANGLEProc>(GetGLCoreProcAddress("glDrawArraysInstancedANGLE"));
  if (!fn.glDrawArraysInstancedANGLEFn)
    fn.glDrawArraysInstancedANGLEFn = reinterpret_cast<glDrawArraysInstancedANGLEProc>(GetGLCoreProcAddress("glDrawArraysInstancedARB"));
  fn.glDrawElementsInstancedANGLEFn = reinterpret_cast<glDrawElementsInstancedANGLEProc>(GetGLCoreProcAddress("glDrawElementsInstancedANGLE"));
  if (!fn.glDrawElementsInstancedANGLEFn)
    fn.glDrawElementsInstancedANGLEFn = reinterpret_cast<glDrawElementsInstancedANGLEProc>(GetGLCoreProcAddress("glDrawElementsInstancedARB"));
  fn.glVertexAttribDivisorANGLEFn = reinterpret_cast<glVertexAttribDivisorANGLEProc>(GetGLCoreProcAddress("glVertexAttribDivisorANGLE"));
  if (!fn.glVertexAttribDivisorANGLEFn)
    fn.glVertexAttribDivisorANGLEFn = reinterpret_cast<glVertexAttribDivisorANGLEProc>(GetGLCoreProcAddress("glVertexAttribDivisorARB"));
  fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLCoreProcAddress("glGenVertexArraysOES"));
  if (!fn.glGenVertexArraysOESFn)
    fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLCoreProcAddress("glGenVertexArraysAPPLE"));
  if (!fn.glGenVertexArraysOESFn)
    fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLCoreProcAddress("glGenVertexArrays"));
  fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLCoreProcAddress("glDeleteVertexArraysOES"));
  if (!fn.glDeleteVertexArraysOESFn)
    fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLCoreProcAddress("glDeleteVertexArraysAPPLE"));
  if (!fn.glDeleteVertexArraysOESFn)
    fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLCoreProcAddress("glDeleteVertexArrays"));
  fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLCoreProcAddress("glBindVertexArrayOES"));
  if (!fn.glBindVertexArrayOESFn)
    fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLCoreProcAddress("glBindVertexArrayAPPLE"));
  if (!fn.glBindVertexArrayOESFn)
    fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLCoreProcAddress("glBindVertexArray"));
  fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLCoreProcAddress("glIsVertexArrayOES"));
  if (!fn.glIsVertexArrayOESFn)
    fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLCoreProcAddress("glIsVertexArrayAPPLE"));
  if (!fn.glIsVertexArrayOESFn)
    fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLCoreProcAddress("glIsVertexArray"));
  fn.glDiscardFramebufferEXTFn = reinterpret_cast<glDiscardFramebufferEXTProc>(GetGLCoreProcAddress("glDiscardFramebufferEXT"));
}

void DriverGL::InitializeExtensionBindings(
    GLContext* context) {
  DCHECK(context && context->IsCurrent(NULL));
  ext.b_OES_vertex_array_object = context->HasExtension("OES_vertex_array_object");
  if (ext.b_OES_vertex_array_object) {
    fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLProcAddress("glGenVertexArraysOES"));
    if (!fn.glGenVertexArraysOESFn)
      fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLProcAddress("glGenVertexArraysAPPLE"));
    if (!fn.glGenVertexArraysOESFn)
      fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLProcAddress("glGenVertexArrays"));
    fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLProcAddress("glDeleteVertexArraysOES"));
    if (!fn.glDeleteVertexArraysOESFn)
      fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLProcAddress("glDeleteVertexArraysAPPLE"));
    if (!fn.glDeleteVertexArraysOESFn)
      fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLProcAddress("glDeleteVertexArrays"));
    fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLProcAddress("glBindVertexArrayOES"));
    if (!fn.glBindVertexArrayOESFn)
      fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLProcAddress("glBindVertexArrayAPPLE"));
    if (!fn.glBindVertexArrayOESFn)
      fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLProcAddress("glBindVertexArray"));
    fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLProcAddress("glIsVertexArrayOES"));
    if (!fn.glIsVertexArrayOESFn)
      fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLProcAddress("glIsVertexArrayAPPLE"));
    if (!fn.glIsVertexArrayOESFn)
      fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLProcAddress("glIsVertexArray"));
  }
  ext.b_GL_NV_fence = context->HasExtension("GL_NV_fence");
  if (ext.b_GL_NV_fence) {
    fn.glGenFencesNVFn = reinterpret_cast<glGenFencesNVProc>(GetGLProcAddress("glGenFencesNV"));
    fn.glDeleteFencesNVFn = reinterpret_cast<glDeleteFencesNVProc>(GetGLProcAddress("glDeleteFencesNV"));
    fn.glSetFenceNVFn = reinterpret_cast<glSetFenceNVProc>(GetGLProcAddress("glSetFenceNV"));
    fn.glTestFenceNVFn = reinterpret_cast<glTestFenceNVProc>(GetGLProcAddress("glTestFenceNV"));
    fn.glFinishFenceNVFn = reinterpret_cast<glFinishFenceNVProc>(GetGLProcAddress("glFinishFenceNV"));
    fn.glIsFenceNVFn = reinterpret_cast<glIsFenceNVProc>(GetGLProcAddress("glIsFenceNV"));
    fn.glGetFenceivNVFn = reinterpret_cast<glGetFenceivNVProc>(GetGLProcAddress("glGetFenceivNV"));
  }
  ext.b_OES_get_program_binary = context->HasExtension("OES_get_program_binary");
  if (ext.b_OES_get_program_binary) {
    fn.glGetProgramBinaryFn = reinterpret_cast<glGetProgramBinaryProc>(GetGLProcAddress("glGetProgramBinary"));
    if (!fn.glGetProgramBinaryFn)
      fn.glGetProgramBinaryFn = reinterpret_cast<glGetProgramBinaryProc>(GetGLProcAddress("glGetProgramBinaryOES"));
    fn.glProgramBinaryFn = reinterpret_cast<glProgramBinaryProc>(GetGLProcAddress("glProgramBinary"));
    if (!fn.glProgramBinaryFn)
      fn.glProgramBinaryFn = reinterpret_cast<glProgramBinaryProc>(GetGLProcAddress("glProgramBinaryOES"));
  }
  ext.b_ARB_vertex_array_object = context->HasExtension("ARB_vertex_array_object");
  if (ext.b_ARB_vertex_array_object) {
    fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLProcAddress("glGenVertexArraysOES"));
    if (!fn.glGenVertexArraysOESFn)
      fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLProcAddress("glGenVertexArraysAPPLE"));
    if (!fn.glGenVertexArraysOESFn)
      fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLProcAddress("glGenVertexArrays"));
    fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLProcAddress("glDeleteVertexArraysOES"));
    if (!fn.glDeleteVertexArraysOESFn)
      fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLProcAddress("glDeleteVertexArraysAPPLE"));
    if (!fn.glDeleteVertexArraysOESFn)
      fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLProcAddress("glDeleteVertexArrays"));
    fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLProcAddress("glBindVertexArrayOES"));
    if (!fn.glBindVertexArrayOESFn)
      fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLProcAddress("glBindVertexArrayAPPLE"));
    if (!fn.glBindVertexArrayOESFn)
      fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLProcAddress("glBindVertexArray"));
    fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLProcAddress("glIsVertexArrayOES"));
    if (!fn.glIsVertexArrayOESFn)
      fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLProcAddress("glIsVertexArrayAPPLE"));
    if (!fn.glIsVertexArrayOESFn)
      fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLProcAddress("glIsVertexArray"));
  }
  ext.b_GL_APPLE_vertex_array_object = context->HasExtension("GL_APPLE_vertex_array_object");
  if (ext.b_GL_APPLE_vertex_array_object) {
    fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLProcAddress("glGenVertexArraysAPPLE"));
    fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLProcAddress("glDeleteVertexArraysAPPLE"));
    fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLProcAddress("glBindVertexArrayAPPLE"));
    fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLProcAddress("glIsVertexArrayAPPLE"));
  }
  ext.b_GL_ANGLE_translated_shader_source = context->HasExtension("GL_ANGLE_translated_shader_source");
  if (ext.b_GL_ANGLE_translated_shader_source) {
    fn.glGetTranslatedShaderSourceANGLEFn = reinterpret_cast<glGetTranslatedShaderSourceANGLEProc>(GetGLProcAddress("glGetTranslatedShaderSourceANGLE"));
  }
  ext.b_ARB_get_program_binary = context->HasExtension("ARB_get_program_binary");
  if (ext.b_ARB_get_program_binary) {
    fn.glGetProgramBinaryFn = reinterpret_cast<glGetProgramBinaryProc>(GetGLProcAddress("glGetProgramBinary"));
    if (!fn.glGetProgramBinaryFn)
      fn.glGetProgramBinaryFn = reinterpret_cast<glGetProgramBinaryProc>(GetGLProcAddress("glGetProgramBinaryOES"));
    fn.glProgramBinaryFn = reinterpret_cast<glProgramBinaryProc>(GetGLProcAddress("glProgramBinary"));
    if (!fn.glProgramBinaryFn)
      fn.glProgramBinaryFn = reinterpret_cast<glProgramBinaryProc>(GetGLProcAddress("glProgramBinaryOES"));
    fn.glProgramParameteriFn = reinterpret_cast<glProgramParameteriProc>(GetGLProcAddress("glProgramParameteri"));
  }
  ext.b_GL_ANGLE_framebuffer_blit = context->HasExtension("GL_ANGLE_framebuffer_blit");
  if (ext.b_GL_ANGLE_framebuffer_blit) {
    fn.glBlitFramebufferANGLEFn = reinterpret_cast<glBlitFramebufferANGLEProc>(GetGLProcAddress("glBlitFramebufferANGLE"));
  }
  ext.b_APPLE_vertex_array_object = context->HasExtension("APPLE_vertex_array_object");
  if (ext.b_APPLE_vertex_array_object) {
    fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLProcAddress("glGenVertexArraysOES"));
    if (!fn.glGenVertexArraysOESFn)
      fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLProcAddress("glGenVertexArraysAPPLE"));
    if (!fn.glGenVertexArraysOESFn)
      fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLProcAddress("glGenVertexArrays"));
    fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLProcAddress("glDeleteVertexArraysOES"));
    if (!fn.glDeleteVertexArraysOESFn)
      fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLProcAddress("glDeleteVertexArraysAPPLE"));
    if (!fn.glDeleteVertexArraysOESFn)
      fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLProcAddress("glDeleteVertexArrays"));
    fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLProcAddress("glBindVertexArrayOES"));
    if (!fn.glBindVertexArrayOESFn)
      fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLProcAddress("glBindVertexArrayAPPLE"));
    if (!fn.glBindVertexArrayOESFn)
      fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLProcAddress("glBindVertexArray"));
    fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLProcAddress("glIsVertexArrayOES"));
    if (!fn.glIsVertexArrayOESFn)
      fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLProcAddress("glIsVertexArrayAPPLE"));
    if (!fn.glIsVertexArrayOESFn)
      fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLProcAddress("glIsVertexArray"));
  }
  ext.b_GL_ANGLE_framebuffer_multisample = context->HasExtension("GL_ANGLE_framebuffer_multisample");
  if (ext.b_GL_ANGLE_framebuffer_multisample) {
    fn.glRenderbufferStorageMultisampleANGLEFn = reinterpret_cast<glRenderbufferStorageMultisampleANGLEProc>(GetGLProcAddress("glRenderbufferStorageMultisampleANGLE"));
  }
  ext.b_GL_ANGLE_instanced_arrays = context->HasExtension("GL_ANGLE_instanced_arrays");
  if (ext.b_GL_ANGLE_instanced_arrays) {
    fn.glDrawArraysInstancedANGLEFn = reinterpret_cast<glDrawArraysInstancedANGLEProc>(GetGLProcAddress("glDrawArraysInstancedANGLE"));
    fn.glDrawElementsInstancedANGLEFn = reinterpret_cast<glDrawElementsInstancedANGLEProc>(GetGLProcAddress("glDrawElementsInstancedANGLE"));
    fn.glVertexAttribDivisorANGLEFn = reinterpret_cast<glVertexAttribDivisorANGLEProc>(GetGLProcAddress("glVertexAttribDivisorANGLE"));
  }
  ext.b_GL_EXT_multisampled_render_to_texture = context->HasExtension("GL_EXT_multisampled_render_to_texture");
  if (ext.b_GL_EXT_multisampled_render_to_texture) {
    fn.glRenderbufferStorageMultisampleEXTFn = reinterpret_cast<glRenderbufferStorageMultisampleEXTProc>(GetGLProcAddress("glRenderbufferStorageMultisampleEXT"));
  }
  ext.b_GL_EXT_framebuffer_multisample = context->HasExtension("GL_EXT_framebuffer_multisample");
  if (ext.b_GL_EXT_framebuffer_multisample) {
    fn.glRenderbufferStorageMultisampleEXTFn = reinterpret_cast<glRenderbufferStorageMultisampleEXTProc>(GetGLProcAddress("glRenderbufferStorageMultisampleEXT"));
  }
  ext.b_GL_EXT_robustness = context->HasExtension("GL_EXT_robustness");
  if (ext.b_GL_EXT_robustness) {
    fn.glGetGraphicsResetStatusARBFn = reinterpret_cast<glGetGraphicsResetStatusARBProc>(GetGLProcAddress("glGetGraphicsResetStatusEXT"));
  }
  ext.b_GL_EXT_occlusion_query_boolean = context->HasExtension("GL_EXT_occlusion_query_boolean");
  if (ext.b_GL_EXT_occlusion_query_boolean) {
    fn.glBeginQueryARBFn = reinterpret_cast<glBeginQueryARBProc>(GetGLProcAddress("glBeginQueryEXT"));
    fn.glDeleteQueriesARBFn = reinterpret_cast<glDeleteQueriesARBProc>(GetGLProcAddress("glDeleteQueriesEXT"));
    fn.glEndQueryARBFn = reinterpret_cast<glEndQueryARBProc>(GetGLProcAddress("glEndQueryEXT"));
    fn.glGenQueriesARBFn = reinterpret_cast<glGenQueriesARBProc>(GetGLProcAddress("glGenQueriesEXT"));
    fn.glGetQueryivARBFn = reinterpret_cast<glGetQueryivARBProc>(GetGLProcAddress("glGetQueryivEXT"));
    fn.glGetQueryObjectuivARBFn = reinterpret_cast<glGetQueryObjectuivARBProc>(GetGLProcAddress("glGetQueryObjectuivEXT"));
    fn.glIsQueryARBFn = reinterpret_cast<glIsQueryARBProc>(GetGLProcAddress("glIsQueryEXT"));
  }
  ext.b_GL_EXT_framebuffer_object = context->HasExtension("GL_EXT_framebuffer_object");
  if (ext.b_GL_EXT_framebuffer_object) {
    fn.glBindFramebufferEXTFn = reinterpret_cast<glBindFramebufferEXTProc>(GetGLProcAddress("glBindFramebufferEXT"));
    fn.glBindRenderbufferEXTFn = reinterpret_cast<glBindRenderbufferEXTProc>(GetGLProcAddress("glBindRenderbufferEXT"));
    fn.glCheckFramebufferStatusEXTFn = reinterpret_cast<glCheckFramebufferStatusEXTProc>(GetGLProcAddress("glCheckFramebufferStatusEXT"));
    fn.glDeleteFramebuffersEXTFn = reinterpret_cast<glDeleteFramebuffersEXTProc>(GetGLProcAddress("glDeleteFramebuffersEXT"));
    fn.glDeleteRenderbuffersEXTFn = reinterpret_cast<glDeleteRenderbuffersEXTProc>(GetGLProcAddress("glDeleteRenderbuffersEXT"));
    fn.glFramebufferRenderbufferEXTFn = reinterpret_cast<glFramebufferRenderbufferEXTProc>(GetGLProcAddress("glFramebufferRenderbufferEXT"));
    fn.glFramebufferTexture2DEXTFn = reinterpret_cast<glFramebufferTexture2DEXTProc>(GetGLProcAddress("glFramebufferTexture2DEXT"));
    fn.glGenerateMipmapEXTFn = reinterpret_cast<glGenerateMipmapEXTProc>(GetGLProcAddress("glGenerateMipmapEXT"));
    fn.glGenFramebuffersEXTFn = reinterpret_cast<glGenFramebuffersEXTProc>(GetGLProcAddress("glGenFramebuffersEXT"));
    fn.glGenRenderbuffersEXTFn = reinterpret_cast<glGenRenderbuffersEXTProc>(GetGLProcAddress("glGenRenderbuffersEXT"));
    fn.glGetFramebufferAttachmentParameterivEXTFn = reinterpret_cast<glGetFramebufferAttachmentParameterivEXTProc>(GetGLProcAddress("glGetFramebufferAttachmentParameterivEXT"));
    fn.glGetRenderbufferParameterivEXTFn = reinterpret_cast<glGetRenderbufferParameterivEXTProc>(GetGLProcAddress("glGetRenderbufferParameterivEXT"));
    fn.glIsFramebufferEXTFn = reinterpret_cast<glIsFramebufferEXTProc>(GetGLProcAddress("glIsFramebufferEXT"));
    fn.glIsRenderbufferEXTFn = reinterpret_cast<glIsRenderbufferEXTProc>(GetGLProcAddress("glIsRenderbufferEXT"));
    fn.glRenderbufferStorageEXTFn = reinterpret_cast<glRenderbufferStorageEXTProc>(GetGLProcAddress("glRenderbufferStorageEXT"));
  }
  ext.b_GL_EXT_discard_framebuffer = context->HasExtension("GL_EXT_discard_framebuffer");
  if (ext.b_GL_EXT_discard_framebuffer) {
    fn.glDiscardFramebufferEXTFn = reinterpret_cast<glDiscardFramebufferEXTProc>(GetGLProcAddress("glDiscardFramebufferEXT"));
  }
  ext.b_GL_EXT_framebuffer_blit = context->HasExtension("GL_EXT_framebuffer_blit");
  if (ext.b_GL_EXT_framebuffer_blit) {
    fn.glBlitFramebufferEXTFn = reinterpret_cast<glBlitFramebufferEXTProc>(GetGLProcAddress("glBlitFramebufferEXT"));
  }
  ext.b_GL_EXT_texture_storage = context->HasExtension("GL_EXT_texture_storage");
  if (ext.b_GL_EXT_texture_storage) {
    fn.glTexStorage2DEXTFn = reinterpret_cast<glTexStorage2DEXTProc>(GetGLProcAddress("glTexStorage2DEXT"));
  }
  ext.b_GL_OES_mapbuffer = context->HasExtension("GL_OES_mapbuffer");
  if (ext.b_GL_OES_mapbuffer) {
    fn.glMapBufferFn = reinterpret_cast<glMapBufferProc>(GetGLProcAddress("glMapBufferOES"));
    fn.glUnmapBufferFn = reinterpret_cast<glUnmapBufferProc>(GetGLProcAddress("glUnmapBufferOES"));
  }
  ext.b_GL_OES_get_program_binary = context->HasExtension("GL_OES_get_program_binary");
  if (ext.b_GL_OES_get_program_binary) {
    fn.glGetProgramBinaryFn = reinterpret_cast<glGetProgramBinaryProc>(GetGLProcAddress("glGetProgramBinaryOES"));
    fn.glProgramBinaryFn = reinterpret_cast<glProgramBinaryProc>(GetGLProcAddress("glProgramBinaryOES"));
  }
  ext.b_GL_OES_EGL_image = context->HasExtension("GL_OES_EGL_image");
  if (ext.b_GL_OES_EGL_image) {
    fn.glEGLImageTargetTexture2DOESFn = reinterpret_cast<glEGLImageTargetTexture2DOESProc>(GetGLProcAddress("glEGLImageTargetTexture2DOES"));
    fn.glEGLImageTargetRenderbufferStorageOESFn = reinterpret_cast<glEGLImageTargetRenderbufferStorageOESProc>(GetGLProcAddress("glEGLImageTargetRenderbufferStorageOES"));
  }
  ext.b_GL_OES_vertex_array_object = context->HasExtension("GL_OES_vertex_array_object");
  if (ext.b_GL_OES_vertex_array_object) {
    fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLProcAddress("glGenVertexArraysOES"));
    fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLProcAddress("glDeleteVertexArraysOES"));
    fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLProcAddress("glBindVertexArrayOES"));
    fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLProcAddress("glIsVertexArrayOES"));
  }
  ext.b_GL_ARB_instanced_arrays = context->HasExtension("GL_ARB_instanced_arrays");
  if (ext.b_GL_ARB_instanced_arrays) {
    fn.glVertexAttribDivisorANGLEFn = reinterpret_cast<glVertexAttribDivisorANGLEProc>(GetGLProcAddress("glVertexAttribDivisorARB"));
  }
  ext.b_GL_ARB_blend_func_extended = context->HasExtension("GL_ARB_blend_func_extended");
  if (ext.b_GL_ARB_blend_func_extended) {
    fn.glBindFragDataLocationIndexedFn = reinterpret_cast<glBindFragDataLocationIndexedProc>(GetGLProcAddress("glBindFragDataLocationIndexed"));
  }
  ext.b_GL_ARB_sync = context->HasExtension("GL_ARB_sync");
  if (ext.b_GL_ARB_sync) {
    fn.glFenceSyncFn = reinterpret_cast<glFenceSyncProc>(GetGLProcAddress("glFenceSync"));
    fn.glDeleteSyncFn = reinterpret_cast<glDeleteSyncProc>(GetGLProcAddress("glDeleteSync"));
    fn.glGetSyncivFn = reinterpret_cast<glGetSyncivProc>(GetGLProcAddress("glGetSynciv"));
  }
  ext.b_GL_ARB_robustness = context->HasExtension("GL_ARB_robustness");
  if (ext.b_GL_ARB_robustness) {
    fn.glGetGraphicsResetStatusARBFn = reinterpret_cast<glGetGraphicsResetStatusARBProc>(GetGLProcAddress("glGetGraphicsResetStatusARB"));
  }
  ext.b_GL_ARB_timer_query = context->HasExtension("GL_ARB_timer_query");
  if (ext.b_GL_ARB_timer_query) {
    fn.glGetQueryObjecti64vFn = reinterpret_cast<glGetQueryObjecti64vProc>(GetGLProcAddress("glGetQueryObjecti64v"));
    fn.glGetQueryObjectui64vFn = reinterpret_cast<glGetQueryObjectui64vProc>(GetGLProcAddress("glGetQueryObjectui64v"));
    fn.glQueryCounterFn = reinterpret_cast<glQueryCounterProc>(GetGLProcAddress("glQueryCounter"));
  }
  ext.b_GL_ARB_vertex_array_object = context->HasExtension("GL_ARB_vertex_array_object");
  if (ext.b_GL_ARB_vertex_array_object) {
    fn.glGenVertexArraysOESFn = reinterpret_cast<glGenVertexArraysOESProc>(GetGLProcAddress("glGenVertexArrays"));
    fn.glDeleteVertexArraysOESFn = reinterpret_cast<glDeleteVertexArraysOESProc>(GetGLProcAddress("glDeleteVertexArrays"));
    fn.glBindVertexArrayOESFn = reinterpret_cast<glBindVertexArrayOESProc>(GetGLProcAddress("glBindVertexArray"));
    fn.glIsVertexArrayOESFn = reinterpret_cast<glIsVertexArrayOESProc>(GetGLProcAddress("glIsVertexArray"));
  }
  ext.b_GL_ARB_draw_instanced = context->HasExtension("GL_ARB_draw_instanced");
  if (ext.b_GL_ARB_draw_instanced) {
    fn.glDrawArraysInstancedANGLEFn = reinterpret_cast<glDrawArraysInstancedANGLEProc>(GetGLProcAddress("glDrawArraysInstancedARB"));
    fn.glDrawElementsInstancedANGLEFn = reinterpret_cast<glDrawElementsInstancedANGLEProc>(GetGLProcAddress("glDrawElementsInstancedARB"));
  }
  ext.b_GL_ARB_vertex_buffer_object = context->HasExtension("GL_ARB_vertex_buffer_object");
  if (ext.b_GL_ARB_vertex_buffer_object) {
    fn.glDeleteBuffersARBFn = reinterpret_cast<glDeleteBuffersARBProc>(GetGLProcAddress("glDeleteBuffersARB"));
    fn.glGenBuffersARBFn = reinterpret_cast<glGenBuffersARBProc>(GetGLProcAddress("glGenBuffersARB"));
  }
  ext.b_GL_ARB_framebuffer_object = context->HasExtension("GL_ARB_framebuffer_object");
  if (ext.b_GL_ARB_framebuffer_object) {
    fn.glBindFramebufferEXTFn = reinterpret_cast<glBindFramebufferEXTProc>(GetGLProcAddress("glBindFramebuffer"));
    fn.glBindRenderbufferEXTFn = reinterpret_cast<glBindRenderbufferEXTProc>(GetGLProcAddress("glBindRenderbuffer"));
    fn.glBlitFramebufferEXTFn = reinterpret_cast<glBlitFramebufferEXTProc>(GetGLProcAddress("glBlitFramebuffer"));
    fn.glBlitFramebufferANGLEFn = reinterpret_cast<glBlitFramebufferANGLEProc>(GetGLProcAddress("glBlitFramebuffer"));
    fn.glCheckFramebufferStatusEXTFn = reinterpret_cast<glCheckFramebufferStatusEXTProc>(GetGLProcAddress("glCheckFramebufferStatus"));
    fn.glDeleteFramebuffersEXTFn = reinterpret_cast<glDeleteFramebuffersEXTProc>(GetGLProcAddress("glDeleteFramebuffers"));
    fn.glDeleteRenderbuffersEXTFn = reinterpret_cast<glDeleteRenderbuffersEXTProc>(GetGLProcAddress("glDeleteRenderbuffers"));
    fn.glFramebufferRenderbufferEXTFn = reinterpret_cast<glFramebufferRenderbufferEXTProc>(GetGLProcAddress("glFramebufferRenderbuffer"));
    fn.glFramebufferTexture2DEXTFn = reinterpret_cast<glFramebufferTexture2DEXTProc>(GetGLProcAddress("glFramebufferTexture2D"));
    fn.glGenerateMipmapEXTFn = reinterpret_cast<glGenerateMipmapEXTProc>(GetGLProcAddress("glGenerateMipmap"));
    fn.glGenFramebuffersEXTFn = reinterpret_cast<glGenFramebuffersEXTProc>(GetGLProcAddress("glGenFramebuffers"));
    fn.glGenRenderbuffersEXTFn = reinterpret_cast<glGenRenderbuffersEXTProc>(GetGLProcAddress("glGenRenderbuffers"));
    fn.glGetFramebufferAttachmentParameterivEXTFn = reinterpret_cast<glGetFramebufferAttachmentParameterivEXTProc>(GetGLProcAddress("glGetFramebufferAttachmentParameteriv"));
    fn.glGetRenderbufferParameterivEXTFn = reinterpret_cast<glGetRenderbufferParameterivEXTProc>(GetGLProcAddress("glGetRenderbufferParameteriv"));
    fn.glIsFramebufferEXTFn = reinterpret_cast<glIsFramebufferEXTProc>(GetGLProcAddress("glIsFramebuffer"));
    fn.glIsRenderbufferEXTFn = reinterpret_cast<glIsRenderbufferEXTProc>(GetGLProcAddress("glIsRenderbuffer"));
    fn.glRenderbufferStorageMultisampleEXTFn = reinterpret_cast<glRenderbufferStorageMultisampleEXTProc>(GetGLProcAddress("glRenderbufferStorageMultisample"));
    fn.glRenderbufferStorageMultisampleANGLEFn = reinterpret_cast<glRenderbufferStorageMultisampleANGLEProc>(GetGLProcAddress("glRenderbufferStorageMultisample"));
    fn.glRenderbufferStorageEXTFn = reinterpret_cast<glRenderbufferStorageEXTProc>(GetGLProcAddress("glRenderbufferStorage"));
  }
  ext.b_GL_ARB_occlusion_query = context->HasExtension("GL_ARB_occlusion_query");
  if (ext.b_GL_ARB_occlusion_query) {
    fn.glBeginQueryARBFn = reinterpret_cast<glBeginQueryARBProc>(GetGLProcAddress("glBeginQueryARB"));
    fn.glDeleteQueriesARBFn = reinterpret_cast<glDeleteQueriesARBProc>(GetGLProcAddress("glDeleteQueriesARB"));
    fn.glEndQueryARBFn = reinterpret_cast<glEndQueryARBProc>(GetGLProcAddress("glEndQueryARB"));
    fn.glGenQueriesARBFn = reinterpret_cast<glGenQueriesARBProc>(GetGLProcAddress("glGenQueriesARB"));
    fn.glGetQueryivARBFn = reinterpret_cast<glGetQueryivARBProc>(GetGLProcAddress("glGetQueryivARB"));
    fn.glGetQueryObjectuivARBFn = reinterpret_cast<glGetQueryObjectuivARBProc>(GetGLProcAddress("glGetQueryObjectuivARB"));
    fn.glIsQueryARBFn = reinterpret_cast<glIsQueryARBProc>(GetGLProcAddress("glIsQueryARB"));
  }
  ext.b_GL_ARB_get_program_binary = context->HasExtension("GL_ARB_get_program_binary");
  if (ext.b_GL_ARB_get_program_binary) {
    fn.glGetProgramBinaryFn = reinterpret_cast<glGetProgramBinaryProc>(GetGLProcAddress("glGetProgramBinary"));
    fn.glProgramBinaryFn = reinterpret_cast<glProgramBinaryProc>(GetGLProcAddress("glProgramBinary"));
    fn.glProgramParameteriFn = reinterpret_cast<glProgramParameteriProc>(GetGLProcAddress("glProgramParameteri"));
  }
  ext.b_GL_ARB_ES2_compatibility = context->HasExtension("GL_ARB_ES2_compatibility");
  if (ext.b_GL_ARB_ES2_compatibility) {
    fn.glClearDepthfFn = reinterpret_cast<glClearDepthfProc>(GetGLProcAddress("glClearDepthf"));
    fn.glDepthRangefFn = reinterpret_cast<glDepthRangefProc>(GetGLProcAddress("glDepthRangef"));
    fn.glGetShaderPrecisionFormatFn = reinterpret_cast<glGetShaderPrecisionFormatProc>(GetGLProcAddress("glGetShaderPrecisionFormat"));
    fn.glReleaseShaderCompilerFn = reinterpret_cast<glReleaseShaderCompilerProc>(GetGLProcAddress("glReleaseShaderCompiler"));
    fn.glShaderBinaryFn = reinterpret_cast<glShaderBinaryProc>(GetGLProcAddress("glShaderBinary"));
  }
  ext.b_GL_ARB_draw_buffers = context->HasExtension("GL_ARB_draw_buffers");
  if (ext.b_GL_ARB_draw_buffers) {
    fn.glDrawBuffersARBFn = reinterpret_cast<glDrawBuffersARBProc>(GetGLProcAddress("glDrawBuffersARB"));
  }
  if (g_debugBindingsInitialized)
    UpdateDebugExtensionBindings();
}

extern "C" {

static void GL_BINDING_CALL Debug_glActiveTexture(GLenum texture) {
  GL_SERVICE_LOG("glActiveTexture" << "("  << GLES2Util::GetStringEnum(texture) << ")");
  g_driver_gl.debug_fn.glActiveTextureFn(texture);
}

static void GL_BINDING_CALL Debug_glAttachShader(GLuint program, GLuint shader) {
  GL_SERVICE_LOG("glAttachShader" << "("  << program << ", " << shader << ")");
  g_driver_gl.debug_fn.glAttachShaderFn(program, shader);
}

static void GL_BINDING_CALL Debug_glBeginQuery(GLenum target, GLuint id) {
  GL_SERVICE_LOG("glBeginQuery" << "("  << GLES2Util::GetStringEnum(target) << ", " << id << ")");
  g_driver_gl.debug_fn.glBeginQueryFn(target, id);
}

static void GL_BINDING_CALL Debug_glBeginQueryARB(GLenum target, GLuint id) {
  GL_SERVICE_LOG("glBeginQueryARB" << "("  << GLES2Util::GetStringEnum(target) << ", " << id << ")");
  g_driver_gl.debug_fn.glBeginQueryARBFn(target, id);
}

static void GL_BINDING_CALL Debug_glBindAttribLocation(GLuint program, GLuint index, const char* name) {
  GL_SERVICE_LOG("glBindAttribLocation" << "("  << program << ", " << index << ", " << name << ")");
  g_driver_gl.debug_fn.glBindAttribLocationFn(program, index, name);
}

static void GL_BINDING_CALL Debug_glBindBuffer(GLenum target, GLuint buffer) {
  GL_SERVICE_LOG("glBindBuffer" << "("  << GLES2Util::GetStringEnum(target) << ", " << buffer << ")");
  g_driver_gl.debug_fn.glBindBufferFn(target, buffer);
}

static void GL_BINDING_CALL Debug_glBindFragDataLocation(GLuint program, GLuint colorNumber, const char* name) {
  GL_SERVICE_LOG("glBindFragDataLocation" << "("  << program << ", " << colorNumber << ", " << name << ")");
  g_driver_gl.debug_fn.glBindFragDataLocationFn(program, colorNumber, name);
}

static void GL_BINDING_CALL Debug_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const char* name) {
  GL_SERVICE_LOG("glBindFragDataLocationIndexed" << "("  << program << ", " << colorNumber << ", " << index << ", " << name << ")");
  g_driver_gl.debug_fn.glBindFragDataLocationIndexedFn(program, colorNumber, index, name);
}

static void GL_BINDING_CALL Debug_glBindFramebufferEXT(GLenum target, GLuint framebuffer) {
  GL_SERVICE_LOG("glBindFramebufferEXT" << "("  << GLES2Util::GetStringEnum(target) << ", " << framebuffer << ")");
  g_driver_gl.debug_fn.glBindFramebufferEXTFn(target, framebuffer);
}

static void GL_BINDING_CALL Debug_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer) {
  GL_SERVICE_LOG("glBindRenderbufferEXT" << "("  << GLES2Util::GetStringEnum(target) << ", " << renderbuffer << ")");
  g_driver_gl.debug_fn.glBindRenderbufferEXTFn(target, renderbuffer);
}

static void GL_BINDING_CALL Debug_glBindTexture(GLenum target, GLuint texture) {
  GL_SERVICE_LOG("glBindTexture" << "("  << GLES2Util::GetStringEnum(target) << ", " << texture << ")");
  g_driver_gl.debug_fn.glBindTextureFn(target, texture);
}

static void GL_BINDING_CALL Debug_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {
  GL_SERVICE_LOG("glBlendColor" << "("  << red << ", " << green << ", " << blue << ", " << alpha << ")");
  g_driver_gl.debug_fn.glBlendColorFn(red, green, blue, alpha);
}

static void GL_BINDING_CALL Debug_glBlendEquation( GLenum mode ) {
  GL_SERVICE_LOG("glBlendEquation" << "("  <<  GLES2Util::GetStringEnum(mode)  << ")");
  g_driver_gl.debug_fn.glBlendEquationFn( mode );
}

static void GL_BINDING_CALL Debug_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
  GL_SERVICE_LOG("glBlendEquationSeparate" << "("  << GLES2Util::GetStringEnum(modeRGB) << ", " << GLES2Util::GetStringEnum(modeAlpha) << ")");
  g_driver_gl.debug_fn.glBlendEquationSeparateFn(modeRGB, modeAlpha);
}

static void GL_BINDING_CALL Debug_glBlendFunc(GLenum sfactor, GLenum dfactor) {
  GL_SERVICE_LOG("glBlendFunc" << "("  << GLES2Util::GetStringEnum(sfactor) << ", " << GLES2Util::GetStringEnum(dfactor) << ")");
  g_driver_gl.debug_fn.glBlendFuncFn(sfactor, dfactor);
}

static void GL_BINDING_CALL Debug_glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  GL_SERVICE_LOG("glBlendFuncSeparate" << "("  << GLES2Util::GetStringEnum(srcRGB) << ", " << GLES2Util::GetStringEnum(dstRGB) << ", " << GLES2Util::GetStringEnum(srcAlpha) << ", " << GLES2Util::GetStringEnum(dstAlpha) << ")");
  g_driver_gl.debug_fn.glBlendFuncSeparateFn(srcRGB, dstRGB, srcAlpha, dstAlpha);
}

static void GL_BINDING_CALL Debug_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  GL_SERVICE_LOG("glBlitFramebufferEXT" << "("  << srcX0 << ", " << srcY0 << ", " << srcX1 << ", " << srcY1 << ", " << dstX0 << ", " << dstY0 << ", " << dstX1 << ", " << dstY1 << ", " << mask << ", " << GLES2Util::GetStringEnum(filter) << ")");
  g_driver_gl.debug_fn.glBlitFramebufferEXTFn(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

static void GL_BINDING_CALL Debug_glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  GL_SERVICE_LOG("glBlitFramebufferANGLE" << "("  << srcX0 << ", " << srcY0 << ", " << srcX1 << ", " << srcY1 << ", " << dstX0 << ", " << dstY0 << ", " << dstX1 << ", " << dstY1 << ", " << mask << ", " << GLES2Util::GetStringEnum(filter) << ")");
  g_driver_gl.debug_fn.glBlitFramebufferANGLEFn(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

static void GL_BINDING_CALL Debug_glBufferData(GLenum target, GLsizei size, const void* data, GLenum usage) {
  GL_SERVICE_LOG("glBufferData" << "("  << GLES2Util::GetStringEnum(target) << ", " << size << ", " << static_cast<const void*>(data) << ", " << GLES2Util::GetStringEnum(usage) << ")");
  g_driver_gl.debug_fn.glBufferDataFn(target, size, data, usage);
}

static void GL_BINDING_CALL Debug_glBufferSubData(GLenum target, GLint offset, GLsizei size, const void* data) {
  GL_SERVICE_LOG("glBufferSubData" << "("  << GLES2Util::GetStringEnum(target) << ", " << offset << ", " << size << ", " << static_cast<const void*>(data) << ")");
  g_driver_gl.debug_fn.glBufferSubDataFn(target, offset, size, data);
}

static GLenum GL_BINDING_CALL Debug_glCheckFramebufferStatusEXT(GLenum target) {
  GL_SERVICE_LOG("glCheckFramebufferStatusEXT" << "("  << GLES2Util::GetStringEnum(target) << ")");
  GLenum result = g_driver_gl.debug_fn.glCheckFramebufferStatusEXTFn(target);

  GL_SERVICE_LOG("GL_RESULT: " << GLES2Util::GetStringEnum(result));

  return result;
}

static void GL_BINDING_CALL Debug_glClear(GLbitfield mask) {
  GL_SERVICE_LOG("glClear" << "("  << mask << ")");
  g_driver_gl.debug_fn.glClearFn(mask);
}

static void GL_BINDING_CALL Debug_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {
  GL_SERVICE_LOG("glClearColor" << "("  << red << ", " << green << ", " << blue << ", " << alpha << ")");
  g_driver_gl.debug_fn.glClearColorFn(red, green, blue, alpha);
}

static void GL_BINDING_CALL Debug_glClearDepth(GLclampd depth) {
  GL_SERVICE_LOG("glClearDepth" << "("  << depth << ")");
  g_driver_gl.debug_fn.glClearDepthFn(depth);
}

static void GL_BINDING_CALL Debug_glClearDepthf(GLclampf depth) {
  GL_SERVICE_LOG("glClearDepthf" << "("  << depth << ")");
  g_driver_gl.debug_fn.glClearDepthfFn(depth);
}

static void GL_BINDING_CALL Debug_glClearStencil(GLint s) {
  GL_SERVICE_LOG("glClearStencil" << "("  << s << ")");
  g_driver_gl.debug_fn.glClearStencilFn(s);
}

static void GL_BINDING_CALL Debug_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  GL_SERVICE_LOG("glColorMask" << "("  << GLES2Util::GetStringBool(red) << ", " << GLES2Util::GetStringBool(green) << ", " << GLES2Util::GetStringBool(blue) << ", " << GLES2Util::GetStringBool(alpha) << ")");
  g_driver_gl.debug_fn.glColorMaskFn(red, green, blue, alpha);
}

static void GL_BINDING_CALL Debug_glCompileShader(GLuint shader) {
  GL_SERVICE_LOG("glCompileShader" << "("  << shader << ")");
  g_driver_gl.debug_fn.glCompileShaderFn(shader);
}

static void GL_BINDING_CALL Debug_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data) {
  GL_SERVICE_LOG("glCompressedTexImage2D" << "("  << GLES2Util::GetStringEnum(target) << ", " << level << ", " << GLES2Util::GetStringEnum(internalformat) << ", " << width << ", " << height << ", " << border << ", " << imageSize << ", " << static_cast<const void*>(data) << ")");
  g_driver_gl.debug_fn.glCompressedTexImage2DFn(target, level, internalformat, width, height, border, imageSize, data);
}

static void GL_BINDING_CALL Debug_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data) {
  GL_SERVICE_LOG("glCompressedTexSubImage2D" << "("  << GLES2Util::GetStringEnum(target) << ", " << level << ", " << xoffset << ", " << yoffset << ", " << width << ", " << height << ", " << GLES2Util::GetStringEnum(format) << ", " << imageSize << ", " << static_cast<const void*>(data) << ")");
  g_driver_gl.debug_fn.glCompressedTexSubImage2DFn(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

static void GL_BINDING_CALL Debug_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  GL_SERVICE_LOG("glCopyTexImage2D" << "("  << GLES2Util::GetStringEnum(target) << ", " << level << ", " << GLES2Util::GetStringEnum(internalformat) << ", " << x << ", " << y << ", " << width << ", " << height << ", " << border << ")");
  g_driver_gl.debug_fn.glCopyTexImage2DFn(target, level, internalformat, x, y, width, height, border);
}

static void GL_BINDING_CALL Debug_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("glCopyTexSubImage2D" << "("  << GLES2Util::GetStringEnum(target) << ", " << level << ", " << xoffset << ", " << yoffset << ", " << x << ", " << y << ", " << width << ", " << height << ")");
  g_driver_gl.debug_fn.glCopyTexSubImage2DFn(target, level, xoffset, yoffset, x, y, width, height);
}

static GLuint GL_BINDING_CALL Debug_glCreateProgram(void) {
  GL_SERVICE_LOG("glCreateProgram" << "("  << ")");
  GLuint result = g_driver_gl.debug_fn.glCreateProgramFn();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLuint GL_BINDING_CALL Debug_glCreateShader(GLenum type) {
  GL_SERVICE_LOG("glCreateShader" << "("  << GLES2Util::GetStringEnum(type) << ")");
  GLuint result = g_driver_gl.debug_fn.glCreateShaderFn(type);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glCullFace(GLenum mode) {
  GL_SERVICE_LOG("glCullFace" << "("  << GLES2Util::GetStringEnum(mode) << ")");
  g_driver_gl.debug_fn.glCullFaceFn(mode);
}

static void GL_BINDING_CALL Debug_glDeleteBuffersARB(GLsizei n, const GLuint* buffers) {
  GL_SERVICE_LOG("glDeleteBuffersARB" << "("  << n << ", " << static_cast<const void*>(buffers) << ")");
  g_driver_gl.debug_fn.glDeleteBuffersARBFn(n, buffers);
}

static void GL_BINDING_CALL Debug_glDeleteFramebuffersEXT(GLsizei n, const GLuint* framebuffers) {
  GL_SERVICE_LOG("glDeleteFramebuffersEXT" << "("  << n << ", " << static_cast<const void*>(framebuffers) << ")");
  g_driver_gl.debug_fn.glDeleteFramebuffersEXTFn(n, framebuffers);
}

static void GL_BINDING_CALL Debug_glDeleteProgram(GLuint program) {
  GL_SERVICE_LOG("glDeleteProgram" << "("  << program << ")");
  g_driver_gl.debug_fn.glDeleteProgramFn(program);
}

static void GL_BINDING_CALL Debug_glDeleteQueries(GLsizei n, const GLuint* ids) {
  GL_SERVICE_LOG("glDeleteQueries" << "("  << n << ", " << static_cast<const void*>(ids) << ")");
  g_driver_gl.debug_fn.glDeleteQueriesFn(n, ids);
}

static void GL_BINDING_CALL Debug_glDeleteQueriesARB(GLsizei n, const GLuint* ids) {
  GL_SERVICE_LOG("glDeleteQueriesARB" << "("  << n << ", " << static_cast<const void*>(ids) << ")");
  g_driver_gl.debug_fn.glDeleteQueriesARBFn(n, ids);
}

static void GL_BINDING_CALL Debug_glDeleteRenderbuffersEXT(GLsizei n, const GLuint* renderbuffers) {
  GL_SERVICE_LOG("glDeleteRenderbuffersEXT" << "("  << n << ", " << static_cast<const void*>(renderbuffers) << ")");
  g_driver_gl.debug_fn.glDeleteRenderbuffersEXTFn(n, renderbuffers);
}

static void GL_BINDING_CALL Debug_glDeleteShader(GLuint shader) {
  GL_SERVICE_LOG("glDeleteShader" << "("  << shader << ")");
  g_driver_gl.debug_fn.glDeleteShaderFn(shader);
}

static void GL_BINDING_CALL Debug_glDeleteTextures(GLsizei n, const GLuint* textures) {
  GL_SERVICE_LOG("glDeleteTextures" << "("  << n << ", " << static_cast<const void*>(textures) << ")");
  g_driver_gl.debug_fn.glDeleteTexturesFn(n, textures);
}

static void GL_BINDING_CALL Debug_glDepthFunc(GLenum func) {
  GL_SERVICE_LOG("glDepthFunc" << "("  << GLES2Util::GetStringEnum(func) << ")");
  g_driver_gl.debug_fn.glDepthFuncFn(func);
}

static void GL_BINDING_CALL Debug_glDepthMask(GLboolean flag) {
  GL_SERVICE_LOG("glDepthMask" << "("  << GLES2Util::GetStringBool(flag) << ")");
  g_driver_gl.debug_fn.glDepthMaskFn(flag);
}

static void GL_BINDING_CALL Debug_glDepthRange(GLclampd zNear, GLclampd zFar) {
  GL_SERVICE_LOG("glDepthRange" << "("  << zNear << ", " << zFar << ")");
  g_driver_gl.debug_fn.glDepthRangeFn(zNear, zFar);
}

static void GL_BINDING_CALL Debug_glDepthRangef(GLclampf zNear, GLclampf zFar) {
  GL_SERVICE_LOG("glDepthRangef" << "("  << zNear << ", " << zFar << ")");
  g_driver_gl.debug_fn.glDepthRangefFn(zNear, zFar);
}

static void GL_BINDING_CALL Debug_glDetachShader(GLuint program, GLuint shader) {
  GL_SERVICE_LOG("glDetachShader" << "("  << program << ", " << shader << ")");
  g_driver_gl.debug_fn.glDetachShaderFn(program, shader);
}

static void GL_BINDING_CALL Debug_glDisable(GLenum cap) {
  GL_SERVICE_LOG("glDisable" << "("  << GLES2Util::GetStringEnum(cap) << ")");
  g_driver_gl.debug_fn.glDisableFn(cap);
}

static void GL_BINDING_CALL Debug_glDisableVertexAttribArray(GLuint index) {
  GL_SERVICE_LOG("glDisableVertexAttribArray" << "("  << index << ")");
  g_driver_gl.debug_fn.glDisableVertexAttribArrayFn(index);
}

static void GL_BINDING_CALL Debug_glDrawArrays(GLenum mode, GLint first, GLsizei count) {
  GL_SERVICE_LOG("glDrawArrays" << "("  << GLES2Util::GetStringEnum(mode) << ", " << first << ", " << count << ")");
  g_driver_gl.debug_fn.glDrawArraysFn(mode, first, count);
}

static void GL_BINDING_CALL Debug_glDrawBuffer(GLenum mode) {
  GL_SERVICE_LOG("glDrawBuffer" << "("  << GLES2Util::GetStringEnum(mode) << ")");
  g_driver_gl.debug_fn.glDrawBufferFn(mode);
}

static void GL_BINDING_CALL Debug_glDrawBuffersARB(GLsizei n, const GLenum* bufs) {
  GL_SERVICE_LOG("glDrawBuffersARB" << "("  << n << ", " << static_cast<const void*>(bufs) << ")");
  g_driver_gl.debug_fn.glDrawBuffersARBFn(n, bufs);
}

static void GL_BINDING_CALL Debug_glDrawElements(GLenum mode, GLsizei count, GLenum type, const void* indices) {
  GL_SERVICE_LOG("glDrawElements" << "("  << GLES2Util::GetStringEnum(mode) << ", " << count << ", " << GLES2Util::GetStringEnum(type) << ", " << static_cast<const void*>(indices) << ")");
  g_driver_gl.debug_fn.glDrawElementsFn(mode, count, type, indices);
}

static void GL_BINDING_CALL Debug_glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image) {
  GL_SERVICE_LOG("glEGLImageTargetTexture2DOES" << "("  << GLES2Util::GetStringEnum(target) << ", " << image << ")");
  g_driver_gl.debug_fn.glEGLImageTargetTexture2DOESFn(target, image);
}

static void GL_BINDING_CALL Debug_glEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image) {
  GL_SERVICE_LOG("glEGLImageTargetRenderbufferStorageOES" << "("  << GLES2Util::GetStringEnum(target) << ", " << image << ")");
  g_driver_gl.debug_fn.glEGLImageTargetRenderbufferStorageOESFn(target, image);
}

static void GL_BINDING_CALL Debug_glEnable(GLenum cap) {
  GL_SERVICE_LOG("glEnable" << "("  << GLES2Util::GetStringEnum(cap) << ")");
  g_driver_gl.debug_fn.glEnableFn(cap);
}

static void GL_BINDING_CALL Debug_glEnableVertexAttribArray(GLuint index) {
  GL_SERVICE_LOG("glEnableVertexAttribArray" << "("  << index << ")");
  g_driver_gl.debug_fn.glEnableVertexAttribArrayFn(index);
}

static void GL_BINDING_CALL Debug_glEndQuery(GLenum target) {
  GL_SERVICE_LOG("glEndQuery" << "("  << GLES2Util::GetStringEnum(target) << ")");
  g_driver_gl.debug_fn.glEndQueryFn(target);
}

static void GL_BINDING_CALL Debug_glEndQueryARB(GLenum target) {
  GL_SERVICE_LOG("glEndQueryARB" << "("  << GLES2Util::GetStringEnum(target) << ")");
  g_driver_gl.debug_fn.glEndQueryARBFn(target);
}

static void GL_BINDING_CALL Debug_glFinish(void) {
  GL_SERVICE_LOG("glFinish" << "("  << ")");
  g_driver_gl.debug_fn.glFinishFn();
}

static void GL_BINDING_CALL Debug_glFlush(void) {
  GL_SERVICE_LOG("glFlush" << "("  << ")");
  g_driver_gl.debug_fn.glFlushFn();
}

static void GL_BINDING_CALL Debug_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  GL_SERVICE_LOG("glFramebufferRenderbufferEXT" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(attachment) << ", " << GLES2Util::GetStringEnum(renderbuffertarget) << ", " << renderbuffer << ")");
  g_driver_gl.debug_fn.glFramebufferRenderbufferEXTFn(target, attachment, renderbuffertarget, renderbuffer);
}

static void GL_BINDING_CALL Debug_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  GL_SERVICE_LOG("glFramebufferTexture2DEXT" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(attachment) << ", " << GLES2Util::GetStringEnum(textarget) << ", " << texture << ", " << level << ")");
  g_driver_gl.debug_fn.glFramebufferTexture2DEXTFn(target, attachment, textarget, texture, level);
}

static void GL_BINDING_CALL Debug_glFrontFace(GLenum mode) {
  GL_SERVICE_LOG("glFrontFace" << "("  << GLES2Util::GetStringEnum(mode) << ")");
  g_driver_gl.debug_fn.glFrontFaceFn(mode);
}

static void GL_BINDING_CALL Debug_glGenBuffersARB(GLsizei n, GLuint* buffers) {
  GL_SERVICE_LOG("glGenBuffersARB" << "("  << n << ", " << static_cast<const void*>(buffers) << ")");
  g_driver_gl.debug_fn.glGenBuffersARBFn(n, buffers);
}

static void GL_BINDING_CALL Debug_glGenQueries(GLsizei n, GLuint* ids) {
  GL_SERVICE_LOG("glGenQueries" << "("  << n << ", " << static_cast<const void*>(ids) << ")");
  g_driver_gl.debug_fn.glGenQueriesFn(n, ids);
}

static void GL_BINDING_CALL Debug_glGenQueriesARB(GLsizei n, GLuint* ids) {
  GL_SERVICE_LOG("glGenQueriesARB" << "("  << n << ", " << static_cast<const void*>(ids) << ")");
  g_driver_gl.debug_fn.glGenQueriesARBFn(n, ids);
}

static void GL_BINDING_CALL Debug_glGenerateMipmapEXT(GLenum target) {
  GL_SERVICE_LOG("glGenerateMipmapEXT" << "("  << GLES2Util::GetStringEnum(target) << ")");
  g_driver_gl.debug_fn.glGenerateMipmapEXTFn(target);
}

static void GL_BINDING_CALL Debug_glGenFramebuffersEXT(GLsizei n, GLuint* framebuffers) {
  GL_SERVICE_LOG("glGenFramebuffersEXT" << "("  << n << ", " << static_cast<const void*>(framebuffers) << ")");
  g_driver_gl.debug_fn.glGenFramebuffersEXTFn(n, framebuffers);
}

static void GL_BINDING_CALL Debug_glGenRenderbuffersEXT(GLsizei n, GLuint* renderbuffers) {
  GL_SERVICE_LOG("glGenRenderbuffersEXT" << "("  << n << ", " << static_cast<const void*>(renderbuffers) << ")");
  g_driver_gl.debug_fn.glGenRenderbuffersEXTFn(n, renderbuffers);
}

static void GL_BINDING_CALL Debug_glGenTextures(GLsizei n, GLuint* textures) {
  GL_SERVICE_LOG("glGenTextures" << "("  << n << ", " << static_cast<const void*>(textures) << ")");
  g_driver_gl.debug_fn.glGenTexturesFn(n, textures);
}

static void GL_BINDING_CALL Debug_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name) {
  GL_SERVICE_LOG("glGetActiveAttrib" << "("  << program << ", " << index << ", " << bufsize << ", " << static_cast<const void*>(length) << ", " << static_cast<const void*>(size) << ", " << static_cast<const void*>(type) << ", " << static_cast<const void*>(name) << ")");
  g_driver_gl.debug_fn.glGetActiveAttribFn(program, index, bufsize, length, size, type, name);
}

static void GL_BINDING_CALL Debug_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name) {
  GL_SERVICE_LOG("glGetActiveUniform" << "("  << program << ", " << index << ", " << bufsize << ", " << static_cast<const void*>(length) << ", " << static_cast<const void*>(size) << ", " << static_cast<const void*>(type) << ", " << static_cast<const void*>(name) << ")");
  g_driver_gl.debug_fn.glGetActiveUniformFn(program, index, bufsize, length, size, type, name);
}

static void GL_BINDING_CALL Debug_glGetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders) {
  GL_SERVICE_LOG("glGetAttachedShaders" << "("  << program << ", " << maxcount << ", " << static_cast<const void*>(count) << ", " << static_cast<const void*>(shaders) << ")");
  g_driver_gl.debug_fn.glGetAttachedShadersFn(program, maxcount, count, shaders);
}

static GLint GL_BINDING_CALL Debug_glGetAttribLocation(GLuint program, const char* name) {
  GL_SERVICE_LOG("glGetAttribLocation" << "("  << program << ", " << name << ")");
  GLint result = g_driver_gl.debug_fn.glGetAttribLocationFn(program, name);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glGetBooleanv(GLenum pname, GLboolean* params) {
  GL_SERVICE_LOG("glGetBooleanv" << "("  << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetBooleanvFn(pname, params);
}

static void GL_BINDING_CALL Debug_glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetBufferParameteriv" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetBufferParameterivFn(target, pname, params);
}

static GLenum GL_BINDING_CALL Debug_glGetError(void) {
  GL_SERVICE_LOG("glGetError" << "("  << ")");
  GLenum result = g_driver_gl.debug_fn.glGetErrorFn();

  GL_SERVICE_LOG("GL_RESULT: " << GLES2Util::GetStringError(result));

  return result;
}

static void GL_BINDING_CALL Debug_glGetFloatv(GLenum pname, GLfloat* params) {
  GL_SERVICE_LOG("glGetFloatv" << "("  << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetFloatvFn(pname, params);
}

static void GL_BINDING_CALL Debug_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetFramebufferAttachmentParameterivEXT" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(attachment) << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetFramebufferAttachmentParameterivEXTFn(target, attachment, pname, params);
}

static GLenum GL_BINDING_CALL Debug_glGetGraphicsResetStatusARB(void) {
  GL_SERVICE_LOG("glGetGraphicsResetStatusARB" << "("  << ")");
  GLenum result = g_driver_gl.debug_fn.glGetGraphicsResetStatusARBFn();
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glGetIntegerv(GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetIntegerv" << "("  << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetIntegervFn(pname, params);
}

static void GL_BINDING_CALL Debug_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, GLvoid* binary) {
  GL_SERVICE_LOG("glGetProgramBinary" << "("  << program << ", " << bufSize << ", " << static_cast<const void*>(length) << ", " << static_cast<const void*>(binaryFormat) << ", " << static_cast<const void*>(binary) << ")");
  g_driver_gl.debug_fn.glGetProgramBinaryFn(program, bufSize, length, binaryFormat, binary);
}

static void GL_BINDING_CALL Debug_glGetProgramiv(GLuint program, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetProgramiv" << "("  << program << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetProgramivFn(program, pname, params);
}

static void GL_BINDING_CALL Debug_glGetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei* length, char* infolog) {
  GL_SERVICE_LOG("glGetProgramInfoLog" << "("  << program << ", " << bufsize << ", " << static_cast<const void*>(length) << ", " << static_cast<const void*>(infolog) << ")");
  g_driver_gl.debug_fn.glGetProgramInfoLogFn(program, bufsize, length, infolog);
}

static void GL_BINDING_CALL Debug_glGetQueryiv(GLenum target, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetQueryiv" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetQueryivFn(target, pname, params);
}

static void GL_BINDING_CALL Debug_glGetQueryivARB(GLenum target, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetQueryivARB" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetQueryivARBFn(target, pname, params);
}

static void GL_BINDING_CALL Debug_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64* params) {
  GL_SERVICE_LOG("glGetQueryObjecti64v" << "("  << id << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetQueryObjecti64vFn(id, pname, params);
}

static void GL_BINDING_CALL Debug_glGetQueryObjectiv(GLuint id, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetQueryObjectiv" << "("  << id << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetQueryObjectivFn(id, pname, params);
}

static void GL_BINDING_CALL Debug_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64* params) {
  GL_SERVICE_LOG("glGetQueryObjectui64v" << "("  << id << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetQueryObjectui64vFn(id, pname, params);
}

static void GL_BINDING_CALL Debug_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint* params) {
  GL_SERVICE_LOG("glGetQueryObjectuiv" << "("  << id << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetQueryObjectuivFn(id, pname, params);
}

static void GL_BINDING_CALL Debug_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint* params) {
  GL_SERVICE_LOG("glGetQueryObjectuivARB" << "("  << id << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetQueryObjectuivARBFn(id, pname, params);
}

static void GL_BINDING_CALL Debug_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetRenderbufferParameterivEXT" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetRenderbufferParameterivEXTFn(target, pname, params);
}

static void GL_BINDING_CALL Debug_glGetShaderiv(GLuint shader, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetShaderiv" << "("  << shader << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetShaderivFn(shader, pname, params);
}

static void GL_BINDING_CALL Debug_glGetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog) {
  GL_SERVICE_LOG("glGetShaderInfoLog" << "("  << shader << ", " << bufsize << ", " << static_cast<const void*>(length) << ", " << static_cast<const void*>(infolog) << ")");
  g_driver_gl.debug_fn.glGetShaderInfoLogFn(shader, bufsize, length, infolog);
}

static void GL_BINDING_CALL Debug_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision) {
  GL_SERVICE_LOG("glGetShaderPrecisionFormat" << "("  << GLES2Util::GetStringEnum(shadertype) << ", " << GLES2Util::GetStringEnum(precisiontype) << ", " << static_cast<const void*>(range) << ", " << static_cast<const void*>(precision) << ")");
  g_driver_gl.debug_fn.glGetShaderPrecisionFormatFn(shadertype, precisiontype, range, precision);
}

static void GL_BINDING_CALL Debug_glGetShaderSource(GLuint shader, GLsizei bufsize, GLsizei* length, char* source) {
  GL_SERVICE_LOG("glGetShaderSource" << "("  << shader << ", " << bufsize << ", " << static_cast<const void*>(length) << ", " << static_cast<const void*>(source) << ")");
  g_driver_gl.debug_fn.glGetShaderSourceFn(shader, bufsize, length, source);
}

static const GLubyte* GL_BINDING_CALL Debug_glGetString(GLenum name) {
  GL_SERVICE_LOG("glGetString" << "("  << GLES2Util::GetStringEnum(name) << ")");
  const GLubyte* result = g_driver_gl.debug_fn.glGetStringFn(name);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat* params) {
  GL_SERVICE_LOG("glGetTexLevelParameterfv" << "("  << GLES2Util::GetStringEnum(target) << ", " << level << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetTexLevelParameterfvFn(target, level, pname, params);
}

static void GL_BINDING_CALL Debug_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetTexLevelParameteriv" << "("  << GLES2Util::GetStringEnum(target) << ", " << level << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetTexLevelParameterivFn(target, level, pname, params);
}

static void GL_BINDING_CALL Debug_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat* params) {
  GL_SERVICE_LOG("glGetTexParameterfv" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetTexParameterfvFn(target, pname, params);
}

static void GL_BINDING_CALL Debug_glGetTexParameteriv(GLenum target, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetTexParameteriv" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetTexParameterivFn(target, pname, params);
}

static void GL_BINDING_CALL Debug_glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei* length, char* source) {
  GL_SERVICE_LOG("glGetTranslatedShaderSourceANGLE" << "("  << shader << ", " << bufsize << ", " << static_cast<const void*>(length) << ", " << static_cast<const void*>(source) << ")");
  g_driver_gl.debug_fn.glGetTranslatedShaderSourceANGLEFn(shader, bufsize, length, source);
}

static void GL_BINDING_CALL Debug_glGetUniformfv(GLuint program, GLint location, GLfloat* params) {
  GL_SERVICE_LOG("glGetUniformfv" << "("  << program << ", " << location << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetUniformfvFn(program, location, params);
}

static void GL_BINDING_CALL Debug_glGetUniformiv(GLuint program, GLint location, GLint* params) {
  GL_SERVICE_LOG("glGetUniformiv" << "("  << program << ", " << location << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetUniformivFn(program, location, params);
}

static GLint GL_BINDING_CALL Debug_glGetUniformLocation(GLuint program, const char* name) {
  GL_SERVICE_LOG("glGetUniformLocation" << "("  << program << ", " << name << ")");
  GLint result = g_driver_gl.debug_fn.glGetUniformLocationFn(program, name);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params) {
  GL_SERVICE_LOG("glGetVertexAttribfv" << "("  << index << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetVertexAttribfvFn(index, pname, params);
}

static void GL_BINDING_CALL Debug_glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetVertexAttribiv" << "("  << index << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetVertexAttribivFn(index, pname, params);
}

static void GL_BINDING_CALL Debug_glGetVertexAttribPointerv(GLuint index, GLenum pname, void** pointer) {
  GL_SERVICE_LOG("glGetVertexAttribPointerv" << "("  << index << ", " << GLES2Util::GetStringEnum(pname) << ", " << pointer << ")");
  g_driver_gl.debug_fn.glGetVertexAttribPointervFn(index, pname, pointer);
}

static void GL_BINDING_CALL Debug_glHint(GLenum target, GLenum mode) {
  GL_SERVICE_LOG("glHint" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(mode) << ")");
  g_driver_gl.debug_fn.glHintFn(target, mode);
}

static GLboolean GL_BINDING_CALL Debug_glIsBuffer(GLuint buffer) {
  GL_SERVICE_LOG("glIsBuffer" << "("  << buffer << ")");
  GLboolean result = g_driver_gl.debug_fn.glIsBufferFn(buffer);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_glIsEnabled(GLenum cap) {
  GL_SERVICE_LOG("glIsEnabled" << "("  << GLES2Util::GetStringEnum(cap) << ")");
  GLboolean result = g_driver_gl.debug_fn.glIsEnabledFn(cap);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_glIsFramebufferEXT(GLuint framebuffer) {
  GL_SERVICE_LOG("glIsFramebufferEXT" << "("  << framebuffer << ")");
  GLboolean result = g_driver_gl.debug_fn.glIsFramebufferEXTFn(framebuffer);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_glIsProgram(GLuint program) {
  GL_SERVICE_LOG("glIsProgram" << "("  << program << ")");
  GLboolean result = g_driver_gl.debug_fn.glIsProgramFn(program);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_glIsQueryARB(GLuint query) {
  GL_SERVICE_LOG("glIsQueryARB" << "("  << query << ")");
  GLboolean result = g_driver_gl.debug_fn.glIsQueryARBFn(query);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_glIsRenderbufferEXT(GLuint renderbuffer) {
  GL_SERVICE_LOG("glIsRenderbufferEXT" << "("  << renderbuffer << ")");
  GLboolean result = g_driver_gl.debug_fn.glIsRenderbufferEXTFn(renderbuffer);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_glIsShader(GLuint shader) {
  GL_SERVICE_LOG("glIsShader" << "("  << shader << ")");
  GLboolean result = g_driver_gl.debug_fn.glIsShaderFn(shader);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static GLboolean GL_BINDING_CALL Debug_glIsTexture(GLuint texture) {
  GL_SERVICE_LOG("glIsTexture" << "("  << texture << ")");
  GLboolean result = g_driver_gl.debug_fn.glIsTextureFn(texture);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glLineWidth(GLfloat width) {
  GL_SERVICE_LOG("glLineWidth" << "("  << width << ")");
  g_driver_gl.debug_fn.glLineWidthFn(width);
}

static void GL_BINDING_CALL Debug_glLinkProgram(GLuint program) {
  GL_SERVICE_LOG("glLinkProgram" << "("  << program << ")");
  g_driver_gl.debug_fn.glLinkProgramFn(program);
}

static void* GL_BINDING_CALL Debug_glMapBuffer(GLenum target, GLenum access) {
  GL_SERVICE_LOG("glMapBuffer" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(access) << ")");
  void* result = g_driver_gl.debug_fn.glMapBufferFn(target, access);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glPixelStorei(GLenum pname, GLint param) {
  GL_SERVICE_LOG("glPixelStorei" << "("  << GLES2Util::GetStringEnum(pname) << ", " << param << ")");
  g_driver_gl.debug_fn.glPixelStoreiFn(pname, param);
}

static void GL_BINDING_CALL Debug_glPointParameteri(GLenum pname, GLint param) {
  GL_SERVICE_LOG("glPointParameteri" << "("  << GLES2Util::GetStringEnum(pname) << ", " << param << ")");
  g_driver_gl.debug_fn.glPointParameteriFn(pname, param);
}

static void GL_BINDING_CALL Debug_glPolygonOffset(GLfloat factor, GLfloat units) {
  GL_SERVICE_LOG("glPolygonOffset" << "("  << factor << ", " << units << ")");
  g_driver_gl.debug_fn.glPolygonOffsetFn(factor, units);
}

static void GL_BINDING_CALL Debug_glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid* binary, GLsizei length) {
  GL_SERVICE_LOG("glProgramBinary" << "("  << program << ", " << GLES2Util::GetStringEnum(binaryFormat) << ", " << static_cast<const void*>(binary) << ", " << length << ")");
  g_driver_gl.debug_fn.glProgramBinaryFn(program, binaryFormat, binary, length);
}

static void GL_BINDING_CALL Debug_glProgramParameteri(GLuint program, GLenum pname, GLint value) {
  GL_SERVICE_LOG("glProgramParameteri" << "("  << program << ", " << GLES2Util::GetStringEnum(pname) << ", " << value << ")");
  g_driver_gl.debug_fn.glProgramParameteriFn(program, pname, value);
}

static void GL_BINDING_CALL Debug_glQueryCounter(GLuint id, GLenum target) {
  GL_SERVICE_LOG("glQueryCounter" << "("  << id << ", " << GLES2Util::GetStringEnum(target) << ")");
  g_driver_gl.debug_fn.glQueryCounterFn(id, target);
}

static void GL_BINDING_CALL Debug_glReadBuffer(GLenum src) {
  GL_SERVICE_LOG("glReadBuffer" << "("  << GLES2Util::GetStringEnum(src) << ")");
  g_driver_gl.debug_fn.glReadBufferFn(src);
}

static void GL_BINDING_CALL Debug_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels) {
  GL_SERVICE_LOG("glReadPixels" << "("  << x << ", " << y << ", " << width << ", " << height << ", " << GLES2Util::GetStringEnum(format) << ", " << GLES2Util::GetStringEnum(type) << ", " << static_cast<const void*>(pixels) << ")");
  g_driver_gl.debug_fn.glReadPixelsFn(x, y, width, height, format, type, pixels);
}

static void GL_BINDING_CALL Debug_glReleaseShaderCompiler(void) {
  GL_SERVICE_LOG("glReleaseShaderCompiler" << "("  << ")");
  g_driver_gl.debug_fn.glReleaseShaderCompilerFn();
}

static void GL_BINDING_CALL Debug_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("glRenderbufferStorageMultisampleEXT" << "("  << GLES2Util::GetStringEnum(target) << ", " << samples << ", " << GLES2Util::GetStringEnum(internalformat) << ", " << width << ", " << height << ")");
  g_driver_gl.debug_fn.glRenderbufferStorageMultisampleEXTFn(target, samples, internalformat, width, height);
}

static void GL_BINDING_CALL Debug_glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("glRenderbufferStorageMultisampleANGLE" << "("  << GLES2Util::GetStringEnum(target) << ", " << samples << ", " << GLES2Util::GetStringEnum(internalformat) << ", " << width << ", " << height << ")");
  g_driver_gl.debug_fn.glRenderbufferStorageMultisampleANGLEFn(target, samples, internalformat, width, height);
}

static void GL_BINDING_CALL Debug_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("glRenderbufferStorageEXT" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(internalformat) << ", " << width << ", " << height << ")");
  g_driver_gl.debug_fn.glRenderbufferStorageEXTFn(target, internalformat, width, height);
}

static void GL_BINDING_CALL Debug_glSampleCoverage(GLclampf value, GLboolean invert) {
  GL_SERVICE_LOG("glSampleCoverage" << "("  << value << ", " << GLES2Util::GetStringBool(invert) << ")");
  g_driver_gl.debug_fn.glSampleCoverageFn(value, invert);
}

static void GL_BINDING_CALL Debug_glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("glScissor" << "("  << x << ", " << y << ", " << width << ", " << height << ")");
  g_driver_gl.debug_fn.glScissorFn(x, y, width, height);
}

static void GL_BINDING_CALL Debug_glShaderBinary(GLsizei n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLsizei length) {
  GL_SERVICE_LOG("glShaderBinary" << "("  << n << ", " << static_cast<const void*>(shaders) << ", " << GLES2Util::GetStringEnum(binaryformat) << ", " << static_cast<const void*>(binary) << ", " << length << ")");
  g_driver_gl.debug_fn.glShaderBinaryFn(n, shaders, binaryformat, binary, length);
}

static void GL_BINDING_CALL Debug_glShaderSource(GLuint shader, GLsizei count, const char** str, const GLint* length) {
  GL_SERVICE_LOG("glShaderSource" << "("  << shader << ", " << count << ", " << str << ", " << static_cast<const void*>(length) << ")");
  g_driver_gl.debug_fn.glShaderSourceFn(shader, count, str, length);

  GL_SERVICE_LOG_CODE_BLOCK({
    for (GLsizei ii = 0; ii < count; ++ii) {
      if (str[ii]) {
        if (length && length[ii] >= 0) {
          std::string source(str[ii], length[ii]);
          GL_SERVICE_LOG("  " << ii << ": ---\n" << source << "\n---");
        } else {
          GL_SERVICE_LOG("  " << ii << ": ---\n" << str[ii] << "\n---");
        }
      } else {
        GL_SERVICE_LOG("  " << ii << ": NULL");
      }
    }
  });

}

static void GL_BINDING_CALL Debug_glStencilFunc(GLenum func, GLint ref, GLuint mask) {
  GL_SERVICE_LOG("glStencilFunc" << "("  << GLES2Util::GetStringEnum(func) << ", " << ref << ", " << mask << ")");
  g_driver_gl.debug_fn.glStencilFuncFn(func, ref, mask);
}

static void GL_BINDING_CALL Debug_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {
  GL_SERVICE_LOG("glStencilFuncSeparate" << "("  << GLES2Util::GetStringEnum(face) << ", " << GLES2Util::GetStringEnum(func) << ", " << ref << ", " << mask << ")");
  g_driver_gl.debug_fn.glStencilFuncSeparateFn(face, func, ref, mask);
}

static void GL_BINDING_CALL Debug_glStencilMask(GLuint mask) {
  GL_SERVICE_LOG("glStencilMask" << "("  << mask << ")");
  g_driver_gl.debug_fn.glStencilMaskFn(mask);
}

static void GL_BINDING_CALL Debug_glStencilMaskSeparate(GLenum face, GLuint mask) {
  GL_SERVICE_LOG("glStencilMaskSeparate" << "("  << GLES2Util::GetStringEnum(face) << ", " << mask << ")");
  g_driver_gl.debug_fn.glStencilMaskSeparateFn(face, mask);
}

static void GL_BINDING_CALL Debug_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
  GL_SERVICE_LOG("glStencilOp" << "("  << GLES2Util::GetStringEnum(fail) << ", " << GLES2Util::GetStringEnum(zfail) << ", " << GLES2Util::GetStringEnum(zpass) << ")");
  g_driver_gl.debug_fn.glStencilOpFn(fail, zfail, zpass);
}

static void GL_BINDING_CALL Debug_glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass) {
  GL_SERVICE_LOG("glStencilOpSeparate" << "("  << GLES2Util::GetStringEnum(face) << ", " << GLES2Util::GetStringEnum(fail) << ", " << GLES2Util::GetStringEnum(zfail) << ", " << GLES2Util::GetStringEnum(zpass) << ")");
  g_driver_gl.debug_fn.glStencilOpSeparateFn(face, fail, zfail, zpass);
}

static void GL_BINDING_CALL Debug_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels) {
  GL_SERVICE_LOG("glTexImage2D" << "("  << GLES2Util::GetStringEnum(target) << ", " << level << ", " << internalformat << ", " << width << ", " << height << ", " << border << ", " << GLES2Util::GetStringEnum(format) << ", " << GLES2Util::GetStringEnum(type) << ", " << static_cast<const void*>(pixels) << ")");
  g_driver_gl.debug_fn.glTexImage2DFn(target, level, internalformat, width, height, border, format, type, pixels);
}

static void GL_BINDING_CALL Debug_glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
  GL_SERVICE_LOG("glTexParameterf" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(pname) << ", " << param << ")");
  g_driver_gl.debug_fn.glTexParameterfFn(target, pname, param);
}

static void GL_BINDING_CALL Debug_glTexParameterfv(GLenum target, GLenum pname, const GLfloat* params) {
  GL_SERVICE_LOG("glTexParameterfv" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glTexParameterfvFn(target, pname, params);
}

static void GL_BINDING_CALL Debug_glTexParameteri(GLenum target, GLenum pname, GLint param) {
  GL_SERVICE_LOG("glTexParameteri" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(pname) << ", " << param << ")");
  g_driver_gl.debug_fn.glTexParameteriFn(target, pname, param);
}

static void GL_BINDING_CALL Debug_glTexParameteriv(GLenum target, GLenum pname, const GLint* params) {
  GL_SERVICE_LOG("glTexParameteriv" << "("  << GLES2Util::GetStringEnum(target) << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glTexParameterivFn(target, pname, params);
}

static void GL_BINDING_CALL Debug_glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("glTexStorage2DEXT" << "("  << GLES2Util::GetStringEnum(target) << ", " << levels << ", " << GLES2Util::GetStringEnum(internalformat) << ", " << width << ", " << height << ")");
  g_driver_gl.debug_fn.glTexStorage2DEXTFn(target, levels, internalformat, width, height);
}

static void GL_BINDING_CALL Debug_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels) {
  GL_SERVICE_LOG("glTexSubImage2D" << "("  << GLES2Util::GetStringEnum(target) << ", " << level << ", " << xoffset << ", " << yoffset << ", " << width << ", " << height << ", " << GLES2Util::GetStringEnum(format) << ", " << GLES2Util::GetStringEnum(type) << ", " << static_cast<const void*>(pixels) << ")");
  g_driver_gl.debug_fn.glTexSubImage2DFn(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void GL_BINDING_CALL Debug_glUniform1f(GLint location, GLfloat x) {
  GL_SERVICE_LOG("glUniform1f" << "("  << location << ", " << x << ")");
  g_driver_gl.debug_fn.glUniform1fFn(location, x);
}

static void GL_BINDING_CALL Debug_glUniform1fv(GLint location, GLsizei count, const GLfloat* v) {
  GL_SERVICE_LOG("glUniform1fv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_driver_gl.debug_fn.glUniform1fvFn(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniform1i(GLint location, GLint x) {
  GL_SERVICE_LOG("glUniform1i" << "("  << location << ", " << x << ")");
  g_driver_gl.debug_fn.glUniform1iFn(location, x);
}

static void GL_BINDING_CALL Debug_glUniform1iv(GLint location, GLsizei count, const GLint* v) {
  GL_SERVICE_LOG("glUniform1iv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_driver_gl.debug_fn.glUniform1ivFn(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniform2f(GLint location, GLfloat x, GLfloat y) {
  GL_SERVICE_LOG("glUniform2f" << "("  << location << ", " << x << ", " << y << ")");
  g_driver_gl.debug_fn.glUniform2fFn(location, x, y);
}

static void GL_BINDING_CALL Debug_glUniform2fv(GLint location, GLsizei count, const GLfloat* v) {
  GL_SERVICE_LOG("glUniform2fv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_driver_gl.debug_fn.glUniform2fvFn(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniform2i(GLint location, GLint x, GLint y) {
  GL_SERVICE_LOG("glUniform2i" << "("  << location << ", " << x << ", " << y << ")");
  g_driver_gl.debug_fn.glUniform2iFn(location, x, y);
}

static void GL_BINDING_CALL Debug_glUniform2iv(GLint location, GLsizei count, const GLint* v) {
  GL_SERVICE_LOG("glUniform2iv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_driver_gl.debug_fn.glUniform2ivFn(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z) {
  GL_SERVICE_LOG("glUniform3f" << "("  << location << ", " << x << ", " << y << ", " << z << ")");
  g_driver_gl.debug_fn.glUniform3fFn(location, x, y, z);
}

static void GL_BINDING_CALL Debug_glUniform3fv(GLint location, GLsizei count, const GLfloat* v) {
  GL_SERVICE_LOG("glUniform3fv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_driver_gl.debug_fn.glUniform3fvFn(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniform3i(GLint location, GLint x, GLint y, GLint z) {
  GL_SERVICE_LOG("glUniform3i" << "("  << location << ", " << x << ", " << y << ", " << z << ")");
  g_driver_gl.debug_fn.glUniform3iFn(location, x, y, z);
}

static void GL_BINDING_CALL Debug_glUniform3iv(GLint location, GLsizei count, const GLint* v) {
  GL_SERVICE_LOG("glUniform3iv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_driver_gl.debug_fn.glUniform3ivFn(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  GL_SERVICE_LOG("glUniform4f" << "("  << location << ", " << x << ", " << y << ", " << z << ", " << w << ")");
  g_driver_gl.debug_fn.glUniform4fFn(location, x, y, z, w);
}

static void GL_BINDING_CALL Debug_glUniform4fv(GLint location, GLsizei count, const GLfloat* v) {
  GL_SERVICE_LOG("glUniform4fv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_driver_gl.debug_fn.glUniform4fvFn(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniform4i(GLint location, GLint x, GLint y, GLint z, GLint w) {
  GL_SERVICE_LOG("glUniform4i" << "("  << location << ", " << x << ", " << y << ", " << z << ", " << w << ")");
  g_driver_gl.debug_fn.glUniform4iFn(location, x, y, z, w);
}

static void GL_BINDING_CALL Debug_glUniform4iv(GLint location, GLsizei count, const GLint* v) {
  GL_SERVICE_LOG("glUniform4iv" << "("  << location << ", " << count << ", " << static_cast<const void*>(v) << ")");
  g_driver_gl.debug_fn.glUniform4ivFn(location, count, v);
}

static void GL_BINDING_CALL Debug_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) {
  GL_SERVICE_LOG("glUniformMatrix2fv" << "("  << location << ", " << count << ", " << GLES2Util::GetStringBool(transpose) << ", " << static_cast<const void*>(value) << ")");
  g_driver_gl.debug_fn.glUniformMatrix2fvFn(location, count, transpose, value);
}

static void GL_BINDING_CALL Debug_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) {
  GL_SERVICE_LOG("glUniformMatrix3fv" << "("  << location << ", " << count << ", " << GLES2Util::GetStringBool(transpose) << ", " << static_cast<const void*>(value) << ")");
  g_driver_gl.debug_fn.glUniformMatrix3fvFn(location, count, transpose, value);
}

static void GL_BINDING_CALL Debug_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) {
  GL_SERVICE_LOG("glUniformMatrix4fv" << "("  << location << ", " << count << ", " << GLES2Util::GetStringBool(transpose) << ", " << static_cast<const void*>(value) << ")");
  g_driver_gl.debug_fn.glUniformMatrix4fvFn(location, count, transpose, value);
}

static GLboolean GL_BINDING_CALL Debug_glUnmapBuffer(GLenum target) {
  GL_SERVICE_LOG("glUnmapBuffer" << "("  << GLES2Util::GetStringEnum(target) << ")");
  GLboolean result = g_driver_gl.debug_fn.glUnmapBufferFn(target);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glUseProgram(GLuint program) {
  GL_SERVICE_LOG("glUseProgram" << "("  << program << ")");
  g_driver_gl.debug_fn.glUseProgramFn(program);
}

static void GL_BINDING_CALL Debug_glValidateProgram(GLuint program) {
  GL_SERVICE_LOG("glValidateProgram" << "("  << program << ")");
  g_driver_gl.debug_fn.glValidateProgramFn(program);
}

static void GL_BINDING_CALL Debug_glVertexAttrib1f(GLuint indx, GLfloat x) {
  GL_SERVICE_LOG("glVertexAttrib1f" << "("  << indx << ", " << x << ")");
  g_driver_gl.debug_fn.glVertexAttrib1fFn(indx, x);
}

static void GL_BINDING_CALL Debug_glVertexAttrib1fv(GLuint indx, const GLfloat* values) {
  GL_SERVICE_LOG("glVertexAttrib1fv" << "("  << indx << ", " << static_cast<const void*>(values) << ")");
  g_driver_gl.debug_fn.glVertexAttrib1fvFn(indx, values);
}

static void GL_BINDING_CALL Debug_glVertexAttrib2f(GLuint indx, GLfloat x, GLfloat y) {
  GL_SERVICE_LOG("glVertexAttrib2f" << "("  << indx << ", " << x << ", " << y << ")");
  g_driver_gl.debug_fn.glVertexAttrib2fFn(indx, x, y);
}

static void GL_BINDING_CALL Debug_glVertexAttrib2fv(GLuint indx, const GLfloat* values) {
  GL_SERVICE_LOG("glVertexAttrib2fv" << "("  << indx << ", " << static_cast<const void*>(values) << ")");
  g_driver_gl.debug_fn.glVertexAttrib2fvFn(indx, values);
}

static void GL_BINDING_CALL Debug_glVertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z) {
  GL_SERVICE_LOG("glVertexAttrib3f" << "("  << indx << ", " << x << ", " << y << ", " << z << ")");
  g_driver_gl.debug_fn.glVertexAttrib3fFn(indx, x, y, z);
}

static void GL_BINDING_CALL Debug_glVertexAttrib3fv(GLuint indx, const GLfloat* values) {
  GL_SERVICE_LOG("glVertexAttrib3fv" << "("  << indx << ", " << static_cast<const void*>(values) << ")");
  g_driver_gl.debug_fn.glVertexAttrib3fvFn(indx, values);
}

static void GL_BINDING_CALL Debug_glVertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  GL_SERVICE_LOG("glVertexAttrib4f" << "("  << indx << ", " << x << ", " << y << ", " << z << ", " << w << ")");
  g_driver_gl.debug_fn.glVertexAttrib4fFn(indx, x, y, z, w);
}

static void GL_BINDING_CALL Debug_glVertexAttrib4fv(GLuint indx, const GLfloat* values) {
  GL_SERVICE_LOG("glVertexAttrib4fv" << "("  << indx << ", " << static_cast<const void*>(values) << ")");
  g_driver_gl.debug_fn.glVertexAttrib4fvFn(indx, values);
}

static void GL_BINDING_CALL Debug_glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr) {
  GL_SERVICE_LOG("glVertexAttribPointer" << "("  << indx << ", " << size << ", " << GLES2Util::GetStringEnum(type) << ", " << GLES2Util::GetStringBool(normalized) << ", " << stride << ", " << static_cast<const void*>(ptr) << ")");
  g_driver_gl.debug_fn.glVertexAttribPointerFn(indx, size, type, normalized, stride, ptr);
}

static void GL_BINDING_CALL Debug_glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
  GL_SERVICE_LOG("glViewport" << "("  << x << ", " << y << ", " << width << ", " << height << ")");
  g_driver_gl.debug_fn.glViewportFn(x, y, width, height);
}

static void GL_BINDING_CALL Debug_glGenFencesNV(GLsizei n, GLuint* fences) {
  GL_SERVICE_LOG("glGenFencesNV" << "("  << n << ", " << static_cast<const void*>(fences) << ")");
  g_driver_gl.debug_fn.glGenFencesNVFn(n, fences);
}

static void GL_BINDING_CALL Debug_glDeleteFencesNV(GLsizei n, const GLuint* fences) {
  GL_SERVICE_LOG("glDeleteFencesNV" << "("  << n << ", " << static_cast<const void*>(fences) << ")");
  g_driver_gl.debug_fn.glDeleteFencesNVFn(n, fences);
}

static void GL_BINDING_CALL Debug_glSetFenceNV(GLuint fence, GLenum condition) {
  GL_SERVICE_LOG("glSetFenceNV" << "("  << fence << ", " << GLES2Util::GetStringEnum(condition) << ")");
  g_driver_gl.debug_fn.glSetFenceNVFn(fence, condition);
}

static GLboolean GL_BINDING_CALL Debug_glTestFenceNV(GLuint fence) {
  GL_SERVICE_LOG("glTestFenceNV" << "("  << fence << ")");
  GLboolean result = g_driver_gl.debug_fn.glTestFenceNVFn(fence);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glFinishFenceNV(GLuint fence) {
  GL_SERVICE_LOG("glFinishFenceNV" << "("  << fence << ")");
  g_driver_gl.debug_fn.glFinishFenceNVFn(fence);
}

static GLboolean GL_BINDING_CALL Debug_glIsFenceNV(GLuint fence) {
  GL_SERVICE_LOG("glIsFenceNV" << "("  << fence << ")");
  GLboolean result = g_driver_gl.debug_fn.glIsFenceNVFn(fence);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glGetFenceivNV(GLuint fence, GLenum pname, GLint* params) {
  GL_SERVICE_LOG("glGetFenceivNV" << "("  << fence << ", " << GLES2Util::GetStringEnum(pname) << ", " << static_cast<const void*>(params) << ")");
  g_driver_gl.debug_fn.glGetFenceivNVFn(fence, pname, params);
}

static GLsync GL_BINDING_CALL Debug_glFenceSync(GLenum condition, GLbitfield flags) {
  GL_SERVICE_LOG("glFenceSync" << "("  << GLES2Util::GetStringEnum(condition) << ", " << flags << ")");
  GLsync result = g_driver_gl.debug_fn.glFenceSyncFn(condition, flags);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glDeleteSync(GLsync sync) {
  GL_SERVICE_LOG("glDeleteSync" << "("  << sync << ")");
  g_driver_gl.debug_fn.glDeleteSyncFn(sync);
}

static void GL_BINDING_CALL Debug_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length,GLint* values) {
  GL_SERVICE_LOG("glGetSynciv" << "("  << sync << ", " << GLES2Util::GetStringEnum(pname) << ", " << bufSize << ", " << static_cast<const void*>(length) << ", " <<static_cast<const void*>(values) << ")");
  g_driver_gl.debug_fn.glGetSyncivFn(sync, pname, bufSize, length,values);
}

static void GL_BINDING_CALL Debug_glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  GL_SERVICE_LOG("glDrawArraysInstancedANGLE" << "("  << GLES2Util::GetStringEnum(mode) << ", " << first << ", " << count << ", " << primcount << ")");
  g_driver_gl.debug_fn.glDrawArraysInstancedANGLEFn(mode, first, count, primcount);
}

static void GL_BINDING_CALL Debug_glDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount) {
  GL_SERVICE_LOG("glDrawElementsInstancedANGLE" << "("  << GLES2Util::GetStringEnum(mode) << ", " << count << ", " << GLES2Util::GetStringEnum(type) << ", " << static_cast<const void*>(indices) << ", " << primcount << ")");
  g_driver_gl.debug_fn.glDrawElementsInstancedANGLEFn(mode, count, type, indices, primcount);
}

static void GL_BINDING_CALL Debug_glVertexAttribDivisorANGLE(GLuint index, GLuint divisor) {
  GL_SERVICE_LOG("glVertexAttribDivisorANGLE" << "("  << index << ", " << divisor << ")");
  g_driver_gl.debug_fn.glVertexAttribDivisorANGLEFn(index, divisor);
}

static void GL_BINDING_CALL Debug_glGenVertexArraysOES(GLsizei n, GLuint* arrays) {
  GL_SERVICE_LOG("glGenVertexArraysOES" << "("  << n << ", " << static_cast<const void*>(arrays) << ")");
  g_driver_gl.debug_fn.glGenVertexArraysOESFn(n, arrays);
}

static void GL_BINDING_CALL Debug_glDeleteVertexArraysOES(GLsizei n, const GLuint* arrays) {
  GL_SERVICE_LOG("glDeleteVertexArraysOES" << "("  << n << ", " << static_cast<const void*>(arrays) << ")");
  g_driver_gl.debug_fn.glDeleteVertexArraysOESFn(n, arrays);
}

static void GL_BINDING_CALL Debug_glBindVertexArrayOES(GLuint array) {
  GL_SERVICE_LOG("glBindVertexArrayOES" << "("  << array << ")");
  g_driver_gl.debug_fn.glBindVertexArrayOESFn(array);
}

static GLboolean GL_BINDING_CALL Debug_glIsVertexArrayOES(GLuint array) {
  GL_SERVICE_LOG("glIsVertexArrayOES" << "("  << array << ")");
  GLboolean result = g_driver_gl.debug_fn.glIsVertexArrayOESFn(array);
  GL_SERVICE_LOG("GL_RESULT: " << result);
  return result;
}

static void GL_BINDING_CALL Debug_glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum* attachments) {
  GL_SERVICE_LOG("glDiscardFramebufferEXT" << "("  << GLES2Util::GetStringEnum(target) << ", " << numAttachments << ", " << static_cast<const void*>(attachments) << ")");
  g_driver_gl.debug_fn.glDiscardFramebufferEXTFn(target, numAttachments, attachments);
}
}  // extern "C"

void DriverGL::InitializeDebugBindings() {
  if (!debug_fn.glActiveTextureFn) {
    debug_fn.glActiveTextureFn = fn.glActiveTextureFn;
    fn.glActiveTextureFn = Debug_glActiveTexture;
  }
  if (!debug_fn.glAttachShaderFn) {
    debug_fn.glAttachShaderFn = fn.glAttachShaderFn;
    fn.glAttachShaderFn = Debug_glAttachShader;
  }
  if (!debug_fn.glBeginQueryFn) {
    debug_fn.glBeginQueryFn = fn.glBeginQueryFn;
    fn.glBeginQueryFn = Debug_glBeginQuery;
  }
  if (!debug_fn.glBeginQueryARBFn) {
    debug_fn.glBeginQueryARBFn = fn.glBeginQueryARBFn;
    fn.glBeginQueryARBFn = Debug_glBeginQueryARB;
  }
  if (!debug_fn.glBindAttribLocationFn) {
    debug_fn.glBindAttribLocationFn = fn.glBindAttribLocationFn;
    fn.glBindAttribLocationFn = Debug_glBindAttribLocation;
  }
  if (!debug_fn.glBindBufferFn) {
    debug_fn.glBindBufferFn = fn.glBindBufferFn;
    fn.glBindBufferFn = Debug_glBindBuffer;
  }
  if (!debug_fn.glBindFragDataLocationFn) {
    debug_fn.glBindFragDataLocationFn = fn.glBindFragDataLocationFn;
    fn.glBindFragDataLocationFn = Debug_glBindFragDataLocation;
  }
  if (!debug_fn.glBindFragDataLocationIndexedFn) {
    debug_fn.glBindFragDataLocationIndexedFn = fn.glBindFragDataLocationIndexedFn;
    fn.glBindFragDataLocationIndexedFn = Debug_glBindFragDataLocationIndexed;
  }
  if (!debug_fn.glBindFramebufferEXTFn) {
    debug_fn.glBindFramebufferEXTFn = fn.glBindFramebufferEXTFn;
    fn.glBindFramebufferEXTFn = Debug_glBindFramebufferEXT;
  }
  if (!debug_fn.glBindRenderbufferEXTFn) {
    debug_fn.glBindRenderbufferEXTFn = fn.glBindRenderbufferEXTFn;
    fn.glBindRenderbufferEXTFn = Debug_glBindRenderbufferEXT;
  }
  if (!debug_fn.glBindTextureFn) {
    debug_fn.glBindTextureFn = fn.glBindTextureFn;
    fn.glBindTextureFn = Debug_glBindTexture;
  }
  if (!debug_fn.glBlendColorFn) {
    debug_fn.glBlendColorFn = fn.glBlendColorFn;
    fn.glBlendColorFn = Debug_glBlendColor;
  }
  if (!debug_fn.glBlendEquationFn) {
    debug_fn.glBlendEquationFn = fn.glBlendEquationFn;
    fn.glBlendEquationFn = Debug_glBlendEquation;
  }
  if (!debug_fn.glBlendEquationSeparateFn) {
    debug_fn.glBlendEquationSeparateFn = fn.glBlendEquationSeparateFn;
    fn.glBlendEquationSeparateFn = Debug_glBlendEquationSeparate;
  }
  if (!debug_fn.glBlendFuncFn) {
    debug_fn.glBlendFuncFn = fn.glBlendFuncFn;
    fn.glBlendFuncFn = Debug_glBlendFunc;
  }
  if (!debug_fn.glBlendFuncSeparateFn) {
    debug_fn.glBlendFuncSeparateFn = fn.glBlendFuncSeparateFn;
    fn.glBlendFuncSeparateFn = Debug_glBlendFuncSeparate;
  }
  if (!debug_fn.glBlitFramebufferEXTFn) {
    debug_fn.glBlitFramebufferEXTFn = fn.glBlitFramebufferEXTFn;
    fn.glBlitFramebufferEXTFn = Debug_glBlitFramebufferEXT;
  }
  if (!debug_fn.glBlitFramebufferANGLEFn) {
    debug_fn.glBlitFramebufferANGLEFn = fn.glBlitFramebufferANGLEFn;
    fn.glBlitFramebufferANGLEFn = Debug_glBlitFramebufferANGLE;
  }
  if (!debug_fn.glBufferDataFn) {
    debug_fn.glBufferDataFn = fn.glBufferDataFn;
    fn.glBufferDataFn = Debug_glBufferData;
  }
  if (!debug_fn.glBufferSubDataFn) {
    debug_fn.glBufferSubDataFn = fn.glBufferSubDataFn;
    fn.glBufferSubDataFn = Debug_glBufferSubData;
  }
  if (!debug_fn.glCheckFramebufferStatusEXTFn) {
    debug_fn.glCheckFramebufferStatusEXTFn = fn.glCheckFramebufferStatusEXTFn;
    fn.glCheckFramebufferStatusEXTFn = Debug_glCheckFramebufferStatusEXT;
  }
  if (!debug_fn.glClearFn) {
    debug_fn.glClearFn = fn.glClearFn;
    fn.glClearFn = Debug_glClear;
  }
  if (!debug_fn.glClearColorFn) {
    debug_fn.glClearColorFn = fn.glClearColorFn;
    fn.glClearColorFn = Debug_glClearColor;
  }
  if (!debug_fn.glClearDepthFn) {
    debug_fn.glClearDepthFn = fn.glClearDepthFn;
    fn.glClearDepthFn = Debug_glClearDepth;
  }
  if (!debug_fn.glClearDepthfFn) {
    debug_fn.glClearDepthfFn = fn.glClearDepthfFn;
    fn.glClearDepthfFn = Debug_glClearDepthf;
  }
  if (!debug_fn.glClearStencilFn) {
    debug_fn.glClearStencilFn = fn.glClearStencilFn;
    fn.glClearStencilFn = Debug_glClearStencil;
  }
  if (!debug_fn.glColorMaskFn) {
    debug_fn.glColorMaskFn = fn.glColorMaskFn;
    fn.glColorMaskFn = Debug_glColorMask;
  }
  if (!debug_fn.glCompileShaderFn) {
    debug_fn.glCompileShaderFn = fn.glCompileShaderFn;
    fn.glCompileShaderFn = Debug_glCompileShader;
  }
  if (!debug_fn.glCompressedTexImage2DFn) {
    debug_fn.glCompressedTexImage2DFn = fn.glCompressedTexImage2DFn;
    fn.glCompressedTexImage2DFn = Debug_glCompressedTexImage2D;
  }
  if (!debug_fn.glCompressedTexSubImage2DFn) {
    debug_fn.glCompressedTexSubImage2DFn = fn.glCompressedTexSubImage2DFn;
    fn.glCompressedTexSubImage2DFn = Debug_glCompressedTexSubImage2D;
  }
  if (!debug_fn.glCopyTexImage2DFn) {
    debug_fn.glCopyTexImage2DFn = fn.glCopyTexImage2DFn;
    fn.glCopyTexImage2DFn = Debug_glCopyTexImage2D;
  }
  if (!debug_fn.glCopyTexSubImage2DFn) {
    debug_fn.glCopyTexSubImage2DFn = fn.glCopyTexSubImage2DFn;
    fn.glCopyTexSubImage2DFn = Debug_glCopyTexSubImage2D;
  }
  if (!debug_fn.glCreateProgramFn) {
    debug_fn.glCreateProgramFn = fn.glCreateProgramFn;
    fn.glCreateProgramFn = Debug_glCreateProgram;
  }
  if (!debug_fn.glCreateShaderFn) {
    debug_fn.glCreateShaderFn = fn.glCreateShaderFn;
    fn.glCreateShaderFn = Debug_glCreateShader;
  }
  if (!debug_fn.glCullFaceFn) {
    debug_fn.glCullFaceFn = fn.glCullFaceFn;
    fn.glCullFaceFn = Debug_glCullFace;
  }
  if (!debug_fn.glDeleteBuffersARBFn) {
    debug_fn.glDeleteBuffersARBFn = fn.glDeleteBuffersARBFn;
    fn.glDeleteBuffersARBFn = Debug_glDeleteBuffersARB;
  }
  if (!debug_fn.glDeleteFramebuffersEXTFn) {
    debug_fn.glDeleteFramebuffersEXTFn = fn.glDeleteFramebuffersEXTFn;
    fn.glDeleteFramebuffersEXTFn = Debug_glDeleteFramebuffersEXT;
  }
  if (!debug_fn.glDeleteProgramFn) {
    debug_fn.glDeleteProgramFn = fn.glDeleteProgramFn;
    fn.glDeleteProgramFn = Debug_glDeleteProgram;
  }
  if (!debug_fn.glDeleteQueriesFn) {
    debug_fn.glDeleteQueriesFn = fn.glDeleteQueriesFn;
    fn.glDeleteQueriesFn = Debug_glDeleteQueries;
  }
  if (!debug_fn.glDeleteQueriesARBFn) {
    debug_fn.glDeleteQueriesARBFn = fn.glDeleteQueriesARBFn;
    fn.glDeleteQueriesARBFn = Debug_glDeleteQueriesARB;
  }
  if (!debug_fn.glDeleteRenderbuffersEXTFn) {
    debug_fn.glDeleteRenderbuffersEXTFn = fn.glDeleteRenderbuffersEXTFn;
    fn.glDeleteRenderbuffersEXTFn = Debug_glDeleteRenderbuffersEXT;
  }
  if (!debug_fn.glDeleteShaderFn) {
    debug_fn.glDeleteShaderFn = fn.glDeleteShaderFn;
    fn.glDeleteShaderFn = Debug_glDeleteShader;
  }
  if (!debug_fn.glDeleteTexturesFn) {
    debug_fn.glDeleteTexturesFn = fn.glDeleteTexturesFn;
    fn.glDeleteTexturesFn = Debug_glDeleteTextures;
  }
  if (!debug_fn.glDepthFuncFn) {
    debug_fn.glDepthFuncFn = fn.glDepthFuncFn;
    fn.glDepthFuncFn = Debug_glDepthFunc;
  }
  if (!debug_fn.glDepthMaskFn) {
    debug_fn.glDepthMaskFn = fn.glDepthMaskFn;
    fn.glDepthMaskFn = Debug_glDepthMask;
  }
  if (!debug_fn.glDepthRangeFn) {
    debug_fn.glDepthRangeFn = fn.glDepthRangeFn;
    fn.glDepthRangeFn = Debug_glDepthRange;
  }
  if (!debug_fn.glDepthRangefFn) {
    debug_fn.glDepthRangefFn = fn.glDepthRangefFn;
    fn.glDepthRangefFn = Debug_glDepthRangef;
  }
  if (!debug_fn.glDetachShaderFn) {
    debug_fn.glDetachShaderFn = fn.glDetachShaderFn;
    fn.glDetachShaderFn = Debug_glDetachShader;
  }
  if (!debug_fn.glDisableFn) {
    debug_fn.glDisableFn = fn.glDisableFn;
    fn.glDisableFn = Debug_glDisable;
  }
  if (!debug_fn.glDisableVertexAttribArrayFn) {
    debug_fn.glDisableVertexAttribArrayFn = fn.glDisableVertexAttribArrayFn;
    fn.glDisableVertexAttribArrayFn = Debug_glDisableVertexAttribArray;
  }
  if (!debug_fn.glDrawArraysFn) {
    debug_fn.glDrawArraysFn = fn.glDrawArraysFn;
    fn.glDrawArraysFn = Debug_glDrawArrays;
  }
  if (!debug_fn.glDrawBufferFn) {
    debug_fn.glDrawBufferFn = fn.glDrawBufferFn;
    fn.glDrawBufferFn = Debug_glDrawBuffer;
  }
  if (!debug_fn.glDrawBuffersARBFn) {
    debug_fn.glDrawBuffersARBFn = fn.glDrawBuffersARBFn;
    fn.glDrawBuffersARBFn = Debug_glDrawBuffersARB;
  }
  if (!debug_fn.glDrawElementsFn) {
    debug_fn.glDrawElementsFn = fn.glDrawElementsFn;
    fn.glDrawElementsFn = Debug_glDrawElements;
  }
  if (!debug_fn.glEGLImageTargetTexture2DOESFn) {
    debug_fn.glEGLImageTargetTexture2DOESFn = fn.glEGLImageTargetTexture2DOESFn;
    fn.glEGLImageTargetTexture2DOESFn = Debug_glEGLImageTargetTexture2DOES;
  }
  if (!debug_fn.glEGLImageTargetRenderbufferStorageOESFn) {
    debug_fn.glEGLImageTargetRenderbufferStorageOESFn = fn.glEGLImageTargetRenderbufferStorageOESFn;
    fn.glEGLImageTargetRenderbufferStorageOESFn = Debug_glEGLImageTargetRenderbufferStorageOES;
  }
  if (!debug_fn.glEnableFn) {
    debug_fn.glEnableFn = fn.glEnableFn;
    fn.glEnableFn = Debug_glEnable;
  }
  if (!debug_fn.glEnableVertexAttribArrayFn) {
    debug_fn.glEnableVertexAttribArrayFn = fn.glEnableVertexAttribArrayFn;
    fn.glEnableVertexAttribArrayFn = Debug_glEnableVertexAttribArray;
  }
  if (!debug_fn.glEndQueryFn) {
    debug_fn.glEndQueryFn = fn.glEndQueryFn;
    fn.glEndQueryFn = Debug_glEndQuery;
  }
  if (!debug_fn.glEndQueryARBFn) {
    debug_fn.glEndQueryARBFn = fn.glEndQueryARBFn;
    fn.glEndQueryARBFn = Debug_glEndQueryARB;
  }
  if (!debug_fn.glFinishFn) {
    debug_fn.glFinishFn = fn.glFinishFn;
    fn.glFinishFn = Debug_glFinish;
  }
  if (!debug_fn.glFlushFn) {
    debug_fn.glFlushFn = fn.glFlushFn;
    fn.glFlushFn = Debug_glFlush;
  }
  if (!debug_fn.glFramebufferRenderbufferEXTFn) {
    debug_fn.glFramebufferRenderbufferEXTFn = fn.glFramebufferRenderbufferEXTFn;
    fn.glFramebufferRenderbufferEXTFn = Debug_glFramebufferRenderbufferEXT;
  }
  if (!debug_fn.glFramebufferTexture2DEXTFn) {
    debug_fn.glFramebufferTexture2DEXTFn = fn.glFramebufferTexture2DEXTFn;
    fn.glFramebufferTexture2DEXTFn = Debug_glFramebufferTexture2DEXT;
  }
  if (!debug_fn.glFrontFaceFn) {
    debug_fn.glFrontFaceFn = fn.glFrontFaceFn;
    fn.glFrontFaceFn = Debug_glFrontFace;
  }
  if (!debug_fn.glGenBuffersARBFn) {
    debug_fn.glGenBuffersARBFn = fn.glGenBuffersARBFn;
    fn.glGenBuffersARBFn = Debug_glGenBuffersARB;
  }
  if (!debug_fn.glGenQueriesFn) {
    debug_fn.glGenQueriesFn = fn.glGenQueriesFn;
    fn.glGenQueriesFn = Debug_glGenQueries;
  }
  if (!debug_fn.glGenQueriesARBFn) {
    debug_fn.glGenQueriesARBFn = fn.glGenQueriesARBFn;
    fn.glGenQueriesARBFn = Debug_glGenQueriesARB;
  }
  if (!debug_fn.glGenerateMipmapEXTFn) {
    debug_fn.glGenerateMipmapEXTFn = fn.glGenerateMipmapEXTFn;
    fn.glGenerateMipmapEXTFn = Debug_glGenerateMipmapEXT;
  }
  if (!debug_fn.glGenFramebuffersEXTFn) {
    debug_fn.glGenFramebuffersEXTFn = fn.glGenFramebuffersEXTFn;
    fn.glGenFramebuffersEXTFn = Debug_glGenFramebuffersEXT;
  }
  if (!debug_fn.glGenRenderbuffersEXTFn) {
    debug_fn.glGenRenderbuffersEXTFn = fn.glGenRenderbuffersEXTFn;
    fn.glGenRenderbuffersEXTFn = Debug_glGenRenderbuffersEXT;
  }
  if (!debug_fn.glGenTexturesFn) {
    debug_fn.glGenTexturesFn = fn.glGenTexturesFn;
    fn.glGenTexturesFn = Debug_glGenTextures;
  }
  if (!debug_fn.glGetActiveAttribFn) {
    debug_fn.glGetActiveAttribFn = fn.glGetActiveAttribFn;
    fn.glGetActiveAttribFn = Debug_glGetActiveAttrib;
  }
  if (!debug_fn.glGetActiveUniformFn) {
    debug_fn.glGetActiveUniformFn = fn.glGetActiveUniformFn;
    fn.glGetActiveUniformFn = Debug_glGetActiveUniform;
  }
  if (!debug_fn.glGetAttachedShadersFn) {
    debug_fn.glGetAttachedShadersFn = fn.glGetAttachedShadersFn;
    fn.glGetAttachedShadersFn = Debug_glGetAttachedShaders;
  }
  if (!debug_fn.glGetAttribLocationFn) {
    debug_fn.glGetAttribLocationFn = fn.glGetAttribLocationFn;
    fn.glGetAttribLocationFn = Debug_glGetAttribLocation;
  }
  if (!debug_fn.glGetBooleanvFn) {
    debug_fn.glGetBooleanvFn = fn.glGetBooleanvFn;
    fn.glGetBooleanvFn = Debug_glGetBooleanv;
  }
  if (!debug_fn.glGetBufferParameterivFn) {
    debug_fn.glGetBufferParameterivFn = fn.glGetBufferParameterivFn;
    fn.glGetBufferParameterivFn = Debug_glGetBufferParameteriv;
  }
  if (!debug_fn.glGetErrorFn) {
    debug_fn.glGetErrorFn = fn.glGetErrorFn;
    fn.glGetErrorFn = Debug_glGetError;
  }
  if (!debug_fn.glGetFloatvFn) {
    debug_fn.glGetFloatvFn = fn.glGetFloatvFn;
    fn.glGetFloatvFn = Debug_glGetFloatv;
  }
  if (!debug_fn.glGetFramebufferAttachmentParameterivEXTFn) {
    debug_fn.glGetFramebufferAttachmentParameterivEXTFn = fn.glGetFramebufferAttachmentParameterivEXTFn;
    fn.glGetFramebufferAttachmentParameterivEXTFn = Debug_glGetFramebufferAttachmentParameterivEXT;
  }
  if (!debug_fn.glGetGraphicsResetStatusARBFn) {
    debug_fn.glGetGraphicsResetStatusARBFn = fn.glGetGraphicsResetStatusARBFn;
    fn.glGetGraphicsResetStatusARBFn = Debug_glGetGraphicsResetStatusARB;
  }
  if (!debug_fn.glGetIntegervFn) {
    debug_fn.glGetIntegervFn = fn.glGetIntegervFn;
    fn.glGetIntegervFn = Debug_glGetIntegerv;
  }
  if (!debug_fn.glGetProgramBinaryFn) {
    debug_fn.glGetProgramBinaryFn = fn.glGetProgramBinaryFn;
    fn.glGetProgramBinaryFn = Debug_glGetProgramBinary;
  }
  if (!debug_fn.glGetProgramivFn) {
    debug_fn.glGetProgramivFn = fn.glGetProgramivFn;
    fn.glGetProgramivFn = Debug_glGetProgramiv;
  }
  if (!debug_fn.glGetProgramInfoLogFn) {
    debug_fn.glGetProgramInfoLogFn = fn.glGetProgramInfoLogFn;
    fn.glGetProgramInfoLogFn = Debug_glGetProgramInfoLog;
  }
  if (!debug_fn.glGetQueryivFn) {
    debug_fn.glGetQueryivFn = fn.glGetQueryivFn;
    fn.glGetQueryivFn = Debug_glGetQueryiv;
  }
  if (!debug_fn.glGetQueryivARBFn) {
    debug_fn.glGetQueryivARBFn = fn.glGetQueryivARBFn;
    fn.glGetQueryivARBFn = Debug_glGetQueryivARB;
  }
  if (!debug_fn.glGetQueryObjecti64vFn) {
    debug_fn.glGetQueryObjecti64vFn = fn.glGetQueryObjecti64vFn;
    fn.glGetQueryObjecti64vFn = Debug_glGetQueryObjecti64v;
  }
  if (!debug_fn.glGetQueryObjectivFn) {
    debug_fn.glGetQueryObjectivFn = fn.glGetQueryObjectivFn;
    fn.glGetQueryObjectivFn = Debug_glGetQueryObjectiv;
  }
  if (!debug_fn.glGetQueryObjectui64vFn) {
    debug_fn.glGetQueryObjectui64vFn = fn.glGetQueryObjectui64vFn;
    fn.glGetQueryObjectui64vFn = Debug_glGetQueryObjectui64v;
  }
  if (!debug_fn.glGetQueryObjectuivFn) {
    debug_fn.glGetQueryObjectuivFn = fn.glGetQueryObjectuivFn;
    fn.glGetQueryObjectuivFn = Debug_glGetQueryObjectuiv;
  }
  if (!debug_fn.glGetQueryObjectuivARBFn) {
    debug_fn.glGetQueryObjectuivARBFn = fn.glGetQueryObjectuivARBFn;
    fn.glGetQueryObjectuivARBFn = Debug_glGetQueryObjectuivARB;
  }
  if (!debug_fn.glGetRenderbufferParameterivEXTFn) {
    debug_fn.glGetRenderbufferParameterivEXTFn = fn.glGetRenderbufferParameterivEXTFn;
    fn.glGetRenderbufferParameterivEXTFn = Debug_glGetRenderbufferParameterivEXT;
  }
  if (!debug_fn.glGetShaderivFn) {
    debug_fn.glGetShaderivFn = fn.glGetShaderivFn;
    fn.glGetShaderivFn = Debug_glGetShaderiv;
  }
  if (!debug_fn.glGetShaderInfoLogFn) {
    debug_fn.glGetShaderInfoLogFn = fn.glGetShaderInfoLogFn;
    fn.glGetShaderInfoLogFn = Debug_glGetShaderInfoLog;
  }
  if (!debug_fn.glGetShaderPrecisionFormatFn) {
    debug_fn.glGetShaderPrecisionFormatFn = fn.glGetShaderPrecisionFormatFn;
    fn.glGetShaderPrecisionFormatFn = Debug_glGetShaderPrecisionFormat;
  }
  if (!debug_fn.glGetShaderSourceFn) {
    debug_fn.glGetShaderSourceFn = fn.glGetShaderSourceFn;
    fn.glGetShaderSourceFn = Debug_glGetShaderSource;
  }
  if (!debug_fn.glGetStringFn) {
    debug_fn.glGetStringFn = fn.glGetStringFn;
    fn.glGetStringFn = Debug_glGetString;
  }
  if (!debug_fn.glGetTexLevelParameterfvFn) {
    debug_fn.glGetTexLevelParameterfvFn = fn.glGetTexLevelParameterfvFn;
    fn.glGetTexLevelParameterfvFn = Debug_glGetTexLevelParameterfv;
  }
  if (!debug_fn.glGetTexLevelParameterivFn) {
    debug_fn.glGetTexLevelParameterivFn = fn.glGetTexLevelParameterivFn;
    fn.glGetTexLevelParameterivFn = Debug_glGetTexLevelParameteriv;
  }
  if (!debug_fn.glGetTexParameterfvFn) {
    debug_fn.glGetTexParameterfvFn = fn.glGetTexParameterfvFn;
    fn.glGetTexParameterfvFn = Debug_glGetTexParameterfv;
  }
  if (!debug_fn.glGetTexParameterivFn) {
    debug_fn.glGetTexParameterivFn = fn.glGetTexParameterivFn;
    fn.glGetTexParameterivFn = Debug_glGetTexParameteriv;
  }
  if (!debug_fn.glGetTranslatedShaderSourceANGLEFn) {
    debug_fn.glGetTranslatedShaderSourceANGLEFn = fn.glGetTranslatedShaderSourceANGLEFn;
    fn.glGetTranslatedShaderSourceANGLEFn = Debug_glGetTranslatedShaderSourceANGLE;
  }
  if (!debug_fn.glGetUniformfvFn) {
    debug_fn.glGetUniformfvFn = fn.glGetUniformfvFn;
    fn.glGetUniformfvFn = Debug_glGetUniformfv;
  }
  if (!debug_fn.glGetUniformivFn) {
    debug_fn.glGetUniformivFn = fn.glGetUniformivFn;
    fn.glGetUniformivFn = Debug_glGetUniformiv;
  }
  if (!debug_fn.glGetUniformLocationFn) {
    debug_fn.glGetUniformLocationFn = fn.glGetUniformLocationFn;
    fn.glGetUniformLocationFn = Debug_glGetUniformLocation;
  }
  if (!debug_fn.glGetVertexAttribfvFn) {
    debug_fn.glGetVertexAttribfvFn = fn.glGetVertexAttribfvFn;
    fn.glGetVertexAttribfvFn = Debug_glGetVertexAttribfv;
  }
  if (!debug_fn.glGetVertexAttribivFn) {
    debug_fn.glGetVertexAttribivFn = fn.glGetVertexAttribivFn;
    fn.glGetVertexAttribivFn = Debug_glGetVertexAttribiv;
  }
  if (!debug_fn.glGetVertexAttribPointervFn) {
    debug_fn.glGetVertexAttribPointervFn = fn.glGetVertexAttribPointervFn;
    fn.glGetVertexAttribPointervFn = Debug_glGetVertexAttribPointerv;
  }
  if (!debug_fn.glHintFn) {
    debug_fn.glHintFn = fn.glHintFn;
    fn.glHintFn = Debug_glHint;
  }
  if (!debug_fn.glIsBufferFn) {
    debug_fn.glIsBufferFn = fn.glIsBufferFn;
    fn.glIsBufferFn = Debug_glIsBuffer;
  }
  if (!debug_fn.glIsEnabledFn) {
    debug_fn.glIsEnabledFn = fn.glIsEnabledFn;
    fn.glIsEnabledFn = Debug_glIsEnabled;
  }
  if (!debug_fn.glIsFramebufferEXTFn) {
    debug_fn.glIsFramebufferEXTFn = fn.glIsFramebufferEXTFn;
    fn.glIsFramebufferEXTFn = Debug_glIsFramebufferEXT;
  }
  if (!debug_fn.glIsProgramFn) {
    debug_fn.glIsProgramFn = fn.glIsProgramFn;
    fn.glIsProgramFn = Debug_glIsProgram;
  }
  if (!debug_fn.glIsQueryARBFn) {
    debug_fn.glIsQueryARBFn = fn.glIsQueryARBFn;
    fn.glIsQueryARBFn = Debug_glIsQueryARB;
  }
  if (!debug_fn.glIsRenderbufferEXTFn) {
    debug_fn.glIsRenderbufferEXTFn = fn.glIsRenderbufferEXTFn;
    fn.glIsRenderbufferEXTFn = Debug_glIsRenderbufferEXT;
  }
  if (!debug_fn.glIsShaderFn) {
    debug_fn.glIsShaderFn = fn.glIsShaderFn;
    fn.glIsShaderFn = Debug_glIsShader;
  }
  if (!debug_fn.glIsTextureFn) {
    debug_fn.glIsTextureFn = fn.glIsTextureFn;
    fn.glIsTextureFn = Debug_glIsTexture;
  }
  if (!debug_fn.glLineWidthFn) {
    debug_fn.glLineWidthFn = fn.glLineWidthFn;
    fn.glLineWidthFn = Debug_glLineWidth;
  }
  if (!debug_fn.glLinkProgramFn) {
    debug_fn.glLinkProgramFn = fn.glLinkProgramFn;
    fn.glLinkProgramFn = Debug_glLinkProgram;
  }
  if (!debug_fn.glMapBufferFn) {
    debug_fn.glMapBufferFn = fn.glMapBufferFn;
    fn.glMapBufferFn = Debug_glMapBuffer;
  }
  if (!debug_fn.glPixelStoreiFn) {
    debug_fn.glPixelStoreiFn = fn.glPixelStoreiFn;
    fn.glPixelStoreiFn = Debug_glPixelStorei;
  }
  if (!debug_fn.glPointParameteriFn) {
    debug_fn.glPointParameteriFn = fn.glPointParameteriFn;
    fn.glPointParameteriFn = Debug_glPointParameteri;
  }
  if (!debug_fn.glPolygonOffsetFn) {
    debug_fn.glPolygonOffsetFn = fn.glPolygonOffsetFn;
    fn.glPolygonOffsetFn = Debug_glPolygonOffset;
  }
  if (!debug_fn.glProgramBinaryFn) {
    debug_fn.glProgramBinaryFn = fn.glProgramBinaryFn;
    fn.glProgramBinaryFn = Debug_glProgramBinary;
  }
  if (!debug_fn.glProgramParameteriFn) {
    debug_fn.glProgramParameteriFn = fn.glProgramParameteriFn;
    fn.glProgramParameteriFn = Debug_glProgramParameteri;
  }
  if (!debug_fn.glQueryCounterFn) {
    debug_fn.glQueryCounterFn = fn.glQueryCounterFn;
    fn.glQueryCounterFn = Debug_glQueryCounter;
  }
  if (!debug_fn.glReadBufferFn) {
    debug_fn.glReadBufferFn = fn.glReadBufferFn;
    fn.glReadBufferFn = Debug_glReadBuffer;
  }
  if (!debug_fn.glReadPixelsFn) {
    debug_fn.glReadPixelsFn = fn.glReadPixelsFn;
    fn.glReadPixelsFn = Debug_glReadPixels;
  }
  if (!debug_fn.glReleaseShaderCompilerFn) {
    debug_fn.glReleaseShaderCompilerFn = fn.glReleaseShaderCompilerFn;
    fn.glReleaseShaderCompilerFn = Debug_glReleaseShaderCompiler;
  }
  if (!debug_fn.glRenderbufferStorageMultisampleEXTFn) {
    debug_fn.glRenderbufferStorageMultisampleEXTFn = fn.glRenderbufferStorageMultisampleEXTFn;
    fn.glRenderbufferStorageMultisampleEXTFn = Debug_glRenderbufferStorageMultisampleEXT;
  }
  if (!debug_fn.glRenderbufferStorageMultisampleANGLEFn) {
    debug_fn.glRenderbufferStorageMultisampleANGLEFn = fn.glRenderbufferStorageMultisampleANGLEFn;
    fn.glRenderbufferStorageMultisampleANGLEFn = Debug_glRenderbufferStorageMultisampleANGLE;
  }
  if (!debug_fn.glRenderbufferStorageEXTFn) {
    debug_fn.glRenderbufferStorageEXTFn = fn.glRenderbufferStorageEXTFn;
    fn.glRenderbufferStorageEXTFn = Debug_glRenderbufferStorageEXT;
  }
  if (!debug_fn.glSampleCoverageFn) {
    debug_fn.glSampleCoverageFn = fn.glSampleCoverageFn;
    fn.glSampleCoverageFn = Debug_glSampleCoverage;
  }
  if (!debug_fn.glScissorFn) {
    debug_fn.glScissorFn = fn.glScissorFn;
    fn.glScissorFn = Debug_glScissor;
  }
  if (!debug_fn.glShaderBinaryFn) {
    debug_fn.glShaderBinaryFn = fn.glShaderBinaryFn;
    fn.glShaderBinaryFn = Debug_glShaderBinary;
  }
  if (!debug_fn.glShaderSourceFn) {
    debug_fn.glShaderSourceFn = fn.glShaderSourceFn;
    fn.glShaderSourceFn = Debug_glShaderSource;
  }
  if (!debug_fn.glStencilFuncFn) {
    debug_fn.glStencilFuncFn = fn.glStencilFuncFn;
    fn.glStencilFuncFn = Debug_glStencilFunc;
  }
  if (!debug_fn.glStencilFuncSeparateFn) {
    debug_fn.glStencilFuncSeparateFn = fn.glStencilFuncSeparateFn;
    fn.glStencilFuncSeparateFn = Debug_glStencilFuncSeparate;
  }
  if (!debug_fn.glStencilMaskFn) {
    debug_fn.glStencilMaskFn = fn.glStencilMaskFn;
    fn.glStencilMaskFn = Debug_glStencilMask;
  }
  if (!debug_fn.glStencilMaskSeparateFn) {
    debug_fn.glStencilMaskSeparateFn = fn.glStencilMaskSeparateFn;
    fn.glStencilMaskSeparateFn = Debug_glStencilMaskSeparate;
  }
  if (!debug_fn.glStencilOpFn) {
    debug_fn.glStencilOpFn = fn.glStencilOpFn;
    fn.glStencilOpFn = Debug_glStencilOp;
  }
  if (!debug_fn.glStencilOpSeparateFn) {
    debug_fn.glStencilOpSeparateFn = fn.glStencilOpSeparateFn;
    fn.glStencilOpSeparateFn = Debug_glStencilOpSeparate;
  }
  if (!debug_fn.glTexImage2DFn) {
    debug_fn.glTexImage2DFn = fn.glTexImage2DFn;
    fn.glTexImage2DFn = Debug_glTexImage2D;
  }
  if (!debug_fn.glTexParameterfFn) {
    debug_fn.glTexParameterfFn = fn.glTexParameterfFn;
    fn.glTexParameterfFn = Debug_glTexParameterf;
  }
  if (!debug_fn.glTexParameterfvFn) {
    debug_fn.glTexParameterfvFn = fn.glTexParameterfvFn;
    fn.glTexParameterfvFn = Debug_glTexParameterfv;
  }
  if (!debug_fn.glTexParameteriFn) {
    debug_fn.glTexParameteriFn = fn.glTexParameteriFn;
    fn.glTexParameteriFn = Debug_glTexParameteri;
  }
  if (!debug_fn.glTexParameterivFn) {
    debug_fn.glTexParameterivFn = fn.glTexParameterivFn;
    fn.glTexParameterivFn = Debug_glTexParameteriv;
  }
  if (!debug_fn.glTexStorage2DEXTFn) {
    debug_fn.glTexStorage2DEXTFn = fn.glTexStorage2DEXTFn;
    fn.glTexStorage2DEXTFn = Debug_glTexStorage2DEXT;
  }
  if (!debug_fn.glTexSubImage2DFn) {
    debug_fn.glTexSubImage2DFn = fn.glTexSubImage2DFn;
    fn.glTexSubImage2DFn = Debug_glTexSubImage2D;
  }
  if (!debug_fn.glUniform1fFn) {
    debug_fn.glUniform1fFn = fn.glUniform1fFn;
    fn.glUniform1fFn = Debug_glUniform1f;
  }
  if (!debug_fn.glUniform1fvFn) {
    debug_fn.glUniform1fvFn = fn.glUniform1fvFn;
    fn.glUniform1fvFn = Debug_glUniform1fv;
  }
  if (!debug_fn.glUniform1iFn) {
    debug_fn.glUniform1iFn = fn.glUniform1iFn;
    fn.glUniform1iFn = Debug_glUniform1i;
  }
  if (!debug_fn.glUniform1ivFn) {
    debug_fn.glUniform1ivFn = fn.glUniform1ivFn;
    fn.glUniform1ivFn = Debug_glUniform1iv;
  }
  if (!debug_fn.glUniform2fFn) {
    debug_fn.glUniform2fFn = fn.glUniform2fFn;
    fn.glUniform2fFn = Debug_glUniform2f;
  }
  if (!debug_fn.glUniform2fvFn) {
    debug_fn.glUniform2fvFn = fn.glUniform2fvFn;
    fn.glUniform2fvFn = Debug_glUniform2fv;
  }
  if (!debug_fn.glUniform2iFn) {
    debug_fn.glUniform2iFn = fn.glUniform2iFn;
    fn.glUniform2iFn = Debug_glUniform2i;
  }
  if (!debug_fn.glUniform2ivFn) {
    debug_fn.glUniform2ivFn = fn.glUniform2ivFn;
    fn.glUniform2ivFn = Debug_glUniform2iv;
  }
  if (!debug_fn.glUniform3fFn) {
    debug_fn.glUniform3fFn = fn.glUniform3fFn;
    fn.glUniform3fFn = Debug_glUniform3f;
  }
  if (!debug_fn.glUniform3fvFn) {
    debug_fn.glUniform3fvFn = fn.glUniform3fvFn;
    fn.glUniform3fvFn = Debug_glUniform3fv;
  }
  if (!debug_fn.glUniform3iFn) {
    debug_fn.glUniform3iFn = fn.glUniform3iFn;
    fn.glUniform3iFn = Debug_glUniform3i;
  }
  if (!debug_fn.glUniform3ivFn) {
    debug_fn.glUniform3ivFn = fn.glUniform3ivFn;
    fn.glUniform3ivFn = Debug_glUniform3iv;
  }
  if (!debug_fn.glUniform4fFn) {
    debug_fn.glUniform4fFn = fn.glUniform4fFn;
    fn.glUniform4fFn = Debug_glUniform4f;
  }
  if (!debug_fn.glUniform4fvFn) {
    debug_fn.glUniform4fvFn = fn.glUniform4fvFn;
    fn.glUniform4fvFn = Debug_glUniform4fv;
  }
  if (!debug_fn.glUniform4iFn) {
    debug_fn.glUniform4iFn = fn.glUniform4iFn;
    fn.glUniform4iFn = Debug_glUniform4i;
  }
  if (!debug_fn.glUniform4ivFn) {
    debug_fn.glUniform4ivFn = fn.glUniform4ivFn;
    fn.glUniform4ivFn = Debug_glUniform4iv;
  }
  if (!debug_fn.glUniformMatrix2fvFn) {
    debug_fn.glUniformMatrix2fvFn = fn.glUniformMatrix2fvFn;
    fn.glUniformMatrix2fvFn = Debug_glUniformMatrix2fv;
  }
  if (!debug_fn.glUniformMatrix3fvFn) {
    debug_fn.glUniformMatrix3fvFn = fn.glUniformMatrix3fvFn;
    fn.glUniformMatrix3fvFn = Debug_glUniformMatrix3fv;
  }
  if (!debug_fn.glUniformMatrix4fvFn) {
    debug_fn.glUniformMatrix4fvFn = fn.glUniformMatrix4fvFn;
    fn.glUniformMatrix4fvFn = Debug_glUniformMatrix4fv;
  }
  if (!debug_fn.glUnmapBufferFn) {
    debug_fn.glUnmapBufferFn = fn.glUnmapBufferFn;
    fn.glUnmapBufferFn = Debug_glUnmapBuffer;
  }
  if (!debug_fn.glUseProgramFn) {
    debug_fn.glUseProgramFn = fn.glUseProgramFn;
    fn.glUseProgramFn = Debug_glUseProgram;
  }
  if (!debug_fn.glValidateProgramFn) {
    debug_fn.glValidateProgramFn = fn.glValidateProgramFn;
    fn.glValidateProgramFn = Debug_glValidateProgram;
  }
  if (!debug_fn.glVertexAttrib1fFn) {
    debug_fn.glVertexAttrib1fFn = fn.glVertexAttrib1fFn;
    fn.glVertexAttrib1fFn = Debug_glVertexAttrib1f;
  }
  if (!debug_fn.glVertexAttrib1fvFn) {
    debug_fn.glVertexAttrib1fvFn = fn.glVertexAttrib1fvFn;
    fn.glVertexAttrib1fvFn = Debug_glVertexAttrib1fv;
  }
  if (!debug_fn.glVertexAttrib2fFn) {
    debug_fn.glVertexAttrib2fFn = fn.glVertexAttrib2fFn;
    fn.glVertexAttrib2fFn = Debug_glVertexAttrib2f;
  }
  if (!debug_fn.glVertexAttrib2fvFn) {
    debug_fn.glVertexAttrib2fvFn = fn.glVertexAttrib2fvFn;
    fn.glVertexAttrib2fvFn = Debug_glVertexAttrib2fv;
  }
  if (!debug_fn.glVertexAttrib3fFn) {
    debug_fn.glVertexAttrib3fFn = fn.glVertexAttrib3fFn;
    fn.glVertexAttrib3fFn = Debug_glVertexAttrib3f;
  }
  if (!debug_fn.glVertexAttrib3fvFn) {
    debug_fn.glVertexAttrib3fvFn = fn.glVertexAttrib3fvFn;
    fn.glVertexAttrib3fvFn = Debug_glVertexAttrib3fv;
  }
  if (!debug_fn.glVertexAttrib4fFn) {
    debug_fn.glVertexAttrib4fFn = fn.glVertexAttrib4fFn;
    fn.glVertexAttrib4fFn = Debug_glVertexAttrib4f;
  }
  if (!debug_fn.glVertexAttrib4fvFn) {
    debug_fn.glVertexAttrib4fvFn = fn.glVertexAttrib4fvFn;
    fn.glVertexAttrib4fvFn = Debug_glVertexAttrib4fv;
  }
  if (!debug_fn.glVertexAttribPointerFn) {
    debug_fn.glVertexAttribPointerFn = fn.glVertexAttribPointerFn;
    fn.glVertexAttribPointerFn = Debug_glVertexAttribPointer;
  }
  if (!debug_fn.glViewportFn) {
    debug_fn.glViewportFn = fn.glViewportFn;
    fn.glViewportFn = Debug_glViewport;
  }
  if (!debug_fn.glGenFencesNVFn) {
    debug_fn.glGenFencesNVFn = fn.glGenFencesNVFn;
    fn.glGenFencesNVFn = Debug_glGenFencesNV;
  }
  if (!debug_fn.glDeleteFencesNVFn) {
    debug_fn.glDeleteFencesNVFn = fn.glDeleteFencesNVFn;
    fn.glDeleteFencesNVFn = Debug_glDeleteFencesNV;
  }
  if (!debug_fn.glSetFenceNVFn) {
    debug_fn.glSetFenceNVFn = fn.glSetFenceNVFn;
    fn.glSetFenceNVFn = Debug_glSetFenceNV;
  }
  if (!debug_fn.glTestFenceNVFn) {
    debug_fn.glTestFenceNVFn = fn.glTestFenceNVFn;
    fn.glTestFenceNVFn = Debug_glTestFenceNV;
  }
  if (!debug_fn.glFinishFenceNVFn) {
    debug_fn.glFinishFenceNVFn = fn.glFinishFenceNVFn;
    fn.glFinishFenceNVFn = Debug_glFinishFenceNV;
  }
  if (!debug_fn.glIsFenceNVFn) {
    debug_fn.glIsFenceNVFn = fn.glIsFenceNVFn;
    fn.glIsFenceNVFn = Debug_glIsFenceNV;
  }
  if (!debug_fn.glGetFenceivNVFn) {
    debug_fn.glGetFenceivNVFn = fn.glGetFenceivNVFn;
    fn.glGetFenceivNVFn = Debug_glGetFenceivNV;
  }
  if (!debug_fn.glFenceSyncFn) {
    debug_fn.glFenceSyncFn = fn.glFenceSyncFn;
    fn.glFenceSyncFn = Debug_glFenceSync;
  }
  if (!debug_fn.glDeleteSyncFn) {
    debug_fn.glDeleteSyncFn = fn.glDeleteSyncFn;
    fn.glDeleteSyncFn = Debug_glDeleteSync;
  }
  if (!debug_fn.glGetSyncivFn) {
    debug_fn.glGetSyncivFn = fn.glGetSyncivFn;
    fn.glGetSyncivFn = Debug_glGetSynciv;
  }
  if (!debug_fn.glDrawArraysInstancedANGLEFn) {
    debug_fn.glDrawArraysInstancedANGLEFn = fn.glDrawArraysInstancedANGLEFn;
    fn.glDrawArraysInstancedANGLEFn = Debug_glDrawArraysInstancedANGLE;
  }
  if (!debug_fn.glDrawElementsInstancedANGLEFn) {
    debug_fn.glDrawElementsInstancedANGLEFn = fn.glDrawElementsInstancedANGLEFn;
    fn.glDrawElementsInstancedANGLEFn = Debug_glDrawElementsInstancedANGLE;
  }
  if (!debug_fn.glVertexAttribDivisorANGLEFn) {
    debug_fn.glVertexAttribDivisorANGLEFn = fn.glVertexAttribDivisorANGLEFn;
    fn.glVertexAttribDivisorANGLEFn = Debug_glVertexAttribDivisorANGLE;
  }
  if (!debug_fn.glGenVertexArraysOESFn) {
    debug_fn.glGenVertexArraysOESFn = fn.glGenVertexArraysOESFn;
    fn.glGenVertexArraysOESFn = Debug_glGenVertexArraysOES;
  }
  if (!debug_fn.glDeleteVertexArraysOESFn) {
    debug_fn.glDeleteVertexArraysOESFn = fn.glDeleteVertexArraysOESFn;
    fn.glDeleteVertexArraysOESFn = Debug_glDeleteVertexArraysOES;
  }
  if (!debug_fn.glBindVertexArrayOESFn) {
    debug_fn.glBindVertexArrayOESFn = fn.glBindVertexArrayOESFn;
    fn.glBindVertexArrayOESFn = Debug_glBindVertexArrayOES;
  }
  if (!debug_fn.glIsVertexArrayOESFn) {
    debug_fn.glIsVertexArrayOESFn = fn.glIsVertexArrayOESFn;
    fn.glIsVertexArrayOESFn = Debug_glIsVertexArrayOES;
  }
  if (!debug_fn.glDiscardFramebufferEXTFn) {
    debug_fn.glDiscardFramebufferEXTFn = fn.glDiscardFramebufferEXTFn;
    fn.glDiscardFramebufferEXTFn = Debug_glDiscardFramebufferEXT;
  }
  g_debugBindingsInitialized = true;
}

void DriverGL::UpdateDebugExtensionBindings() {
  if (debug_fn.glGenVertexArraysOESFn != fn.glGenVertexArraysOESFn &&
      fn.glGenVertexArraysOESFn != Debug_glGenVertexArraysOES) {
    debug_fn.glGenVertexArraysOESFn = fn.glGenVertexArraysOESFn;
    fn.glGenVertexArraysOESFn = Debug_glGenVertexArraysOES;
  }
  if (debug_fn.glGenVertexArraysOESFn != fn.glGenVertexArraysOESFn &&
      fn.glGenVertexArraysOESFn != Debug_glGenVertexArraysOES) {
    debug_fn.glGenVertexArraysOESFn = fn.glGenVertexArraysOESFn;
    fn.glGenVertexArraysOESFn = Debug_glGenVertexArraysOES;
  }
  if (debug_fn.glGenVertexArraysOESFn != fn.glGenVertexArraysOESFn &&
      fn.glGenVertexArraysOESFn != Debug_glGenVertexArraysOES) {
    debug_fn.glGenVertexArraysOESFn = fn.glGenVertexArraysOESFn;
    fn.glGenVertexArraysOESFn = Debug_glGenVertexArraysOES;
  }
  if (debug_fn.glDeleteVertexArraysOESFn != fn.glDeleteVertexArraysOESFn &&
      fn.glDeleteVertexArraysOESFn != Debug_glDeleteVertexArraysOES) {
    debug_fn.glDeleteVertexArraysOESFn = fn.glDeleteVertexArraysOESFn;
    fn.glDeleteVertexArraysOESFn = Debug_glDeleteVertexArraysOES;
  }
  if (debug_fn.glDeleteVertexArraysOESFn != fn.glDeleteVertexArraysOESFn &&
      fn.glDeleteVertexArraysOESFn != Debug_glDeleteVertexArraysOES) {
    debug_fn.glDeleteVertexArraysOESFn = fn.glDeleteVertexArraysOESFn;
    fn.glDeleteVertexArraysOESFn = Debug_glDeleteVertexArraysOES;
  }
  if (debug_fn.glDeleteVertexArraysOESFn != fn.glDeleteVertexArraysOESFn &&
      fn.glDeleteVertexArraysOESFn != Debug_glDeleteVertexArraysOES) {
    debug_fn.glDeleteVertexArraysOESFn = fn.glDeleteVertexArraysOESFn;
    fn.glDeleteVertexArraysOESFn = Debug_glDeleteVertexArraysOES;
  }
  if (debug_fn.glBindVertexArrayOESFn != fn.glBindVertexArrayOESFn &&
      fn.glBindVertexArrayOESFn != Debug_glBindVertexArrayOES) {
    debug_fn.glBindVertexArrayOESFn = fn.glBindVertexArrayOESFn;
    fn.glBindVertexArrayOESFn = Debug_glBindVertexArrayOES;
  }
  if (debug_fn.glBindVertexArrayOESFn != fn.glBindVertexArrayOESFn &&
      fn.glBindVertexArrayOESFn != Debug_glBindVertexArrayOES) {
    debug_fn.glBindVertexArrayOESFn = fn.glBindVertexArrayOESFn;
    fn.glBindVertexArrayOESFn = Debug_glBindVertexArrayOES;
  }
  if (debug_fn.glBindVertexArrayOESFn != fn.glBindVertexArrayOESFn &&
      fn.glBindVertexArrayOESFn != Debug_glBindVertexArrayOES) {
    debug_fn.glBindVertexArrayOESFn = fn.glBindVertexArrayOESFn;
    fn.glBindVertexArrayOESFn = Debug_glBindVertexArrayOES;
  }
  if (debug_fn.glIsVertexArrayOESFn != fn.glIsVertexArrayOESFn &&
      fn.glIsVertexArrayOESFn != Debug_glIsVertexArrayOES) {
    debug_fn.glIsVertexArrayOESFn = fn.glIsVertexArrayOESFn;
    fn.glIsVertexArrayOESFn = Debug_glIsVertexArrayOES;
  }
  if (debug_fn.glIsVertexArrayOESFn != fn.glIsVertexArrayOESFn &&
      fn.glIsVertexArrayOESFn != Debug_glIsVertexArrayOES) {
    debug_fn.glIsVertexArrayOESFn = fn.glIsVertexArrayOESFn;
    fn.glIsVertexArrayOESFn = Debug_glIsVertexArrayOES;
  }
  if (debug_fn.glIsVertexArrayOESFn != fn.glIsVertexArrayOESFn &&
      fn.glIsVertexArrayOESFn != Debug_glIsVertexArrayOES) {
    debug_fn.glIsVertexArrayOESFn = fn.glIsVertexArrayOESFn;
    fn.glIsVertexArrayOESFn = Debug_glIsVertexArrayOES;
  }
  if (debug_fn.glGenFencesNVFn != fn.glGenFencesNVFn &&
      fn.glGenFencesNVFn != Debug_glGenFencesNV) {
    debug_fn.glGenFencesNVFn = fn.glGenFencesNVFn;
    fn.glGenFencesNVFn = Debug_glGenFencesNV;
  }
  if (debug_fn.glDeleteFencesNVFn != fn.glDeleteFencesNVFn &&
      fn.glDeleteFencesNVFn != Debug_glDeleteFencesNV) {
    debug_fn.glDeleteFencesNVFn = fn.glDeleteFencesNVFn;
    fn.glDeleteFencesNVFn = Debug_glDeleteFencesNV;
  }
  if (debug_fn.glSetFenceNVFn != fn.glSetFenceNVFn &&
      fn.glSetFenceNVFn != Debug_glSetFenceNV) {
    debug_fn.glSetFenceNVFn = fn.glSetFenceNVFn;
    fn.glSetFenceNVFn = Debug_glSetFenceNV;
  }
  if (debug_fn.glTestFenceNVFn != fn.glTestFenceNVFn &&
      fn.glTestFenceNVFn != Debug_glTestFenceNV) {
    debug_fn.glTestFenceNVFn = fn.glTestFenceNVFn;
    fn.glTestFenceNVFn = Debug_glTestFenceNV;
  }
  if (debug_fn.glFinishFenceNVFn != fn.glFinishFenceNVFn &&
      fn.glFinishFenceNVFn != Debug_glFinishFenceNV) {
    debug_fn.glFinishFenceNVFn = fn.glFinishFenceNVFn;
    fn.glFinishFenceNVFn = Debug_glFinishFenceNV;
  }
  if (debug_fn.glIsFenceNVFn != fn.glIsFenceNVFn &&
      fn.glIsFenceNVFn != Debug_glIsFenceNV) {
    debug_fn.glIsFenceNVFn = fn.glIsFenceNVFn;
    fn.glIsFenceNVFn = Debug_glIsFenceNV;
  }
  if (debug_fn.glGetFenceivNVFn != fn.glGetFenceivNVFn &&
      fn.glGetFenceivNVFn != Debug_glGetFenceivNV) {
    debug_fn.glGetFenceivNVFn = fn.glGetFenceivNVFn;
    fn.glGetFenceivNVFn = Debug_glGetFenceivNV;
  }
  if (debug_fn.glGetProgramBinaryFn != fn.glGetProgramBinaryFn &&
      fn.glGetProgramBinaryFn != Debug_glGetProgramBinary) {
    debug_fn.glGetProgramBinaryFn = fn.glGetProgramBinaryFn;
    fn.glGetProgramBinaryFn = Debug_glGetProgramBinary;
  }
  if (debug_fn.glGetProgramBinaryFn != fn.glGetProgramBinaryFn &&
      fn.glGetProgramBinaryFn != Debug_glGetProgramBinary) {
    debug_fn.glGetProgramBinaryFn = fn.glGetProgramBinaryFn;
    fn.glGetProgramBinaryFn = Debug_glGetProgramBinary;
  }
  if (debug_fn.glProgramBinaryFn != fn.glProgramBinaryFn &&
      fn.glProgramBinaryFn != Debug_glProgramBinary) {
    debug_fn.glProgramBinaryFn = fn.glProgramBinaryFn;
    fn.glProgramBinaryFn = Debug_glProgramBinary;
  }
  if (debug_fn.glProgramBinaryFn != fn.glProgramBinaryFn &&
      fn.glProgramBinaryFn != Debug_glProgramBinary) {
    debug_fn.glProgramBinaryFn = fn.glProgramBinaryFn;
    fn.glProgramBinaryFn = Debug_glProgramBinary;
  }
  if (debug_fn.glGenVertexArraysOESFn != fn.glGenVertexArraysOESFn &&
      fn.glGenVertexArraysOESFn != Debug_glGenVertexArraysOES) {
    debug_fn.glGenVertexArraysOESFn = fn.glGenVertexArraysOESFn;
    fn.glGenVertexArraysOESFn = Debug_glGenVertexArraysOES;
  }
  if (debug_fn.glGenVertexArraysOESFn != fn.glGenVertexArraysOESFn &&
      fn.glGenVertexArraysOESFn != Debug_glGenVertexArraysOES) {
    debug_fn.glGenVertexArraysOESFn = fn.glGenVertexArraysOESFn;
    fn.glGenVertexArraysOESFn = Debug_glGenVertexArraysOES;
  }
  if (debug_fn.glGenVertexArraysOESFn != fn.glGenVertexArraysOESFn &&
      fn.glGenVertexArraysOESFn != Debug_glGenVertexArraysOES) {
    debug_fn.glGenVertexArraysOESFn = fn.glGenVertexArraysOESFn;
    fn.glGenVertexArraysOESFn = Debug_glGenVertexArraysOES;
  }
  if (debug_fn.glDeleteVertexArraysOESFn != fn.glDeleteVertexArraysOESFn &&
      fn.glDeleteVertexArraysOESFn != Debug_glDeleteVertexArraysOES) {
    debug_fn.glDeleteVertexArraysOESFn = fn.glDeleteVertexArraysOESFn;
    fn.glDeleteVertexArraysOESFn = Debug_glDeleteVertexArraysOES;
  }
  if (debug_fn.glDeleteVertexArraysOESFn != fn.glDeleteVertexArraysOESFn &&
      fn.glDeleteVertexArraysOESFn != Debug_glDeleteVertexArraysOES) {
    debug_fn.glDeleteVertexArraysOESFn = fn.glDeleteVertexArraysOESFn;
    fn.glDeleteVertexArraysOESFn = Debug_glDeleteVertexArraysOES;
  }
  if (debug_fn.glDeleteVertexArraysOESFn != fn.glDeleteVertexArraysOESFn &&
      fn.glDeleteVertexArraysOESFn != Debug_glDeleteVertexArraysOES) {
    debug_fn.glDeleteVertexArraysOESFn = fn.glDeleteVertexArraysOESFn;
    fn.glDeleteVertexArraysOESFn = Debug_glDeleteVertexArraysOES;
  }
  if (debug_fn.glBindVertexArrayOESFn != fn.glBindVertexArrayOESFn &&
      fn.glBindVertexArrayOESFn != Debug_glBindVertexArrayOES) {
    debug_fn.glBindVertexArrayOESFn = fn.glBindVertexArrayOESFn;
    fn.glBindVertexArrayOESFn = Debug_glBindVertexArrayOES;
  }
  if (debug_fn.glBindVertexArrayOESFn != fn.glBindVertexArrayOESFn &&
      fn.glBindVertexArrayOESFn != Debug_glBindVertexArrayOES) {
    debug_fn.glBindVertexArrayOESFn = fn.glBindVertexArrayOESFn;
    fn.glBindVertexArrayOESFn = Debug_glBindVertexArrayOES;
  }
  if (debug_fn.glBindVertexArrayOESFn != fn.glBindVertexArrayOESFn &&
      fn.glBindVertexArrayOESFn != Debug_glBindVertexArrayOES) {
    debug_fn.glBindVertexArrayOESFn = fn.glBindVertexArrayOESFn;
    fn.glBindVertexArrayOESFn = Debug_glBindVertexArrayOES;
  }
  if (debug_fn.glIsVertexArrayOESFn != fn.glIsVertexArrayOESFn &&
      fn.glIsVertexArrayOESFn != Debug_glIsVertexArrayOES) {
    debug_fn.glIsVertexArrayOESFn = fn.glIsVertexArrayOESFn;
    fn.glIsVertexArrayOESFn = Debug_glIsVertexArrayOES;
  }
  if (debug_fn.glIsVertexArrayOESFn != fn.glIsVertexArrayOESFn &&
      fn.glIsVertexArrayOESFn != Debug_glIsVertexArrayOES) {
    debug_fn.glIsVertexArrayOESFn = fn.glIsVertexArrayOESFn;
    fn.glIsVertexArrayOESFn = Debug_glIsVertexArrayOES;
  }
  if (debug_fn.glIsVertexArrayOESFn != fn.glIsVertexArrayOESFn &&
      fn.glIsVertexArrayOESFn != Debug_glIsVertexArrayOES) {
    debug_fn.glIsVertexArrayOESFn = fn.glIsVertexArrayOESFn;
    fn.glIsVertexArrayOESFn = Debug_glIsVertexArrayOES;
  }
  if (debug_fn.glGenVertexArraysOESFn != fn.glGenVertexArraysOESFn &&
      fn.glGenVertexArraysOESFn != Debug_glGenVertexArraysOES) {
    debug_fn.glGenVertexArraysOESFn = fn.glGenVertexArraysOESFn;
    fn.glGenVertexArraysOESFn = Debug_glGenVertexArraysOES;
  }
  if (debug_fn.glDeleteVertexArraysOESFn != fn.glDeleteVertexArraysOESFn &&
      fn.glDeleteVertexArraysOESFn != Debug_glDeleteVertexArraysOES) {
    debug_fn.glDeleteVertexArraysOESFn = fn.glDeleteVertexArraysOESFn;
    fn.glDeleteVertexArraysOESFn = Debug_glDeleteVertexArraysOES;
  }
  if (debug_fn.glBindVertexArrayOESFn != fn.glBindVertexArrayOESFn &&
      fn.glBindVertexArrayOESFn != Debug_glBindVertexArrayOES) {
    debug_fn.glBindVertexArrayOESFn = fn.glBindVertexArrayOESFn;
    fn.glBindVertexArrayOESFn = Debug_glBindVertexArrayOES;
  }
  if (debug_fn.glIsVertexArrayOESFn != fn.glIsVertexArrayOESFn &&
      fn.glIsVertexArrayOESFn != Debug_glIsVertexArrayOES) {
    debug_fn.glIsVertexArrayOESFn = fn.glIsVertexArrayOESFn;
    fn.glIsVertexArrayOESFn = Debug_glIsVertexArrayOES;
  }
  if (debug_fn.glGetTranslatedShaderSourceANGLEFn != fn.glGetTranslatedShaderSourceANGLEFn &&
      fn.glGetTranslatedShaderSourceANGLEFn != Debug_glGetTranslatedShaderSourceANGLE) {
    debug_fn.glGetTranslatedShaderSourceANGLEFn = fn.glGetTranslatedShaderSourceANGLEFn;
    fn.glGetTranslatedShaderSourceANGLEFn = Debug_glGetTranslatedShaderSourceANGLE;
  }
  if (debug_fn.glGetProgramBinaryFn != fn.glGetProgramBinaryFn &&
      fn.glGetProgramBinaryFn != Debug_glGetProgramBinary) {
    debug_fn.glGetProgramBinaryFn = fn.glGetProgramBinaryFn;
    fn.glGetProgramBinaryFn = Debug_glGetProgramBinary;
  }
  if (debug_fn.glGetProgramBinaryFn != fn.glGetProgramBinaryFn &&
      fn.glGetProgramBinaryFn != Debug_glGetProgramBinary) {
    debug_fn.glGetProgramBinaryFn = fn.glGetProgramBinaryFn;
    fn.glGetProgramBinaryFn = Debug_glGetProgramBinary;
  }
  if (debug_fn.glProgramBinaryFn != fn.glProgramBinaryFn &&
      fn.glProgramBinaryFn != Debug_glProgramBinary) {
    debug_fn.glProgramBinaryFn = fn.glProgramBinaryFn;
    fn.glProgramBinaryFn = Debug_glProgramBinary;
  }
  if (debug_fn.glProgramBinaryFn != fn.glProgramBinaryFn &&
      fn.glProgramBinaryFn != Debug_glProgramBinary) {
    debug_fn.glProgramBinaryFn = fn.glProgramBinaryFn;
    fn.glProgramBinaryFn = Debug_glProgramBinary;
  }
  if (debug_fn.glProgramParameteriFn != fn.glProgramParameteriFn &&
      fn.glProgramParameteriFn != Debug_glProgramParameteri) {
    debug_fn.glProgramParameteriFn = fn.glProgramParameteriFn;
    fn.glProgramParameteriFn = Debug_glProgramParameteri;
  }
  if (debug_fn.glBlitFramebufferANGLEFn != fn.glBlitFramebufferANGLEFn &&
      fn.glBlitFramebufferANGLEFn != Debug_glBlitFramebufferANGLE) {
    debug_fn.glBlitFramebufferANGLEFn = fn.glBlitFramebufferANGLEFn;
    fn.glBlitFramebufferANGLEFn = Debug_glBlitFramebufferANGLE;
  }
  if (debug_fn.glGenVertexArraysOESFn != fn.glGenVertexArraysOESFn &&
      fn.glGenVertexArraysOESFn != Debug_glGenVertexArraysOES) {
    debug_fn.glGenVertexArraysOESFn = fn.glGenVertexArraysOESFn;
    fn.glGenVertexArraysOESFn = Debug_glGenVertexArraysOES;
  }
  if (debug_fn.glGenVertexArraysOESFn != fn.glGenVertexArraysOESFn &&
      fn.glGenVertexArraysOESFn != Debug_glGenVertexArraysOES) {
    debug_fn.glGenVertexArraysOESFn = fn.glGenVertexArraysOESFn;
    fn.glGenVertexArraysOESFn = Debug_glGenVertexArraysOES;
  }
  if (debug_fn.glGenVertexArraysOESFn != fn.glGenVertexArraysOESFn &&
      fn.glGenVertexArraysOESFn != Debug_glGenVertexArraysOES) {
    debug_fn.glGenVertexArraysOESFn = fn.glGenVertexArraysOESFn;
    fn.glGenVertexArraysOESFn = Debug_glGenVertexArraysOES;
  }
  if (debug_fn.glDeleteVertexArraysOESFn != fn.glDeleteVertexArraysOESFn &&
      fn.glDeleteVertexArraysOESFn != Debug_glDeleteVertexArraysOES) {
    debug_fn.glDeleteVertexArraysOESFn = fn.glDeleteVertexArraysOESFn;
    fn.glDeleteVertexArraysOESFn = Debug_glDeleteVertexArraysOES;
  }
  if (debug_fn.glDeleteVertexArraysOESFn != fn.glDeleteVertexArraysOESFn &&
      fn.glDeleteVertexArraysOESFn != Debug_glDeleteVertexArraysOES) {
    debug_fn.glDeleteVertexArraysOESFn = fn.glDeleteVertexArraysOESFn;
    fn.glDeleteVertexArraysOESFn = Debug_glDeleteVertexArraysOES;
  }
  if (debug_fn.glDeleteVertexArraysOESFn != fn.glDeleteVertexArraysOESFn &&
      fn.glDeleteVertexArraysOESFn != Debug_glDeleteVertexArraysOES) {
    debug_fn.glDeleteVertexArraysOESFn = fn.glDeleteVertexArraysOESFn;
    fn.glDeleteVertexArraysOESFn = Debug_glDeleteVertexArraysOES;
  }
  if (debug_fn.glBindVertexArrayOESFn != fn.glBindVertexArrayOESFn &&
      fn.glBindVertexArrayOESFn != Debug_glBindVertexArrayOES) {
    debug_fn.glBindVertexArrayOESFn = fn.glBindVertexArrayOESFn;
    fn.glBindVertexArrayOESFn = Debug_glBindVertexArrayOES;
  }
  if (debug_fn.glBindVertexArrayOESFn != fn.glBindVertexArrayOESFn &&
      fn.glBindVertexArrayOESFn != Debug_glBindVertexArrayOES) {
    debug_fn.glBindVertexArrayOESFn = fn.glBindVertexArrayOESFn;
    fn.glBindVertexArrayOESFn = Debug_glBindVertexArrayOES;
  }
  if (debug_fn.glBindVertexArrayOESFn != fn.glBindVertexArrayOESFn &&
      fn.glBindVertexArrayOESFn != Debug_glBindVertexArrayOES) {
    debug_fn.glBindVertexArrayOESFn = fn.glBindVertexArrayOESFn;
    fn.glBindVertexArrayOESFn = Debug_glBindVertexArrayOES;
  }
  if (debug_fn.glIsVertexArrayOESFn != fn.glIsVertexArrayOESFn &&
      fn.glIsVertexArrayOESFn != Debug_glIsVertexArrayOES) {
    debug_fn.glIsVertexArrayOESFn = fn.glIsVertexArrayOESFn;
    fn.glIsVertexArrayOESFn = Debug_glIsVertexArrayOES;
  }
  if (debug_fn.glIsVertexArrayOESFn != fn.glIsVertexArrayOESFn &&
      fn.glIsVertexArrayOESFn != Debug_glIsVertexArrayOES) {
    debug_fn.glIsVertexArrayOESFn = fn.glIsVertexArrayOESFn;
    fn.glIsVertexArrayOESFn = Debug_glIsVertexArrayOES;
  }
  if (debug_fn.glIsVertexArrayOESFn != fn.glIsVertexArrayOESFn &&
      fn.glIsVertexArrayOESFn != Debug_glIsVertexArrayOES) {
    debug_fn.glIsVertexArrayOESFn = fn.glIsVertexArrayOESFn;
    fn.glIsVertexArrayOESFn = Debug_glIsVertexArrayOES;
  }
  if (debug_fn.glRenderbufferStorageMultisampleANGLEFn != fn.glRenderbufferStorageMultisampleANGLEFn &&
      fn.glRenderbufferStorageMultisampleANGLEFn != Debug_glRenderbufferStorageMultisampleANGLE) {
    debug_fn.glRenderbufferStorageMultisampleANGLEFn = fn.glRenderbufferStorageMultisampleANGLEFn;
    fn.glRenderbufferStorageMultisampleANGLEFn = Debug_glRenderbufferStorageMultisampleANGLE;
  }
  if (debug_fn.glDrawArraysInstancedANGLEFn != fn.glDrawArraysInstancedANGLEFn &&
      fn.glDrawArraysInstancedANGLEFn != Debug_glDrawArraysInstancedANGLE) {
    debug_fn.glDrawArraysInstancedANGLEFn = fn.glDrawArraysInstancedANGLEFn;
    fn.glDrawArraysInstancedANGLEFn = Debug_glDrawArraysInstancedANGLE;
  }
  if (debug_fn.glDrawElementsInstancedANGLEFn != fn.glDrawElementsInstancedANGLEFn &&
      fn.glDrawElementsInstancedANGLEFn != Debug_glDrawElementsInstancedANGLE) {
    debug_fn.glDrawElementsInstancedANGLEFn = fn.glDrawElementsInstancedANGLEFn;
    fn.glDrawElementsInstancedANGLEFn = Debug_glDrawElementsInstancedANGLE;
  }
  if (debug_fn.glVertexAttribDivisorANGLEFn != fn.glVertexAttribDivisorANGLEFn &&
      fn.glVertexAttribDivisorANGLEFn != Debug_glVertexAttribDivisorANGLE) {
    debug_fn.glVertexAttribDivisorANGLEFn = fn.glVertexAttribDivisorANGLEFn;
    fn.glVertexAttribDivisorANGLEFn = Debug_glVertexAttribDivisorANGLE;
  }
  if (debug_fn.glRenderbufferStorageMultisampleEXTFn != fn.glRenderbufferStorageMultisampleEXTFn &&
      fn.glRenderbufferStorageMultisampleEXTFn != Debug_glRenderbufferStorageMultisampleEXT) {
    debug_fn.glRenderbufferStorageMultisampleEXTFn = fn.glRenderbufferStorageMultisampleEXTFn;
    fn.glRenderbufferStorageMultisampleEXTFn = Debug_glRenderbufferStorageMultisampleEXT;
  }
  if (debug_fn.glRenderbufferStorageMultisampleEXTFn != fn.glRenderbufferStorageMultisampleEXTFn &&
      fn.glRenderbufferStorageMultisampleEXTFn != Debug_glRenderbufferStorageMultisampleEXT) {
    debug_fn.glRenderbufferStorageMultisampleEXTFn = fn.glRenderbufferStorageMultisampleEXTFn;
    fn.glRenderbufferStorageMultisampleEXTFn = Debug_glRenderbufferStorageMultisampleEXT;
  }
  if (debug_fn.glGetGraphicsResetStatusARBFn != fn.glGetGraphicsResetStatusARBFn &&
      fn.glGetGraphicsResetStatusARBFn != Debug_glGetGraphicsResetStatusARB) {
    debug_fn.glGetGraphicsResetStatusARBFn = fn.glGetGraphicsResetStatusARBFn;
    fn.glGetGraphicsResetStatusARBFn = Debug_glGetGraphicsResetStatusARB;
  }
  if (debug_fn.glBeginQueryARBFn != fn.glBeginQueryARBFn &&
      fn.glBeginQueryARBFn != Debug_glBeginQueryARB) {
    debug_fn.glBeginQueryARBFn = fn.glBeginQueryARBFn;
    fn.glBeginQueryARBFn = Debug_glBeginQueryARB;
  }
  if (debug_fn.glDeleteQueriesARBFn != fn.glDeleteQueriesARBFn &&
      fn.glDeleteQueriesARBFn != Debug_glDeleteQueriesARB) {
    debug_fn.glDeleteQueriesARBFn = fn.glDeleteQueriesARBFn;
    fn.glDeleteQueriesARBFn = Debug_glDeleteQueriesARB;
  }
  if (debug_fn.glEndQueryARBFn != fn.glEndQueryARBFn &&
      fn.glEndQueryARBFn != Debug_glEndQueryARB) {
    debug_fn.glEndQueryARBFn = fn.glEndQueryARBFn;
    fn.glEndQueryARBFn = Debug_glEndQueryARB;
  }
  if (debug_fn.glGenQueriesARBFn != fn.glGenQueriesARBFn &&
      fn.glGenQueriesARBFn != Debug_glGenQueriesARB) {
    debug_fn.glGenQueriesARBFn = fn.glGenQueriesARBFn;
    fn.glGenQueriesARBFn = Debug_glGenQueriesARB;
  }
  if (debug_fn.glGetQueryivARBFn != fn.glGetQueryivARBFn &&
      fn.glGetQueryivARBFn != Debug_glGetQueryivARB) {
    debug_fn.glGetQueryivARBFn = fn.glGetQueryivARBFn;
    fn.glGetQueryivARBFn = Debug_glGetQueryivARB;
  }
  if (debug_fn.glGetQueryObjectuivARBFn != fn.glGetQueryObjectuivARBFn &&
      fn.glGetQueryObjectuivARBFn != Debug_glGetQueryObjectuivARB) {
    debug_fn.glGetQueryObjectuivARBFn = fn.glGetQueryObjectuivARBFn;
    fn.glGetQueryObjectuivARBFn = Debug_glGetQueryObjectuivARB;
  }
  if (debug_fn.glIsQueryARBFn != fn.glIsQueryARBFn &&
      fn.glIsQueryARBFn != Debug_glIsQueryARB) {
    debug_fn.glIsQueryARBFn = fn.glIsQueryARBFn;
    fn.glIsQueryARBFn = Debug_glIsQueryARB;
  }
  if (debug_fn.glBindFramebufferEXTFn != fn.glBindFramebufferEXTFn &&
      fn.glBindFramebufferEXTFn != Debug_glBindFramebufferEXT) {
    debug_fn.glBindFramebufferEXTFn = fn.glBindFramebufferEXTFn;
    fn.glBindFramebufferEXTFn = Debug_glBindFramebufferEXT;
  }
  if (debug_fn.glBindRenderbufferEXTFn != fn.glBindRenderbufferEXTFn &&
      fn.glBindRenderbufferEXTFn != Debug_glBindRenderbufferEXT) {
    debug_fn.glBindRenderbufferEXTFn = fn.glBindRenderbufferEXTFn;
    fn.glBindRenderbufferEXTFn = Debug_glBindRenderbufferEXT;
  }
  if (debug_fn.glCheckFramebufferStatusEXTFn != fn.glCheckFramebufferStatusEXTFn &&
      fn.glCheckFramebufferStatusEXTFn != Debug_glCheckFramebufferStatusEXT) {
    debug_fn.glCheckFramebufferStatusEXTFn = fn.glCheckFramebufferStatusEXTFn;
    fn.glCheckFramebufferStatusEXTFn = Debug_glCheckFramebufferStatusEXT;
  }
  if (debug_fn.glDeleteFramebuffersEXTFn != fn.glDeleteFramebuffersEXTFn &&
      fn.glDeleteFramebuffersEXTFn != Debug_glDeleteFramebuffersEXT) {
    debug_fn.glDeleteFramebuffersEXTFn = fn.glDeleteFramebuffersEXTFn;
    fn.glDeleteFramebuffersEXTFn = Debug_glDeleteFramebuffersEXT;
  }
  if (debug_fn.glDeleteRenderbuffersEXTFn != fn.glDeleteRenderbuffersEXTFn &&
      fn.glDeleteRenderbuffersEXTFn != Debug_glDeleteRenderbuffersEXT) {
    debug_fn.glDeleteRenderbuffersEXTFn = fn.glDeleteRenderbuffersEXTFn;
    fn.glDeleteRenderbuffersEXTFn = Debug_glDeleteRenderbuffersEXT;
  }
  if (debug_fn.glFramebufferRenderbufferEXTFn != fn.glFramebufferRenderbufferEXTFn &&
      fn.glFramebufferRenderbufferEXTFn != Debug_glFramebufferRenderbufferEXT) {
    debug_fn.glFramebufferRenderbufferEXTFn = fn.glFramebufferRenderbufferEXTFn;
    fn.glFramebufferRenderbufferEXTFn = Debug_glFramebufferRenderbufferEXT;
  }
  if (debug_fn.glFramebufferTexture2DEXTFn != fn.glFramebufferTexture2DEXTFn &&
      fn.glFramebufferTexture2DEXTFn != Debug_glFramebufferTexture2DEXT) {
    debug_fn.glFramebufferTexture2DEXTFn = fn.glFramebufferTexture2DEXTFn;
    fn.glFramebufferTexture2DEXTFn = Debug_glFramebufferTexture2DEXT;
  }
  if (debug_fn.glGenerateMipmapEXTFn != fn.glGenerateMipmapEXTFn &&
      fn.glGenerateMipmapEXTFn != Debug_glGenerateMipmapEXT) {
    debug_fn.glGenerateMipmapEXTFn = fn.glGenerateMipmapEXTFn;
    fn.glGenerateMipmapEXTFn = Debug_glGenerateMipmapEXT;
  }
  if (debug_fn.glGenFramebuffersEXTFn != fn.glGenFramebuffersEXTFn &&
      fn.glGenFramebuffersEXTFn != Debug_glGenFramebuffersEXT) {
    debug_fn.glGenFramebuffersEXTFn = fn.glGenFramebuffersEXTFn;
    fn.glGenFramebuffersEXTFn = Debug_glGenFramebuffersEXT;
  }
  if (debug_fn.glGenRenderbuffersEXTFn != fn.glGenRenderbuffersEXTFn &&
      fn.glGenRenderbuffersEXTFn != Debug_glGenRenderbuffersEXT) {
    debug_fn.glGenRenderbuffersEXTFn = fn.glGenRenderbuffersEXTFn;
    fn.glGenRenderbuffersEXTFn = Debug_glGenRenderbuffersEXT;
  }
  if (debug_fn.glGetFramebufferAttachmentParameterivEXTFn != fn.glGetFramebufferAttachmentParameterivEXTFn &&
      fn.glGetFramebufferAttachmentParameterivEXTFn != Debug_glGetFramebufferAttachmentParameterivEXT) {
    debug_fn.glGetFramebufferAttachmentParameterivEXTFn = fn.glGetFramebufferAttachmentParameterivEXTFn;
    fn.glGetFramebufferAttachmentParameterivEXTFn = Debug_glGetFramebufferAttachmentParameterivEXT;
  }
  if (debug_fn.glGetRenderbufferParameterivEXTFn != fn.glGetRenderbufferParameterivEXTFn &&
      fn.glGetRenderbufferParameterivEXTFn != Debug_glGetRenderbufferParameterivEXT) {
    debug_fn.glGetRenderbufferParameterivEXTFn = fn.glGetRenderbufferParameterivEXTFn;
    fn.glGetRenderbufferParameterivEXTFn = Debug_glGetRenderbufferParameterivEXT;
  }
  if (debug_fn.glIsFramebufferEXTFn != fn.glIsFramebufferEXTFn &&
      fn.glIsFramebufferEXTFn != Debug_glIsFramebufferEXT) {
    debug_fn.glIsFramebufferEXTFn = fn.glIsFramebufferEXTFn;
    fn.glIsFramebufferEXTFn = Debug_glIsFramebufferEXT;
  }
  if (debug_fn.glIsRenderbufferEXTFn != fn.glIsRenderbufferEXTFn &&
      fn.glIsRenderbufferEXTFn != Debug_glIsRenderbufferEXT) {
    debug_fn.glIsRenderbufferEXTFn = fn.glIsRenderbufferEXTFn;
    fn.glIsRenderbufferEXTFn = Debug_glIsRenderbufferEXT;
  }
  if (debug_fn.glRenderbufferStorageEXTFn != fn.glRenderbufferStorageEXTFn &&
      fn.glRenderbufferStorageEXTFn != Debug_glRenderbufferStorageEXT) {
    debug_fn.glRenderbufferStorageEXTFn = fn.glRenderbufferStorageEXTFn;
    fn.glRenderbufferStorageEXTFn = Debug_glRenderbufferStorageEXT;
  }
  if (debug_fn.glDiscardFramebufferEXTFn != fn.glDiscardFramebufferEXTFn &&
      fn.glDiscardFramebufferEXTFn != Debug_glDiscardFramebufferEXT) {
    debug_fn.glDiscardFramebufferEXTFn = fn.glDiscardFramebufferEXTFn;
    fn.glDiscardFramebufferEXTFn = Debug_glDiscardFramebufferEXT;
  }
  if (debug_fn.glBlitFramebufferEXTFn != fn.glBlitFramebufferEXTFn &&
      fn.glBlitFramebufferEXTFn != Debug_glBlitFramebufferEXT) {
    debug_fn.glBlitFramebufferEXTFn = fn.glBlitFramebufferEXTFn;
    fn.glBlitFramebufferEXTFn = Debug_glBlitFramebufferEXT;
  }
  if (debug_fn.glTexStorage2DEXTFn != fn.glTexStorage2DEXTFn &&
      fn.glTexStorage2DEXTFn != Debug_glTexStorage2DEXT) {
    debug_fn.glTexStorage2DEXTFn = fn.glTexStorage2DEXTFn;
    fn.glTexStorage2DEXTFn = Debug_glTexStorage2DEXT;
  }
  if (debug_fn.glMapBufferFn != fn.glMapBufferFn &&
      fn.glMapBufferFn != Debug_glMapBuffer) {
    debug_fn.glMapBufferFn = fn.glMapBufferFn;
    fn.glMapBufferFn = Debug_glMapBuffer;
  }
  if (debug_fn.glUnmapBufferFn != fn.glUnmapBufferFn &&
      fn.glUnmapBufferFn != Debug_glUnmapBuffer) {
    debug_fn.glUnmapBufferFn = fn.glUnmapBufferFn;
    fn.glUnmapBufferFn = Debug_glUnmapBuffer;
  }
  if (debug_fn.glGetProgramBinaryFn != fn.glGetProgramBinaryFn &&
      fn.glGetProgramBinaryFn != Debug_glGetProgramBinary) {
    debug_fn.glGetProgramBinaryFn = fn.glGetProgramBinaryFn;
    fn.glGetProgramBinaryFn = Debug_glGetProgramBinary;
  }
  if (debug_fn.glProgramBinaryFn != fn.glProgramBinaryFn &&
      fn.glProgramBinaryFn != Debug_glProgramBinary) {
    debug_fn.glProgramBinaryFn = fn.glProgramBinaryFn;
    fn.glProgramBinaryFn = Debug_glProgramBinary;
  }
  if (debug_fn.glEGLImageTargetTexture2DOESFn != fn.glEGLImageTargetTexture2DOESFn &&
      fn.glEGLImageTargetTexture2DOESFn != Debug_glEGLImageTargetTexture2DOES) {
    debug_fn.glEGLImageTargetTexture2DOESFn = fn.glEGLImageTargetTexture2DOESFn;
    fn.glEGLImageTargetTexture2DOESFn = Debug_glEGLImageTargetTexture2DOES;
  }
  if (debug_fn.glEGLImageTargetRenderbufferStorageOESFn != fn.glEGLImageTargetRenderbufferStorageOESFn &&
      fn.glEGLImageTargetRenderbufferStorageOESFn != Debug_glEGLImageTargetRenderbufferStorageOES) {
    debug_fn.glEGLImageTargetRenderbufferStorageOESFn = fn.glEGLImageTargetRenderbufferStorageOESFn;
    fn.glEGLImageTargetRenderbufferStorageOESFn = Debug_glEGLImageTargetRenderbufferStorageOES;
  }
  if (debug_fn.glGenVertexArraysOESFn != fn.glGenVertexArraysOESFn &&
      fn.glGenVertexArraysOESFn != Debug_glGenVertexArraysOES) {
    debug_fn.glGenVertexArraysOESFn = fn.glGenVertexArraysOESFn;
    fn.glGenVertexArraysOESFn = Debug_glGenVertexArraysOES;
  }
  if (debug_fn.glDeleteVertexArraysOESFn != fn.glDeleteVertexArraysOESFn &&
      fn.glDeleteVertexArraysOESFn != Debug_glDeleteVertexArraysOES) {
    debug_fn.glDeleteVertexArraysOESFn = fn.glDeleteVertexArraysOESFn;
    fn.glDeleteVertexArraysOESFn = Debug_glDeleteVertexArraysOES;
  }
  if (debug_fn.glBindVertexArrayOESFn != fn.glBindVertexArrayOESFn &&
      fn.glBindVertexArrayOESFn != Debug_glBindVertexArrayOES) {
    debug_fn.glBindVertexArrayOESFn = fn.glBindVertexArrayOESFn;
    fn.glBindVertexArrayOESFn = Debug_glBindVertexArrayOES;
  }
  if (debug_fn.glIsVertexArrayOESFn != fn.glIsVertexArrayOESFn &&
      fn.glIsVertexArrayOESFn != Debug_glIsVertexArrayOES) {
    debug_fn.glIsVertexArrayOESFn = fn.glIsVertexArrayOESFn;
    fn.glIsVertexArrayOESFn = Debug_glIsVertexArrayOES;
  }
  if (debug_fn.glVertexAttribDivisorANGLEFn != fn.glVertexAttribDivisorANGLEFn &&
      fn.glVertexAttribDivisorANGLEFn != Debug_glVertexAttribDivisorANGLE) {
    debug_fn.glVertexAttribDivisorANGLEFn = fn.glVertexAttribDivisorANGLEFn;
    fn.glVertexAttribDivisorANGLEFn = Debug_glVertexAttribDivisorANGLE;
  }
  if (debug_fn.glBindFragDataLocationIndexedFn != fn.glBindFragDataLocationIndexedFn &&
      fn.glBindFragDataLocationIndexedFn != Debug_glBindFragDataLocationIndexed) {
    debug_fn.glBindFragDataLocationIndexedFn = fn.glBindFragDataLocationIndexedFn;
    fn.glBindFragDataLocationIndexedFn = Debug_glBindFragDataLocationIndexed;
  }
  if (debug_fn.glFenceSyncFn != fn.glFenceSyncFn &&
      fn.glFenceSyncFn != Debug_glFenceSync) {
    debug_fn.glFenceSyncFn = fn.glFenceSyncFn;
    fn.glFenceSyncFn = Debug_glFenceSync;
  }
  if (debug_fn.glDeleteSyncFn != fn.glDeleteSyncFn &&
      fn.glDeleteSyncFn != Debug_glDeleteSync) {
    debug_fn.glDeleteSyncFn = fn.glDeleteSyncFn;
    fn.glDeleteSyncFn = Debug_glDeleteSync;
  }
  if (debug_fn.glGetSyncivFn != fn.glGetSyncivFn &&
      fn.glGetSyncivFn != Debug_glGetSynciv) {
    debug_fn.glGetSyncivFn = fn.glGetSyncivFn;
    fn.glGetSyncivFn = Debug_glGetSynciv;
  }
  if (debug_fn.glGetGraphicsResetStatusARBFn != fn.glGetGraphicsResetStatusARBFn &&
      fn.glGetGraphicsResetStatusARBFn != Debug_glGetGraphicsResetStatusARB) {
    debug_fn.glGetGraphicsResetStatusARBFn = fn.glGetGraphicsResetStatusARBFn;
    fn.glGetGraphicsResetStatusARBFn = Debug_glGetGraphicsResetStatusARB;
  }
  if (debug_fn.glGetQueryObjecti64vFn != fn.glGetQueryObjecti64vFn &&
      fn.glGetQueryObjecti64vFn != Debug_glGetQueryObjecti64v) {
    debug_fn.glGetQueryObjecti64vFn = fn.glGetQueryObjecti64vFn;
    fn.glGetQueryObjecti64vFn = Debug_glGetQueryObjecti64v;
  }
  if (debug_fn.glGetQueryObjectui64vFn != fn.glGetQueryObjectui64vFn &&
      fn.glGetQueryObjectui64vFn != Debug_glGetQueryObjectui64v) {
    debug_fn.glGetQueryObjectui64vFn = fn.glGetQueryObjectui64vFn;
    fn.glGetQueryObjectui64vFn = Debug_glGetQueryObjectui64v;
  }
  if (debug_fn.glQueryCounterFn != fn.glQueryCounterFn &&
      fn.glQueryCounterFn != Debug_glQueryCounter) {
    debug_fn.glQueryCounterFn = fn.glQueryCounterFn;
    fn.glQueryCounterFn = Debug_glQueryCounter;
  }
  if (debug_fn.glGenVertexArraysOESFn != fn.glGenVertexArraysOESFn &&
      fn.glGenVertexArraysOESFn != Debug_glGenVertexArraysOES) {
    debug_fn.glGenVertexArraysOESFn = fn.glGenVertexArraysOESFn;
    fn.glGenVertexArraysOESFn = Debug_glGenVertexArraysOES;
  }
  if (debug_fn.glDeleteVertexArraysOESFn != fn.glDeleteVertexArraysOESFn &&
      fn.glDeleteVertexArraysOESFn != Debug_glDeleteVertexArraysOES) {
    debug_fn.glDeleteVertexArraysOESFn = fn.glDeleteVertexArraysOESFn;
    fn.glDeleteVertexArraysOESFn = Debug_glDeleteVertexArraysOES;
  }
  if (debug_fn.glBindVertexArrayOESFn != fn.glBindVertexArrayOESFn &&
      fn.glBindVertexArrayOESFn != Debug_glBindVertexArrayOES) {
    debug_fn.glBindVertexArrayOESFn = fn.glBindVertexArrayOESFn;
    fn.glBindVertexArrayOESFn = Debug_glBindVertexArrayOES;
  }
  if (debug_fn.glIsVertexArrayOESFn != fn.glIsVertexArrayOESFn &&
      fn.glIsVertexArrayOESFn != Debug_glIsVertexArrayOES) {
    debug_fn.glIsVertexArrayOESFn = fn.glIsVertexArrayOESFn;
    fn.glIsVertexArrayOESFn = Debug_glIsVertexArrayOES;
  }
  if (debug_fn.glDrawArraysInstancedANGLEFn != fn.glDrawArraysInstancedANGLEFn &&
      fn.glDrawArraysInstancedANGLEFn != Debug_glDrawArraysInstancedANGLE) {
    debug_fn.glDrawArraysInstancedANGLEFn = fn.glDrawArraysInstancedANGLEFn;
    fn.glDrawArraysInstancedANGLEFn = Debug_glDrawArraysInstancedANGLE;
  }
  if (debug_fn.glDrawElementsInstancedANGLEFn != fn.glDrawElementsInstancedANGLEFn &&
      fn.glDrawElementsInstancedANGLEFn != Debug_glDrawElementsInstancedANGLE) {
    debug_fn.glDrawElementsInstancedANGLEFn = fn.glDrawElementsInstancedANGLEFn;
    fn.glDrawElementsInstancedANGLEFn = Debug_glDrawElementsInstancedANGLE;
  }
  if (debug_fn.glDeleteBuffersARBFn != fn.glDeleteBuffersARBFn &&
      fn.glDeleteBuffersARBFn != Debug_glDeleteBuffersARB) {
    debug_fn.glDeleteBuffersARBFn = fn.glDeleteBuffersARBFn;
    fn.glDeleteBuffersARBFn = Debug_glDeleteBuffersARB;
  }
  if (debug_fn.glGenBuffersARBFn != fn.glGenBuffersARBFn &&
      fn.glGenBuffersARBFn != Debug_glGenBuffersARB) {
    debug_fn.glGenBuffersARBFn = fn.glGenBuffersARBFn;
    fn.glGenBuffersARBFn = Debug_glGenBuffersARB;
  }
  if (debug_fn.glBindFramebufferEXTFn != fn.glBindFramebufferEXTFn &&
      fn.glBindFramebufferEXTFn != Debug_glBindFramebufferEXT) {
    debug_fn.glBindFramebufferEXTFn = fn.glBindFramebufferEXTFn;
    fn.glBindFramebufferEXTFn = Debug_glBindFramebufferEXT;
  }
  if (debug_fn.glBindRenderbufferEXTFn != fn.glBindRenderbufferEXTFn &&
      fn.glBindRenderbufferEXTFn != Debug_glBindRenderbufferEXT) {
    debug_fn.glBindRenderbufferEXTFn = fn.glBindRenderbufferEXTFn;
    fn.glBindRenderbufferEXTFn = Debug_glBindRenderbufferEXT;
  }
  if (debug_fn.glBlitFramebufferEXTFn != fn.glBlitFramebufferEXTFn &&
      fn.glBlitFramebufferEXTFn != Debug_glBlitFramebufferEXT) {
    debug_fn.glBlitFramebufferEXTFn = fn.glBlitFramebufferEXTFn;
    fn.glBlitFramebufferEXTFn = Debug_glBlitFramebufferEXT;
  }
  if (debug_fn.glBlitFramebufferANGLEFn != fn.glBlitFramebufferANGLEFn &&
      fn.glBlitFramebufferANGLEFn != Debug_glBlitFramebufferANGLE) {
    debug_fn.glBlitFramebufferANGLEFn = fn.glBlitFramebufferANGLEFn;
    fn.glBlitFramebufferANGLEFn = Debug_glBlitFramebufferANGLE;
  }
  if (debug_fn.glCheckFramebufferStatusEXTFn != fn.glCheckFramebufferStatusEXTFn &&
      fn.glCheckFramebufferStatusEXTFn != Debug_glCheckFramebufferStatusEXT) {
    debug_fn.glCheckFramebufferStatusEXTFn = fn.glCheckFramebufferStatusEXTFn;
    fn.glCheckFramebufferStatusEXTFn = Debug_glCheckFramebufferStatusEXT;
  }
  if (debug_fn.glDeleteFramebuffersEXTFn != fn.glDeleteFramebuffersEXTFn &&
      fn.glDeleteFramebuffersEXTFn != Debug_glDeleteFramebuffersEXT) {
    debug_fn.glDeleteFramebuffersEXTFn = fn.glDeleteFramebuffersEXTFn;
    fn.glDeleteFramebuffersEXTFn = Debug_glDeleteFramebuffersEXT;
  }
  if (debug_fn.glDeleteRenderbuffersEXTFn != fn.glDeleteRenderbuffersEXTFn &&
      fn.glDeleteRenderbuffersEXTFn != Debug_glDeleteRenderbuffersEXT) {
    debug_fn.glDeleteRenderbuffersEXTFn = fn.glDeleteRenderbuffersEXTFn;
    fn.glDeleteRenderbuffersEXTFn = Debug_glDeleteRenderbuffersEXT;
  }
  if (debug_fn.glFramebufferRenderbufferEXTFn != fn.glFramebufferRenderbufferEXTFn &&
      fn.glFramebufferRenderbufferEXTFn != Debug_glFramebufferRenderbufferEXT) {
    debug_fn.glFramebufferRenderbufferEXTFn = fn.glFramebufferRenderbufferEXTFn;
    fn.glFramebufferRenderbufferEXTFn = Debug_glFramebufferRenderbufferEXT;
  }
  if (debug_fn.glFramebufferTexture2DEXTFn != fn.glFramebufferTexture2DEXTFn &&
      fn.glFramebufferTexture2DEXTFn != Debug_glFramebufferTexture2DEXT) {
    debug_fn.glFramebufferTexture2DEXTFn = fn.glFramebufferTexture2DEXTFn;
    fn.glFramebufferTexture2DEXTFn = Debug_glFramebufferTexture2DEXT;
  }
  if (debug_fn.glGenerateMipmapEXTFn != fn.glGenerateMipmapEXTFn &&
      fn.glGenerateMipmapEXTFn != Debug_glGenerateMipmapEXT) {
    debug_fn.glGenerateMipmapEXTFn = fn.glGenerateMipmapEXTFn;
    fn.glGenerateMipmapEXTFn = Debug_glGenerateMipmapEXT;
  }
  if (debug_fn.glGenFramebuffersEXTFn != fn.glGenFramebuffersEXTFn &&
      fn.glGenFramebuffersEXTFn != Debug_glGenFramebuffersEXT) {
    debug_fn.glGenFramebuffersEXTFn = fn.glGenFramebuffersEXTFn;
    fn.glGenFramebuffersEXTFn = Debug_glGenFramebuffersEXT;
  }
  if (debug_fn.glGenRenderbuffersEXTFn != fn.glGenRenderbuffersEXTFn &&
      fn.glGenRenderbuffersEXTFn != Debug_glGenRenderbuffersEXT) {
    debug_fn.glGenRenderbuffersEXTFn = fn.glGenRenderbuffersEXTFn;
    fn.glGenRenderbuffersEXTFn = Debug_glGenRenderbuffersEXT;
  }
  if (debug_fn.glGetFramebufferAttachmentParameterivEXTFn != fn.glGetFramebufferAttachmentParameterivEXTFn &&
      fn.glGetFramebufferAttachmentParameterivEXTFn != Debug_glGetFramebufferAttachmentParameterivEXT) {
    debug_fn.glGetFramebufferAttachmentParameterivEXTFn = fn.glGetFramebufferAttachmentParameterivEXTFn;
    fn.glGetFramebufferAttachmentParameterivEXTFn = Debug_glGetFramebufferAttachmentParameterivEXT;
  }
  if (debug_fn.glGetRenderbufferParameterivEXTFn != fn.glGetRenderbufferParameterivEXTFn &&
      fn.glGetRenderbufferParameterivEXTFn != Debug_glGetRenderbufferParameterivEXT) {
    debug_fn.glGetRenderbufferParameterivEXTFn = fn.glGetRenderbufferParameterivEXTFn;
    fn.glGetRenderbufferParameterivEXTFn = Debug_glGetRenderbufferParameterivEXT;
  }
  if (debug_fn.glIsFramebufferEXTFn != fn.glIsFramebufferEXTFn &&
      fn.glIsFramebufferEXTFn != Debug_glIsFramebufferEXT) {
    debug_fn.glIsFramebufferEXTFn = fn.glIsFramebufferEXTFn;
    fn.glIsFramebufferEXTFn = Debug_glIsFramebufferEXT;
  }
  if (debug_fn.glIsRenderbufferEXTFn != fn.glIsRenderbufferEXTFn &&
      fn.glIsRenderbufferEXTFn != Debug_glIsRenderbufferEXT) {
    debug_fn.glIsRenderbufferEXTFn = fn.glIsRenderbufferEXTFn;
    fn.glIsRenderbufferEXTFn = Debug_glIsRenderbufferEXT;
  }
  if (debug_fn.glRenderbufferStorageMultisampleEXTFn != fn.glRenderbufferStorageMultisampleEXTFn &&
      fn.glRenderbufferStorageMultisampleEXTFn != Debug_glRenderbufferStorageMultisampleEXT) {
    debug_fn.glRenderbufferStorageMultisampleEXTFn = fn.glRenderbufferStorageMultisampleEXTFn;
    fn.glRenderbufferStorageMultisampleEXTFn = Debug_glRenderbufferStorageMultisampleEXT;
  }
  if (debug_fn.glRenderbufferStorageMultisampleANGLEFn != fn.glRenderbufferStorageMultisampleANGLEFn &&
      fn.glRenderbufferStorageMultisampleANGLEFn != Debug_glRenderbufferStorageMultisampleANGLE) {
    debug_fn.glRenderbufferStorageMultisampleANGLEFn = fn.glRenderbufferStorageMultisampleANGLEFn;
    fn.glRenderbufferStorageMultisampleANGLEFn = Debug_glRenderbufferStorageMultisampleANGLE;
  }
  if (debug_fn.glRenderbufferStorageEXTFn != fn.glRenderbufferStorageEXTFn &&
      fn.glRenderbufferStorageEXTFn != Debug_glRenderbufferStorageEXT) {
    debug_fn.glRenderbufferStorageEXTFn = fn.glRenderbufferStorageEXTFn;
    fn.glRenderbufferStorageEXTFn = Debug_glRenderbufferStorageEXT;
  }
  if (debug_fn.glBeginQueryARBFn != fn.glBeginQueryARBFn &&
      fn.glBeginQueryARBFn != Debug_glBeginQueryARB) {
    debug_fn.glBeginQueryARBFn = fn.glBeginQueryARBFn;
    fn.glBeginQueryARBFn = Debug_glBeginQueryARB;
  }
  if (debug_fn.glDeleteQueriesARBFn != fn.glDeleteQueriesARBFn &&
      fn.glDeleteQueriesARBFn != Debug_glDeleteQueriesARB) {
    debug_fn.glDeleteQueriesARBFn = fn.glDeleteQueriesARBFn;
    fn.glDeleteQueriesARBFn = Debug_glDeleteQueriesARB;
  }
  if (debug_fn.glEndQueryARBFn != fn.glEndQueryARBFn &&
      fn.glEndQueryARBFn != Debug_glEndQueryARB) {
    debug_fn.glEndQueryARBFn = fn.glEndQueryARBFn;
    fn.glEndQueryARBFn = Debug_glEndQueryARB;
  }
  if (debug_fn.glGenQueriesARBFn != fn.glGenQueriesARBFn &&
      fn.glGenQueriesARBFn != Debug_glGenQueriesARB) {
    debug_fn.glGenQueriesARBFn = fn.glGenQueriesARBFn;
    fn.glGenQueriesARBFn = Debug_glGenQueriesARB;
  }
  if (debug_fn.glGetQueryivARBFn != fn.glGetQueryivARBFn &&
      fn.glGetQueryivARBFn != Debug_glGetQueryivARB) {
    debug_fn.glGetQueryivARBFn = fn.glGetQueryivARBFn;
    fn.glGetQueryivARBFn = Debug_glGetQueryivARB;
  }
  if (debug_fn.glGetQueryObjectuivARBFn != fn.glGetQueryObjectuivARBFn &&
      fn.glGetQueryObjectuivARBFn != Debug_glGetQueryObjectuivARB) {
    debug_fn.glGetQueryObjectuivARBFn = fn.glGetQueryObjectuivARBFn;
    fn.glGetQueryObjectuivARBFn = Debug_glGetQueryObjectuivARB;
  }
  if (debug_fn.glIsQueryARBFn != fn.glIsQueryARBFn &&
      fn.glIsQueryARBFn != Debug_glIsQueryARB) {
    debug_fn.glIsQueryARBFn = fn.glIsQueryARBFn;
    fn.glIsQueryARBFn = Debug_glIsQueryARB;
  }
  if (debug_fn.glGetProgramBinaryFn != fn.glGetProgramBinaryFn &&
      fn.glGetProgramBinaryFn != Debug_glGetProgramBinary) {
    debug_fn.glGetProgramBinaryFn = fn.glGetProgramBinaryFn;
    fn.glGetProgramBinaryFn = Debug_glGetProgramBinary;
  }
  if (debug_fn.glProgramBinaryFn != fn.glProgramBinaryFn &&
      fn.glProgramBinaryFn != Debug_glProgramBinary) {
    debug_fn.glProgramBinaryFn = fn.glProgramBinaryFn;
    fn.glProgramBinaryFn = Debug_glProgramBinary;
  }
  if (debug_fn.glProgramParameteriFn != fn.glProgramParameteriFn &&
      fn.glProgramParameteriFn != Debug_glProgramParameteri) {
    debug_fn.glProgramParameteriFn = fn.glProgramParameteriFn;
    fn.glProgramParameteriFn = Debug_glProgramParameteri;
  }
  if (debug_fn.glClearDepthfFn != fn.glClearDepthfFn &&
      fn.glClearDepthfFn != Debug_glClearDepthf) {
    debug_fn.glClearDepthfFn = fn.glClearDepthfFn;
    fn.glClearDepthfFn = Debug_glClearDepthf;
  }
  if (debug_fn.glDepthRangefFn != fn.glDepthRangefFn &&
      fn.glDepthRangefFn != Debug_glDepthRangef) {
    debug_fn.glDepthRangefFn = fn.glDepthRangefFn;
    fn.glDepthRangefFn = Debug_glDepthRangef;
  }
  if (debug_fn.glGetShaderPrecisionFormatFn != fn.glGetShaderPrecisionFormatFn &&
      fn.glGetShaderPrecisionFormatFn != Debug_glGetShaderPrecisionFormat) {
    debug_fn.glGetShaderPrecisionFormatFn = fn.glGetShaderPrecisionFormatFn;
    fn.glGetShaderPrecisionFormatFn = Debug_glGetShaderPrecisionFormat;
  }
  if (debug_fn.glReleaseShaderCompilerFn != fn.glReleaseShaderCompilerFn &&
      fn.glReleaseShaderCompilerFn != Debug_glReleaseShaderCompiler) {
    debug_fn.glReleaseShaderCompilerFn = fn.glReleaseShaderCompilerFn;
    fn.glReleaseShaderCompilerFn = Debug_glReleaseShaderCompiler;
  }
  if (debug_fn.glShaderBinaryFn != fn.glShaderBinaryFn &&
      fn.glShaderBinaryFn != Debug_glShaderBinary) {
    debug_fn.glShaderBinaryFn = fn.glShaderBinaryFn;
    fn.glShaderBinaryFn = Debug_glShaderBinary;
  }
  if (debug_fn.glDrawBuffersARBFn != fn.glDrawBuffersARBFn &&
      fn.glDrawBuffersARBFn != Debug_glDrawBuffersARB) {
    debug_fn.glDrawBuffersARBFn = fn.glDrawBuffersARBFn;
    fn.glDrawBuffersARBFn = Debug_glDrawBuffersARB;
  }
}

void DriverGL::ClearBindings() {
  memset(this, 0, sizeof(*this));
}

void GLApiBase::glActiveTextureFn(GLenum texture) {
  driver_->fn.glActiveTextureFn(texture);
}

void GLApiBase::glAttachShaderFn(GLuint program, GLuint shader) {
  driver_->fn.glAttachShaderFn(program, shader);
}

void GLApiBase::glBeginQueryFn(GLenum target, GLuint id) {
  driver_->fn.glBeginQueryFn(target, id);
}

void GLApiBase::glBeginQueryARBFn(GLenum target, GLuint id) {
  driver_->fn.glBeginQueryARBFn(target, id);
}

void GLApiBase::glBindAttribLocationFn(GLuint program, GLuint index, const char* name) {
  driver_->fn.glBindAttribLocationFn(program, index, name);
}

void GLApiBase::glBindBufferFn(GLenum target, GLuint buffer) {
  driver_->fn.glBindBufferFn(target, buffer);
}

void GLApiBase::glBindFragDataLocationFn(GLuint program, GLuint colorNumber, const char* name) {
  driver_->fn.glBindFragDataLocationFn(program, colorNumber, name);
}

void GLApiBase::glBindFragDataLocationIndexedFn(GLuint program, GLuint colorNumber, GLuint index, const char* name) {
  driver_->fn.glBindFragDataLocationIndexedFn(program, colorNumber, index, name);
}

void GLApiBase::glBindFramebufferEXTFn(GLenum target, GLuint framebuffer) {
  driver_->fn.glBindFramebufferEXTFn(target, framebuffer);
}

void GLApiBase::glBindRenderbufferEXTFn(GLenum target, GLuint renderbuffer) {
  driver_->fn.glBindRenderbufferEXTFn(target, renderbuffer);
}

void GLApiBase::glBindTextureFn(GLenum target, GLuint texture) {
  driver_->fn.glBindTextureFn(target, texture);
}

void GLApiBase::glBlendColorFn(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {
  driver_->fn.glBlendColorFn(red, green, blue, alpha);
}

void GLApiBase::glBlendEquationFn( GLenum mode ) {
  driver_->fn.glBlendEquationFn( mode );
}

void GLApiBase::glBlendEquationSeparateFn(GLenum modeRGB, GLenum modeAlpha) {
  driver_->fn.glBlendEquationSeparateFn(modeRGB, modeAlpha);
}

void GLApiBase::glBlendFuncFn(GLenum sfactor, GLenum dfactor) {
  driver_->fn.glBlendFuncFn(sfactor, dfactor);
}

void GLApiBase::glBlendFuncSeparateFn(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  driver_->fn.glBlendFuncSeparateFn(srcRGB, dstRGB, srcAlpha, dstAlpha);
}

void GLApiBase::glBlitFramebufferEXTFn(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  driver_->fn.glBlitFramebufferEXTFn(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

void GLApiBase::glBlitFramebufferANGLEFn(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  driver_->fn.glBlitFramebufferANGLEFn(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

void GLApiBase::glBufferDataFn(GLenum target, GLsizei size, const void* data, GLenum usage) {
  driver_->fn.glBufferDataFn(target, size, data, usage);
}

void GLApiBase::glBufferSubDataFn(GLenum target, GLint offset, GLsizei size, const void* data) {
  driver_->fn.glBufferSubDataFn(target, offset, size, data);
}

GLenum GLApiBase::glCheckFramebufferStatusEXTFn(GLenum target) {
  return driver_->fn.glCheckFramebufferStatusEXTFn(target);
}

void GLApiBase::glClearFn(GLbitfield mask) {
  driver_->fn.glClearFn(mask);
}

void GLApiBase::glClearColorFn(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {
  driver_->fn.glClearColorFn(red, green, blue, alpha);
}

void GLApiBase::glClearDepthFn(GLclampd depth) {
  driver_->fn.glClearDepthFn(depth);
}

void GLApiBase::glClearDepthfFn(GLclampf depth) {
  driver_->fn.glClearDepthfFn(depth);
}

void GLApiBase::glClearStencilFn(GLint s) {
  driver_->fn.glClearStencilFn(s);
}

void GLApiBase::glColorMaskFn(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  driver_->fn.glColorMaskFn(red, green, blue, alpha);
}

void GLApiBase::glCompileShaderFn(GLuint shader) {
  driver_->fn.glCompileShaderFn(shader);
}

void GLApiBase::glCompressedTexImage2DFn(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data) {
  driver_->fn.glCompressedTexImage2DFn(target, level, internalformat, width, height, border, imageSize, data);
}

void GLApiBase::glCompressedTexSubImage2DFn(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data) {
  driver_->fn.glCompressedTexSubImage2DFn(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

void GLApiBase::glCopyTexImage2DFn(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  driver_->fn.glCopyTexImage2DFn(target, level, internalformat, x, y, width, height, border);
}

void GLApiBase::glCopyTexSubImage2DFn(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  driver_->fn.glCopyTexSubImage2DFn(target, level, xoffset, yoffset, x, y, width, height);
}

GLuint GLApiBase::glCreateProgramFn(void) {
  return driver_->fn.glCreateProgramFn();
}

GLuint GLApiBase::glCreateShaderFn(GLenum type) {
  return driver_->fn.glCreateShaderFn(type);
}

void GLApiBase::glCullFaceFn(GLenum mode) {
  driver_->fn.glCullFaceFn(mode);
}

void GLApiBase::glDeleteBuffersARBFn(GLsizei n, const GLuint* buffers) {
  driver_->fn.glDeleteBuffersARBFn(n, buffers);
}

void GLApiBase::glDeleteFramebuffersEXTFn(GLsizei n, const GLuint* framebuffers) {
  driver_->fn.glDeleteFramebuffersEXTFn(n, framebuffers);
}

void GLApiBase::glDeleteProgramFn(GLuint program) {
  driver_->fn.glDeleteProgramFn(program);
}

void GLApiBase::glDeleteQueriesFn(GLsizei n, const GLuint* ids) {
  driver_->fn.glDeleteQueriesFn(n, ids);
}

void GLApiBase::glDeleteQueriesARBFn(GLsizei n, const GLuint* ids) {
  driver_->fn.glDeleteQueriesARBFn(n, ids);
}

void GLApiBase::glDeleteRenderbuffersEXTFn(GLsizei n, const GLuint* renderbuffers) {
  driver_->fn.glDeleteRenderbuffersEXTFn(n, renderbuffers);
}

void GLApiBase::glDeleteShaderFn(GLuint shader) {
  driver_->fn.glDeleteShaderFn(shader);
}

void GLApiBase::glDeleteTexturesFn(GLsizei n, const GLuint* textures) {
  driver_->fn.glDeleteTexturesFn(n, textures);
}

void GLApiBase::glDepthFuncFn(GLenum func) {
  driver_->fn.glDepthFuncFn(func);
}

void GLApiBase::glDepthMaskFn(GLboolean flag) {
  driver_->fn.glDepthMaskFn(flag);
}

void GLApiBase::glDepthRangeFn(GLclampd zNear, GLclampd zFar) {
  driver_->fn.glDepthRangeFn(zNear, zFar);
}

void GLApiBase::glDepthRangefFn(GLclampf zNear, GLclampf zFar) {
  driver_->fn.glDepthRangefFn(zNear, zFar);
}

void GLApiBase::glDetachShaderFn(GLuint program, GLuint shader) {
  driver_->fn.glDetachShaderFn(program, shader);
}

void GLApiBase::glDisableFn(GLenum cap) {
  driver_->fn.glDisableFn(cap);
}

void GLApiBase::glDisableVertexAttribArrayFn(GLuint index) {
  driver_->fn.glDisableVertexAttribArrayFn(index);
}

void GLApiBase::glDrawArraysFn(GLenum mode, GLint first, GLsizei count) {
  driver_->fn.glDrawArraysFn(mode, first, count);
}

void GLApiBase::glDrawBufferFn(GLenum mode) {
  driver_->fn.glDrawBufferFn(mode);
}

void GLApiBase::glDrawBuffersARBFn(GLsizei n, const GLenum* bufs) {
  driver_->fn.glDrawBuffersARBFn(n, bufs);
}

void GLApiBase::glDrawElementsFn(GLenum mode, GLsizei count, GLenum type, const void* indices) {
  driver_->fn.glDrawElementsFn(mode, count, type, indices);
}

void GLApiBase::glEGLImageTargetTexture2DOESFn(GLenum target, GLeglImageOES image) {
  driver_->fn.glEGLImageTargetTexture2DOESFn(target, image);
}

void GLApiBase::glEGLImageTargetRenderbufferStorageOESFn(GLenum target, GLeglImageOES image) {
  driver_->fn.glEGLImageTargetRenderbufferStorageOESFn(target, image);
}

void GLApiBase::glEnableFn(GLenum cap) {
  driver_->fn.glEnableFn(cap);
}

void GLApiBase::glEnableVertexAttribArrayFn(GLuint index) {
  driver_->fn.glEnableVertexAttribArrayFn(index);
}

void GLApiBase::glEndQueryFn(GLenum target) {
  driver_->fn.glEndQueryFn(target);
}

void GLApiBase::glEndQueryARBFn(GLenum target) {
  driver_->fn.glEndQueryARBFn(target);
}

void GLApiBase::glFinishFn(void) {
  driver_->fn.glFinishFn();
}

void GLApiBase::glFlushFn(void) {
  driver_->fn.glFlushFn();
}

void GLApiBase::glFramebufferRenderbufferEXTFn(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  driver_->fn.glFramebufferRenderbufferEXTFn(target, attachment, renderbuffertarget, renderbuffer);
}

void GLApiBase::glFramebufferTexture2DEXTFn(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  driver_->fn.glFramebufferTexture2DEXTFn(target, attachment, textarget, texture, level);
}

void GLApiBase::glFrontFaceFn(GLenum mode) {
  driver_->fn.glFrontFaceFn(mode);
}

void GLApiBase::glGenBuffersARBFn(GLsizei n, GLuint* buffers) {
  driver_->fn.glGenBuffersARBFn(n, buffers);
}

void GLApiBase::glGenQueriesFn(GLsizei n, GLuint* ids) {
  driver_->fn.glGenQueriesFn(n, ids);
}

void GLApiBase::glGenQueriesARBFn(GLsizei n, GLuint* ids) {
  driver_->fn.glGenQueriesARBFn(n, ids);
}

void GLApiBase::glGenerateMipmapEXTFn(GLenum target) {
  driver_->fn.glGenerateMipmapEXTFn(target);
}

void GLApiBase::glGenFramebuffersEXTFn(GLsizei n, GLuint* framebuffers) {
  driver_->fn.glGenFramebuffersEXTFn(n, framebuffers);
}

void GLApiBase::glGenRenderbuffersEXTFn(GLsizei n, GLuint* renderbuffers) {
  driver_->fn.glGenRenderbuffersEXTFn(n, renderbuffers);
}

void GLApiBase::glGenTexturesFn(GLsizei n, GLuint* textures) {
  driver_->fn.glGenTexturesFn(n, textures);
}

void GLApiBase::glGetActiveAttribFn(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name) {
  driver_->fn.glGetActiveAttribFn(program, index, bufsize, length, size, type, name);
}

void GLApiBase::glGetActiveUniformFn(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name) {
  driver_->fn.glGetActiveUniformFn(program, index, bufsize, length, size, type, name);
}

void GLApiBase::glGetAttachedShadersFn(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders) {
  driver_->fn.glGetAttachedShadersFn(program, maxcount, count, shaders);
}

GLint GLApiBase::glGetAttribLocationFn(GLuint program, const char* name) {
  return driver_->fn.glGetAttribLocationFn(program, name);
}

void GLApiBase::glGetBooleanvFn(GLenum pname, GLboolean* params) {
  driver_->fn.glGetBooleanvFn(pname, params);
}

void GLApiBase::glGetBufferParameterivFn(GLenum target, GLenum pname, GLint* params) {
  driver_->fn.glGetBufferParameterivFn(target, pname, params);
}

GLenum GLApiBase::glGetErrorFn(void) {
  return driver_->fn.glGetErrorFn();
}

void GLApiBase::glGetFloatvFn(GLenum pname, GLfloat* params) {
  driver_->fn.glGetFloatvFn(pname, params);
}

void GLApiBase::glGetFramebufferAttachmentParameterivEXTFn(GLenum target, GLenum attachment, GLenum pname, GLint* params) {
  driver_->fn.glGetFramebufferAttachmentParameterivEXTFn(target, attachment, pname, params);
}

GLenum GLApiBase::glGetGraphicsResetStatusARBFn(void) {
  return driver_->fn.glGetGraphicsResetStatusARBFn();
}

void GLApiBase::glGetIntegervFn(GLenum pname, GLint* params) {
  driver_->fn.glGetIntegervFn(pname, params);
}

void GLApiBase::glGetProgramBinaryFn(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, GLvoid* binary) {
  driver_->fn.glGetProgramBinaryFn(program, bufSize, length, binaryFormat, binary);
}

void GLApiBase::glGetProgramivFn(GLuint program, GLenum pname, GLint* params) {
  driver_->fn.glGetProgramivFn(program, pname, params);
}

void GLApiBase::glGetProgramInfoLogFn(GLuint program, GLsizei bufsize, GLsizei* length, char* infolog) {
  driver_->fn.glGetProgramInfoLogFn(program, bufsize, length, infolog);
}

void GLApiBase::glGetQueryivFn(GLenum target, GLenum pname, GLint* params) {
  driver_->fn.glGetQueryivFn(target, pname, params);
}

void GLApiBase::glGetQueryivARBFn(GLenum target, GLenum pname, GLint* params) {
  driver_->fn.glGetQueryivARBFn(target, pname, params);
}

void GLApiBase::glGetQueryObjecti64vFn(GLuint id, GLenum pname, GLint64* params) {
  driver_->fn.glGetQueryObjecti64vFn(id, pname, params);
}

void GLApiBase::glGetQueryObjectivFn(GLuint id, GLenum pname, GLint* params) {
  driver_->fn.glGetQueryObjectivFn(id, pname, params);
}

void GLApiBase::glGetQueryObjectui64vFn(GLuint id, GLenum pname, GLuint64* params) {
  driver_->fn.glGetQueryObjectui64vFn(id, pname, params);
}

void GLApiBase::glGetQueryObjectuivFn(GLuint id, GLenum pname, GLuint* params) {
  driver_->fn.glGetQueryObjectuivFn(id, pname, params);
}

void GLApiBase::glGetQueryObjectuivARBFn(GLuint id, GLenum pname, GLuint* params) {
  driver_->fn.glGetQueryObjectuivARBFn(id, pname, params);
}

void GLApiBase::glGetRenderbufferParameterivEXTFn(GLenum target, GLenum pname, GLint* params) {
  driver_->fn.glGetRenderbufferParameterivEXTFn(target, pname, params);
}

void GLApiBase::glGetShaderivFn(GLuint shader, GLenum pname, GLint* params) {
  driver_->fn.glGetShaderivFn(shader, pname, params);
}

void GLApiBase::glGetShaderInfoLogFn(GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog) {
  driver_->fn.glGetShaderInfoLogFn(shader, bufsize, length, infolog);
}

void GLApiBase::glGetShaderPrecisionFormatFn(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision) {
  driver_->fn.glGetShaderPrecisionFormatFn(shadertype, precisiontype, range, precision);
}

void GLApiBase::glGetShaderSourceFn(GLuint shader, GLsizei bufsize, GLsizei* length, char* source) {
  driver_->fn.glGetShaderSourceFn(shader, bufsize, length, source);
}

const GLubyte* GLApiBase::glGetStringFn(GLenum name) {
  return driver_->fn.glGetStringFn(name);
}

void GLApiBase::glGetTexLevelParameterfvFn(GLenum target, GLint level, GLenum pname, GLfloat* params) {
  driver_->fn.glGetTexLevelParameterfvFn(target, level, pname, params);
}

void GLApiBase::glGetTexLevelParameterivFn(GLenum target, GLint level, GLenum pname, GLint* params) {
  driver_->fn.glGetTexLevelParameterivFn(target, level, pname, params);
}

void GLApiBase::glGetTexParameterfvFn(GLenum target, GLenum pname, GLfloat* params) {
  driver_->fn.glGetTexParameterfvFn(target, pname, params);
}

void GLApiBase::glGetTexParameterivFn(GLenum target, GLenum pname, GLint* params) {
  driver_->fn.glGetTexParameterivFn(target, pname, params);
}

void GLApiBase::glGetTranslatedShaderSourceANGLEFn(GLuint shader, GLsizei bufsize, GLsizei* length, char* source) {
  driver_->fn.glGetTranslatedShaderSourceANGLEFn(shader, bufsize, length, source);
}

void GLApiBase::glGetUniformfvFn(GLuint program, GLint location, GLfloat* params) {
  driver_->fn.glGetUniformfvFn(program, location, params);
}

void GLApiBase::glGetUniformivFn(GLuint program, GLint location, GLint* params) {
  driver_->fn.glGetUniformivFn(program, location, params);
}

GLint GLApiBase::glGetUniformLocationFn(GLuint program, const char* name) {
  return driver_->fn.glGetUniformLocationFn(program, name);
}

void GLApiBase::glGetVertexAttribfvFn(GLuint index, GLenum pname, GLfloat* params) {
  driver_->fn.glGetVertexAttribfvFn(index, pname, params);
}

void GLApiBase::glGetVertexAttribivFn(GLuint index, GLenum pname, GLint* params) {
  driver_->fn.glGetVertexAttribivFn(index, pname, params);
}

void GLApiBase::glGetVertexAttribPointervFn(GLuint index, GLenum pname, void** pointer) {
  driver_->fn.glGetVertexAttribPointervFn(index, pname, pointer);
}

void GLApiBase::glHintFn(GLenum target, GLenum mode) {
  driver_->fn.glHintFn(target, mode);
}

GLboolean GLApiBase::glIsBufferFn(GLuint buffer) {
  return driver_->fn.glIsBufferFn(buffer);
}

GLboolean GLApiBase::glIsEnabledFn(GLenum cap) {
  return driver_->fn.glIsEnabledFn(cap);
}

GLboolean GLApiBase::glIsFramebufferEXTFn(GLuint framebuffer) {
  return driver_->fn.glIsFramebufferEXTFn(framebuffer);
}

GLboolean GLApiBase::glIsProgramFn(GLuint program) {
  return driver_->fn.glIsProgramFn(program);
}

GLboolean GLApiBase::glIsQueryARBFn(GLuint query) {
  return driver_->fn.glIsQueryARBFn(query);
}

GLboolean GLApiBase::glIsRenderbufferEXTFn(GLuint renderbuffer) {
  return driver_->fn.glIsRenderbufferEXTFn(renderbuffer);
}

GLboolean GLApiBase::glIsShaderFn(GLuint shader) {
  return driver_->fn.glIsShaderFn(shader);
}

GLboolean GLApiBase::glIsTextureFn(GLuint texture) {
  return driver_->fn.glIsTextureFn(texture);
}

void GLApiBase::glLineWidthFn(GLfloat width) {
  driver_->fn.glLineWidthFn(width);
}

void GLApiBase::glLinkProgramFn(GLuint program) {
  driver_->fn.glLinkProgramFn(program);
}

void* GLApiBase::glMapBufferFn(GLenum target, GLenum access) {
  return driver_->fn.glMapBufferFn(target, access);
}

void GLApiBase::glPixelStoreiFn(GLenum pname, GLint param) {
  driver_->fn.glPixelStoreiFn(pname, param);
}

void GLApiBase::glPointParameteriFn(GLenum pname, GLint param) {
  driver_->fn.glPointParameteriFn(pname, param);
}

void GLApiBase::glPolygonOffsetFn(GLfloat factor, GLfloat units) {
  driver_->fn.glPolygonOffsetFn(factor, units);
}

void GLApiBase::glProgramBinaryFn(GLuint program, GLenum binaryFormat, const GLvoid* binary, GLsizei length) {
  driver_->fn.glProgramBinaryFn(program, binaryFormat, binary, length);
}

void GLApiBase::glProgramParameteriFn(GLuint program, GLenum pname, GLint value) {
  driver_->fn.glProgramParameteriFn(program, pname, value);
}

void GLApiBase::glQueryCounterFn(GLuint id, GLenum target) {
  driver_->fn.glQueryCounterFn(id, target);
}

void GLApiBase::glReadBufferFn(GLenum src) {
  driver_->fn.glReadBufferFn(src);
}

void GLApiBase::glReadPixelsFn(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels) {
  driver_->fn.glReadPixelsFn(x, y, width, height, format, type, pixels);
}

void GLApiBase::glReleaseShaderCompilerFn(void) {
  driver_->fn.glReleaseShaderCompilerFn();
}

void GLApiBase::glRenderbufferStorageMultisampleEXTFn(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  driver_->fn.glRenderbufferStorageMultisampleEXTFn(target, samples, internalformat, width, height);
}

void GLApiBase::glRenderbufferStorageMultisampleANGLEFn(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  driver_->fn.glRenderbufferStorageMultisampleANGLEFn(target, samples, internalformat, width, height);
}

void GLApiBase::glRenderbufferStorageEXTFn(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  driver_->fn.glRenderbufferStorageEXTFn(target, internalformat, width, height);
}

void GLApiBase::glSampleCoverageFn(GLclampf value, GLboolean invert) {
  driver_->fn.glSampleCoverageFn(value, invert);
}

void GLApiBase::glScissorFn(GLint x, GLint y, GLsizei width, GLsizei height) {
  driver_->fn.glScissorFn(x, y, width, height);
}

void GLApiBase::glShaderBinaryFn(GLsizei n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLsizei length) {
  driver_->fn.glShaderBinaryFn(n, shaders, binaryformat, binary, length);
}

void GLApiBase::glShaderSourceFn(GLuint shader, GLsizei count, const char** str, const GLint* length) {
  driver_->fn.glShaderSourceFn(shader, count, str, length);
}

void GLApiBase::glStencilFuncFn(GLenum func, GLint ref, GLuint mask) {
  driver_->fn.glStencilFuncFn(func, ref, mask);
}

void GLApiBase::glStencilFuncSeparateFn(GLenum face, GLenum func, GLint ref, GLuint mask) {
  driver_->fn.glStencilFuncSeparateFn(face, func, ref, mask);
}

void GLApiBase::glStencilMaskFn(GLuint mask) {
  driver_->fn.glStencilMaskFn(mask);
}

void GLApiBase::glStencilMaskSeparateFn(GLenum face, GLuint mask) {
  driver_->fn.glStencilMaskSeparateFn(face, mask);
}

void GLApiBase::glStencilOpFn(GLenum fail, GLenum zfail, GLenum zpass) {
  driver_->fn.glStencilOpFn(fail, zfail, zpass);
}

void GLApiBase::glStencilOpSeparateFn(GLenum face, GLenum fail, GLenum zfail, GLenum zpass) {
  driver_->fn.glStencilOpSeparateFn(face, fail, zfail, zpass);
}

void GLApiBase::glTexImage2DFn(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels) {
  driver_->fn.glTexImage2DFn(target, level, internalformat, width, height, border, format, type, pixels);
}

void GLApiBase::glTexParameterfFn(GLenum target, GLenum pname, GLfloat param) {
  driver_->fn.glTexParameterfFn(target, pname, param);
}

void GLApiBase::glTexParameterfvFn(GLenum target, GLenum pname, const GLfloat* params) {
  driver_->fn.glTexParameterfvFn(target, pname, params);
}

void GLApiBase::glTexParameteriFn(GLenum target, GLenum pname, GLint param) {
  driver_->fn.glTexParameteriFn(target, pname, param);
}

void GLApiBase::glTexParameterivFn(GLenum target, GLenum pname, const GLint* params) {
  driver_->fn.glTexParameterivFn(target, pname, params);
}

void GLApiBase::glTexStorage2DEXTFn(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  driver_->fn.glTexStorage2DEXTFn(target, levels, internalformat, width, height);
}

void GLApiBase::glTexSubImage2DFn(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels) {
  driver_->fn.glTexSubImage2DFn(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

void GLApiBase::glUniform1fFn(GLint location, GLfloat x) {
  driver_->fn.glUniform1fFn(location, x);
}

void GLApiBase::glUniform1fvFn(GLint location, GLsizei count, const GLfloat* v) {
  driver_->fn.glUniform1fvFn(location, count, v);
}

void GLApiBase::glUniform1iFn(GLint location, GLint x) {
  driver_->fn.glUniform1iFn(location, x);
}

void GLApiBase::glUniform1ivFn(GLint location, GLsizei count, const GLint* v) {
  driver_->fn.glUniform1ivFn(location, count, v);
}

void GLApiBase::glUniform2fFn(GLint location, GLfloat x, GLfloat y) {
  driver_->fn.glUniform2fFn(location, x, y);
}

void GLApiBase::glUniform2fvFn(GLint location, GLsizei count, const GLfloat* v) {
  driver_->fn.glUniform2fvFn(location, count, v);
}

void GLApiBase::glUniform2iFn(GLint location, GLint x, GLint y) {
  driver_->fn.glUniform2iFn(location, x, y);
}

void GLApiBase::glUniform2ivFn(GLint location, GLsizei count, const GLint* v) {
  driver_->fn.glUniform2ivFn(location, count, v);
}

void GLApiBase::glUniform3fFn(GLint location, GLfloat x, GLfloat y, GLfloat z) {
  driver_->fn.glUniform3fFn(location, x, y, z);
}

void GLApiBase::glUniform3fvFn(GLint location, GLsizei count, const GLfloat* v) {
  driver_->fn.glUniform3fvFn(location, count, v);
}

void GLApiBase::glUniform3iFn(GLint location, GLint x, GLint y, GLint z) {
  driver_->fn.glUniform3iFn(location, x, y, z);
}

void GLApiBase::glUniform3ivFn(GLint location, GLsizei count, const GLint* v) {
  driver_->fn.glUniform3ivFn(location, count, v);
}

void GLApiBase::glUniform4fFn(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  driver_->fn.glUniform4fFn(location, x, y, z, w);
}

void GLApiBase::glUniform4fvFn(GLint location, GLsizei count, const GLfloat* v) {
  driver_->fn.glUniform4fvFn(location, count, v);
}

void GLApiBase::glUniform4iFn(GLint location, GLint x, GLint y, GLint z, GLint w) {
  driver_->fn.glUniform4iFn(location, x, y, z, w);
}

void GLApiBase::glUniform4ivFn(GLint location, GLsizei count, const GLint* v) {
  driver_->fn.glUniform4ivFn(location, count, v);
}

void GLApiBase::glUniformMatrix2fvFn(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) {
  driver_->fn.glUniformMatrix2fvFn(location, count, transpose, value);
}

void GLApiBase::glUniformMatrix3fvFn(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) {
  driver_->fn.glUniformMatrix3fvFn(location, count, transpose, value);
}

void GLApiBase::glUniformMatrix4fvFn(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) {
  driver_->fn.glUniformMatrix4fvFn(location, count, transpose, value);
}

GLboolean GLApiBase::glUnmapBufferFn(GLenum target) {
  return driver_->fn.glUnmapBufferFn(target);
}

void GLApiBase::glUseProgramFn(GLuint program) {
  driver_->fn.glUseProgramFn(program);
}

void GLApiBase::glValidateProgramFn(GLuint program) {
  driver_->fn.glValidateProgramFn(program);
}

void GLApiBase::glVertexAttrib1fFn(GLuint indx, GLfloat x) {
  driver_->fn.glVertexAttrib1fFn(indx, x);
}

void GLApiBase::glVertexAttrib1fvFn(GLuint indx, const GLfloat* values) {
  driver_->fn.glVertexAttrib1fvFn(indx, values);
}

void GLApiBase::glVertexAttrib2fFn(GLuint indx, GLfloat x, GLfloat y) {
  driver_->fn.glVertexAttrib2fFn(indx, x, y);
}

void GLApiBase::glVertexAttrib2fvFn(GLuint indx, const GLfloat* values) {
  driver_->fn.glVertexAttrib2fvFn(indx, values);
}

void GLApiBase::glVertexAttrib3fFn(GLuint indx, GLfloat x, GLfloat y, GLfloat z) {
  driver_->fn.glVertexAttrib3fFn(indx, x, y, z);
}

void GLApiBase::glVertexAttrib3fvFn(GLuint indx, const GLfloat* values) {
  driver_->fn.glVertexAttrib3fvFn(indx, values);
}

void GLApiBase::glVertexAttrib4fFn(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  driver_->fn.glVertexAttrib4fFn(indx, x, y, z, w);
}

void GLApiBase::glVertexAttrib4fvFn(GLuint indx, const GLfloat* values) {
  driver_->fn.glVertexAttrib4fvFn(indx, values);
}

void GLApiBase::glVertexAttribPointerFn(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr) {
  driver_->fn.glVertexAttribPointerFn(indx, size, type, normalized, stride, ptr);
}

void GLApiBase::glViewportFn(GLint x, GLint y, GLsizei width, GLsizei height) {
  driver_->fn.glViewportFn(x, y, width, height);
}

void GLApiBase::glGenFencesNVFn(GLsizei n, GLuint* fences) {
  driver_->fn.glGenFencesNVFn(n, fences);
}

void GLApiBase::glDeleteFencesNVFn(GLsizei n, const GLuint* fences) {
  driver_->fn.glDeleteFencesNVFn(n, fences);
}

void GLApiBase::glSetFenceNVFn(GLuint fence, GLenum condition) {
  driver_->fn.glSetFenceNVFn(fence, condition);
}

GLboolean GLApiBase::glTestFenceNVFn(GLuint fence) {
  return driver_->fn.glTestFenceNVFn(fence);
}

void GLApiBase::glFinishFenceNVFn(GLuint fence) {
  driver_->fn.glFinishFenceNVFn(fence);
}

GLboolean GLApiBase::glIsFenceNVFn(GLuint fence) {
  return driver_->fn.glIsFenceNVFn(fence);
}

void GLApiBase::glGetFenceivNVFn(GLuint fence, GLenum pname, GLint* params) {
  driver_->fn.glGetFenceivNVFn(fence, pname, params);
}

GLsync GLApiBase::glFenceSyncFn(GLenum condition, GLbitfield flags) {
  return driver_->fn.glFenceSyncFn(condition, flags);
}

void GLApiBase::glDeleteSyncFn(GLsync sync) {
  driver_->fn.glDeleteSyncFn(sync);
}

void GLApiBase::glGetSyncivFn(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length,GLint* values) {
  driver_->fn.glGetSyncivFn(sync, pname, bufSize, length,values);
}

void GLApiBase::glDrawArraysInstancedANGLEFn(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  driver_->fn.glDrawArraysInstancedANGLEFn(mode, first, count, primcount);
}

void GLApiBase::glDrawElementsInstancedANGLEFn(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount) {
  driver_->fn.glDrawElementsInstancedANGLEFn(mode, count, type, indices, primcount);
}

void GLApiBase::glVertexAttribDivisorANGLEFn(GLuint index, GLuint divisor) {
  driver_->fn.glVertexAttribDivisorANGLEFn(index, divisor);
}

void GLApiBase::glGenVertexArraysOESFn(GLsizei n, GLuint* arrays) {
  driver_->fn.glGenVertexArraysOESFn(n, arrays);
}

void GLApiBase::glDeleteVertexArraysOESFn(GLsizei n, const GLuint* arrays) {
  driver_->fn.glDeleteVertexArraysOESFn(n, arrays);
}

void GLApiBase::glBindVertexArrayOESFn(GLuint array) {
  driver_->fn.glBindVertexArrayOESFn(array);
}

GLboolean GLApiBase::glIsVertexArrayOESFn(GLuint array) {
  return driver_->fn.glIsVertexArrayOESFn(array);
}

void GLApiBase::glDiscardFramebufferEXTFn(GLenum target, GLsizei numAttachments, const GLenum* attachments) {
  driver_->fn.glDiscardFramebufferEXTFn(target, numAttachments, attachments);
}

}  // namespace gfx
