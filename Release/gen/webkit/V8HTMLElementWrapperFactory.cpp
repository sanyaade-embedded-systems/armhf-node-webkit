/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "config.h"
#include "V8HTMLElementWrapperFactory.h"
#include "V8HTMLAnchorElement.h"
#include "V8HTMLAppletElement.h"
#include "V8HTMLAreaElement.h"
#include "V8HTMLBaseElement.h"
#include "V8HTMLBaseFontElement.h"
#include "V8HTMLQuoteElement.h"
#include "V8HTMLBodyElement.h"
#include "V8HTMLBRElement.h"
#include "V8HTMLButtonElement.h"
#include "V8HTMLCanvasElement.h"
#include "V8HTMLTableCaptionElement.h"
#include "V8HTMLTableColElement.h"
#include "V8HTMLModElement.h"
#include "V8HTMLDirectoryElement.h"
#include "V8HTMLDivElement.h"
#include "V8HTMLDListElement.h"
#include "V8HTMLEmbedElement.h"
#include "V8HTMLFieldSetElement.h"
#include "V8HTMLFontElement.h"
#include "V8HTMLFormElement.h"
#include "V8HTMLFrameElement.h"
#include "V8HTMLFrameSetElement.h"
#include "V8HTMLHeadingElement.h"
#include "V8HTMLHeadElement.h"
#include "V8HTMLHRElement.h"
#include "V8HTMLHtmlElement.h"
#include "V8HTMLIFrameElement.h"
#include "V8HTMLImageElement.h"
#include "V8HTMLInputElement.h"
#include "V8HTMLUnknownElement.h"
#include "V8HTMLKeygenElement.h"
#include "V8HTMLLabelElement.h"
#include "V8HTMLLegendElement.h"
#include "V8HTMLLIElement.h"
#include "V8HTMLLinkElement.h"
#include "V8HTMLPreElement.h"
#include "V8HTMLMapElement.h"
#include "V8HTMLMarqueeElement.h"
#include "V8HTMLMenuElement.h"
#include "V8HTMLMetaElement.h"
#include "V8HTMLObjectElement.h"
#include "V8HTMLOListElement.h"
#include "V8HTMLOptGroupElement.h"
#include "V8HTMLOptionElement.h"
#include "V8HTMLOutputElement.h"
#include "V8HTMLParagraphElement.h"
#include "V8HTMLParamElement.h"
#include "V8HTMLScriptElement.h"
#include "V8HTMLSelectElement.h"
#include "V8HTMLSpanElement.h"
#include "V8HTMLStyleElement.h"
#include "V8HTMLTableElement.h"
#include "V8HTMLTableSectionElement.h"
#include "V8HTMLTableCellElement.h"
#include "V8HTMLTextAreaElement.h"
#include "V8HTMLTitleElement.h"
#include "V8HTMLTableRowElement.h"
#include "V8HTMLUListElement.h"
#include "V8HTMLUnknownElement.h"

#include "HTMLNames.h"

#include "HTMLAnchorElement.h"
#include "HTMLElement.h"
#include "HTMLAppletElement.h"
#include "HTMLAreaElement.h"
#include "HTMLBaseElement.h"
#include "HTMLBaseFontElement.h"
#include "HTMLBDIElement.h"
#include "HTMLQuoteElement.h"
#include "HTMLBodyElement.h"
#include "HTMLBRElement.h"
#include "HTMLButtonElement.h"
#include "HTMLCanvasElement.h"
#include "HTMLTableCaptionElement.h"
#include "HTMLTableColElement.h"
#include "HTMLModElement.h"
#include "HTMLDirectoryElement.h"
#include "HTMLDivElement.h"
#include "HTMLDListElement.h"
#include "HTMLEmbedElement.h"
#include "HTMLFieldSetElement.h"
#include "HTMLFontElement.h"
#include "HTMLFormElement.h"
#include "HTMLFrameElement.h"
#include "HTMLFrameSetElement.h"
#include "HTMLHeadingElement.h"
#include "HTMLHeadElement.h"
#include "HTMLHRElement.h"
#include "HTMLHtmlElement.h"
#include "HTMLIFrameElement.h"
#include "HTMLImageElement.h"
#include "HTMLInputElement.h"
#include "HTMLUnknownElement.h"
#include "HTMLKeygenElement.h"
#include "HTMLLabelElement.h"
#include "HTMLLegendElement.h"
#include "HTMLLIElement.h"
#include "HTMLLinkElement.h"
#include "HTMLPreElement.h"
#include "HTMLMapElement.h"
#include "HTMLMarqueeElement.h"
#include "HTMLMenuElement.h"
#include "HTMLMetaElement.h"
#include "HTMLObjectElement.h"
#include "HTMLOListElement.h"
#include "HTMLOptGroupElement.h"
#include "HTMLOptionElement.h"
#include "HTMLOutputElement.h"
#include "HTMLParagraphElement.h"
#include "HTMLParamElement.h"
#include "HTMLScriptElement.h"
#include "HTMLSelectElement.h"
#include "HTMLSpanElement.h"
#include "HTMLStyleElement.h"
#include "HTMLTableElement.h"
#include "HTMLTableSectionElement.h"
#include "HTMLTableCellElement.h"
#include "HTMLTextAreaElement.h"
#include "HTMLTitleElement.h"
#include "HTMLTableRowElement.h"
#include "HTMLUListElement.h"
#include "HTMLUnknownElement.h"

#include <wtf/StdLibExtras.h>

#if ENABLE(DATALIST_ELEMENT)
#include "HTMLDataListElement.h"
#include "V8HTMLDataListElement.h"
#endif

#if ENABLE(DETAILS_ELEMENT)
#include "HTMLDetailsElement.h"
#include "HTMLSummaryElement.h"
#include "V8HTMLDetailsElement.h"
#endif

#if ENABLE(DIALOG_ELEMENT)
#include "HTMLDialogElement.h"
#include "V8HTMLDialogElement.h"
#endif

#if ENABLE(METER_ELEMENT)
#include "HTMLMeterElement.h"
#include "V8HTMLMeterElement.h"
#endif

#if ENABLE(PROGRESS_ELEMENT)
#include "HTMLProgressElement.h"
#include "V8HTMLProgressElement.h"
#endif

#if ENABLE(SHADOW_DOM)
#include "HTMLContentElement.h"
#include "HTMLShadowElement.h"
#include "V8HTMLContentElement.h"
#include "V8HTMLShadowElement.h"
#endif

#if ENABLE(TEMPLATE_ELEMENT)
#include "HTMLTemplateElement.h"
#include "V8HTMLTemplateElement.h"
#endif

#if ENABLE(VIDEO)
#include "HTMLAudioElement.h"
#include "HTMLSourceElement.h"
#include "HTMLVideoElement.h"
#include "V8HTMLAudioElement.h"
#include "V8HTMLSourceElement.h"
#include "V8HTMLVideoElement.h"
#endif

#if ENABLE(VIDEO_TRACK)
#include "HTMLTrackElement.h"
#include "V8HTMLTrackElement.h"
#endif

#if ENABLE(WEB_INTENTS_TAG)
#include "HTMLIntentElement.h"
#include "V8HTMLIntentElement.h"
#endif

#include "ContextFeatures.h"
#include "RuntimeEnabledFeatures.h"

#if ENABLE(VIDEO)
#include "Document.h"
#include "Settings.h"
#endif

#include "V8HTMLElement.h"
        
#include <v8.h>

namespace WebCore {

using namespace HTMLNames;

typedef v8::Handle<v8::Object> (*CreateHTMLElementWrapperFunction)(HTMLElement*, v8::Handle<v8::Object> creationContext, v8::Isolate*);

static v8::Handle<v8::Object> createHTMLAnchorElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLAnchorElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    ASSERT_NOT_REACHED();
    return v8::Handle<v8::Object>();
}

static v8::Handle<v8::Object> createHTMLAppletElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLAppletElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLAreaElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLAreaElement*>(element), creationContext, isolate);
}


#if ENABLE(VIDEO)

static v8::Handle<v8::Object> createHTMLAudioElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    Settings* settings = element->document()->settings();
    if (!MediaPlayer::isAvailable() || (settings && !settings->isMediaEnabled()))
        return createV8HTMLDirectWrapper(element, creationContext, isolate);
    return wrap(static_cast<HTMLAudioElement*>(element), creationContext, isolate);
}

#endif

static v8::Handle<v8::Object> createHTMLBaseElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLBaseElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLBaseFontElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLBaseFontElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLQuoteElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLQuoteElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLBodyElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLBodyElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLBRElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLBRElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLButtonElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLButtonElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLCanvasElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLCanvasElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLTableCaptionElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLTableCaptionElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLTableColElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLTableColElement*>(element), creationContext, isolate);
}


#if ENABLE(SHADOW_DOM)

static v8::Handle<v8::Object> createHTMLContentElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (!RuntimeEnabledFeatures::shadowDOMEnabled())
        return createV8HTMLFallbackWrapper(toHTMLUnknownElement(element), creationContext, isolate);
    return wrap(static_cast<HTMLContentElement*>(element), creationContext, isolate);
}
#endif

#if ENABLE(DATALIST_ELEMENT)

static v8::Handle<v8::Object> createHTMLDataListElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLDataListElement*>(element), creationContext, isolate);
}


#endif

static v8::Handle<v8::Object> createHTMLModElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLModElement*>(element), creationContext, isolate);
}


#if ENABLE(DETAILS_ELEMENT)

static v8::Handle<v8::Object> createHTMLDetailsElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLDetailsElement*>(element), creationContext, isolate);
}


#endif

#if ENABLE(DIALOG_ELEMENT)

static v8::Handle<v8::Object> createHTMLDialogElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (!ContextFeatures::dialogElementEnabled(element->document()))
        return createV8HTMLFallbackWrapper(toHTMLUnknownElement(element), creationContext, isolate);
    return wrap(static_cast<HTMLDialogElement*>(element), creationContext, isolate);
}
#endif

static v8::Handle<v8::Object> createHTMLDirectoryElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLDirectoryElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLDivElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLDivElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLDListElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLDListElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLEmbedElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLEmbedElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLFieldSetElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLFieldSetElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLFontElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLFontElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLFormElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLFormElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLFrameElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLFrameElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLFrameSetElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLFrameSetElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLHeadingElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLHeadingElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLHeadElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLHeadElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLHRElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLHRElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLHtmlElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLHtmlElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLIFrameElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLIFrameElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLImageElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLImageElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLInputElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLInputElement*>(element), creationContext, isolate);
}


#if ENABLE(WEB_INTENTS_TAG)

static v8::Handle<v8::Object> createHTMLIntentElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLIntentElement*>(element), creationContext, isolate);
}


#endif

static v8::Handle<v8::Object> createHTMLUnknownElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLUnknownElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLKeygenElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLKeygenElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLLabelElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLLabelElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLLegendElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLLegendElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLLIElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLLIElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLLinkElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLLinkElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLPreElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLPreElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLMapElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLMapElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLMarqueeElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLMarqueeElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLMenuElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLMenuElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLMetaElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLMetaElement*>(element), creationContext, isolate);
}


#if ENABLE(METER_ELEMENT)

static v8::Handle<v8::Object> createHTMLMeterElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLMeterElement*>(element), creationContext, isolate);
}


#endif

static v8::Handle<v8::Object> createHTMLObjectElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLObjectElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLOListElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLOListElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLOptGroupElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLOptGroupElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLOptionElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLOptionElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLOutputElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLOutputElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLParagraphElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLParagraphElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLParamElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLParamElement*>(element), creationContext, isolate);
}


#if ENABLE(PROGRESS_ELEMENT)

static v8::Handle<v8::Object> createHTMLProgressElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLProgressElement*>(element), creationContext, isolate);
}


#endif

static v8::Handle<v8::Object> createHTMLScriptElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLScriptElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLSelectElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLSelectElement*>(element), creationContext, isolate);
}


#if ENABLE(SHADOW_DOM)

static v8::Handle<v8::Object> createHTMLShadowElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (!RuntimeEnabledFeatures::shadowDOMEnabled())
        return createV8HTMLFallbackWrapper(toHTMLUnknownElement(element), creationContext, isolate);
    return wrap(static_cast<HTMLShadowElement*>(element), creationContext, isolate);
}
#endif

#if ENABLE(VIDEO)

static v8::Handle<v8::Object> createHTMLSourceElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    Settings* settings = element->document()->settings();
    if (!MediaPlayer::isAvailable() || (settings && !settings->isMediaEnabled()))
        return createV8HTMLDirectWrapper(element, creationContext, isolate);
    return wrap(static_cast<HTMLSourceElement*>(element), creationContext, isolate);
}

#endif

static v8::Handle<v8::Object> createHTMLSpanElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLSpanElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLStyleElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLStyleElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLTableElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLTableElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLTableSectionElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLTableSectionElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLTableCellElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLTableCellElement*>(element), creationContext, isolate);
}


#if ENABLE(TEMPLATE_ELEMENT)

static v8::Handle<v8::Object> createHTMLTemplateElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLTemplateElement*>(element), creationContext, isolate);
}


#endif

static v8::Handle<v8::Object> createHTMLTextAreaElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLTextAreaElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLTitleElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLTitleElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createHTMLTableRowElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLTableRowElement*>(element), creationContext, isolate);
}


#if ENABLE(VIDEO_TRACK)

static v8::Handle<v8::Object> createHTMLTrackElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    Settings* settings = element->document()->settings();
    if (!MediaPlayer::isAvailable() || (settings && !settings->isMediaEnabled()))
        return createV8HTMLDirectWrapper(element, creationContext, isolate);
    return wrap(static_cast<HTMLTrackElement*>(element), creationContext, isolate);
}

#endif

static v8::Handle<v8::Object> createHTMLUListElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<HTMLUListElement*>(element), creationContext, isolate);
}


#if ENABLE(VIDEO)

static v8::Handle<v8::Object> createHTMLVideoElementWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    Settings* settings = element->document()->settings();
    if (!MediaPlayer::isAvailable() || (settings && !settings->isMediaEnabled()))
        return createV8HTMLDirectWrapper(element, creationContext, isolate);
    return wrap(static_cast<HTMLVideoElement*>(element), creationContext, isolate);
}

#endif

v8::Handle<v8::Object> createV8HTMLWrapper(HTMLElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    typedef HashMap<WTF::AtomicStringImpl*, CreateHTMLElementWrapperFunction> FunctionMap;
    DEFINE_STATIC_LOCAL(FunctionMap, map, ());
    if (map.isEmpty()) {
       map.set(aTag.localName().impl(), createHTMLAnchorElementWrapper);
       map.set(abbrTag.localName().impl(), createHTMLElementWrapper);
       map.set(acronymTag.localName().impl(), createHTMLElementWrapper);
       map.set(addressTag.localName().impl(), createHTMLElementWrapper);
       map.set(appletTag.localName().impl(), createHTMLAppletElementWrapper);
       map.set(areaTag.localName().impl(), createHTMLAreaElementWrapper);
       map.set(articleTag.localName().impl(), createHTMLElementWrapper);
       map.set(asideTag.localName().impl(), createHTMLElementWrapper);
#if ENABLE(VIDEO)
       map.set(audioTag.localName().impl(), createHTMLAudioElementWrapper);
#endif
       map.set(bTag.localName().impl(), createHTMLElementWrapper);
       map.set(baseTag.localName().impl(), createHTMLBaseElementWrapper);
       map.set(basefontTag.localName().impl(), createHTMLBaseFontElementWrapper);
       map.set(bdiTag.localName().impl(), createHTMLElementWrapper);
       map.set(bdoTag.localName().impl(), createHTMLElementWrapper);
       map.set(bgsoundTag.localName().impl(), createHTMLElementWrapper);
       map.set(bigTag.localName().impl(), createHTMLElementWrapper);
       map.set(blockquoteTag.localName().impl(), createHTMLQuoteElementWrapper);
       map.set(bodyTag.localName().impl(), createHTMLBodyElementWrapper);
       map.set(brTag.localName().impl(), createHTMLBRElementWrapper);
       map.set(buttonTag.localName().impl(), createHTMLButtonElementWrapper);
       map.set(canvasTag.localName().impl(), createHTMLCanvasElementWrapper);
       map.set(captionTag.localName().impl(), createHTMLTableCaptionElementWrapper);
       map.set(centerTag.localName().impl(), createHTMLElementWrapper);
       map.set(citeTag.localName().impl(), createHTMLElementWrapper);
       map.set(codeTag.localName().impl(), createHTMLElementWrapper);
       map.set(colTag.localName().impl(), createHTMLTableColElementWrapper);
       map.set(colgroupTag.localName().impl(), createHTMLTableColElementWrapper);
       map.set(commandTag.localName().impl(), createHTMLElementWrapper);
#if ENABLE(SHADOW_DOM)
       map.set(contentTag.localName().impl(), createHTMLContentElementWrapper);
#endif
#if ENABLE(DATALIST_ELEMENT)
       map.set(datalistTag.localName().impl(), createHTMLDataListElementWrapper);
#endif
       map.set(ddTag.localName().impl(), createHTMLElementWrapper);
       map.set(delTag.localName().impl(), createHTMLModElementWrapper);
#if ENABLE(DETAILS_ELEMENT)
       map.set(detailsTag.localName().impl(), createHTMLDetailsElementWrapper);
#endif
       map.set(dfnTag.localName().impl(), createHTMLElementWrapper);
#if ENABLE(DIALOG_ELEMENT)
       map.set(dialogTag.localName().impl(), createHTMLDialogElementWrapper);
#endif
       map.set(dirTag.localName().impl(), createHTMLDirectoryElementWrapper);
       map.set(divTag.localName().impl(), createHTMLDivElementWrapper);
       map.set(dlTag.localName().impl(), createHTMLDListElementWrapper);
       map.set(dtTag.localName().impl(), createHTMLElementWrapper);
       map.set(emTag.localName().impl(), createHTMLElementWrapper);
       map.set(embedTag.localName().impl(), createHTMLEmbedElementWrapper);
       map.set(fieldsetTag.localName().impl(), createHTMLFieldSetElementWrapper);
       map.set(figcaptionTag.localName().impl(), createHTMLElementWrapper);
       map.set(figureTag.localName().impl(), createHTMLElementWrapper);
       map.set(fontTag.localName().impl(), createHTMLFontElementWrapper);
       map.set(footerTag.localName().impl(), createHTMLElementWrapper);
       map.set(formTag.localName().impl(), createHTMLFormElementWrapper);
       map.set(frameTag.localName().impl(), createHTMLFrameElementWrapper);
       map.set(framesetTag.localName().impl(), createHTMLFrameSetElementWrapper);
       map.set(h1Tag.localName().impl(), createHTMLHeadingElementWrapper);
       map.set(h2Tag.localName().impl(), createHTMLHeadingElementWrapper);
       map.set(h3Tag.localName().impl(), createHTMLHeadingElementWrapper);
       map.set(h4Tag.localName().impl(), createHTMLHeadingElementWrapper);
       map.set(h5Tag.localName().impl(), createHTMLHeadingElementWrapper);
       map.set(h6Tag.localName().impl(), createHTMLHeadingElementWrapper);
       map.set(headTag.localName().impl(), createHTMLHeadElementWrapper);
       map.set(headerTag.localName().impl(), createHTMLElementWrapper);
       map.set(hgroupTag.localName().impl(), createHTMLElementWrapper);
       map.set(hrTag.localName().impl(), createHTMLHRElementWrapper);
       map.set(htmlTag.localName().impl(), createHTMLHtmlElementWrapper);
       map.set(iTag.localName().impl(), createHTMLElementWrapper);
       map.set(iframeTag.localName().impl(), createHTMLIFrameElementWrapper);
       map.set(imageTag.localName().impl(), createHTMLImageElementWrapper);
       map.set(imgTag.localName().impl(), createHTMLImageElementWrapper);
       map.set(inputTag.localName().impl(), createHTMLInputElementWrapper);
       map.set(insTag.localName().impl(), createHTMLModElementWrapper);
#if ENABLE(WEB_INTENTS_TAG)
       map.set(intentTag.localName().impl(), createHTMLIntentElementWrapper);
#endif
       map.set(isindexTag.localName().impl(), createHTMLUnknownElementWrapper);
       map.set(kbdTag.localName().impl(), createHTMLElementWrapper);
       map.set(keygenTag.localName().impl(), createHTMLKeygenElementWrapper);
       map.set(labelTag.localName().impl(), createHTMLLabelElementWrapper);
       map.set(layerTag.localName().impl(), createHTMLElementWrapper);
       map.set(legendTag.localName().impl(), createHTMLLegendElementWrapper);
       map.set(liTag.localName().impl(), createHTMLLIElementWrapper);
       map.set(linkTag.localName().impl(), createHTMLLinkElementWrapper);
       map.set(listingTag.localName().impl(), createHTMLPreElementWrapper);
       map.set(mapTag.localName().impl(), createHTMLMapElementWrapper);
       map.set(markTag.localName().impl(), createHTMLElementWrapper);
       map.set(marqueeTag.localName().impl(), createHTMLMarqueeElementWrapper);
       map.set(menuTag.localName().impl(), createHTMLMenuElementWrapper);
       map.set(metaTag.localName().impl(), createHTMLMetaElementWrapper);
#if ENABLE(METER_ELEMENT)
       map.set(meterTag.localName().impl(), createHTMLMeterElementWrapper);
#endif
       map.set(navTag.localName().impl(), createHTMLElementWrapper);
       map.set(nobrTag.localName().impl(), createHTMLElementWrapper);
       map.set(noembedTag.localName().impl(), createHTMLElementWrapper);
       map.set(noframesTag.localName().impl(), createHTMLElementWrapper);
       map.set(nolayerTag.localName().impl(), createHTMLElementWrapper);
       map.set(noscriptTag.localName().impl(), createHTMLElementWrapper);
       map.set(objectTag.localName().impl(), createHTMLObjectElementWrapper);
       map.set(olTag.localName().impl(), createHTMLOListElementWrapper);
       map.set(optgroupTag.localName().impl(), createHTMLOptGroupElementWrapper);
       map.set(optionTag.localName().impl(), createHTMLOptionElementWrapper);
       map.set(outputTag.localName().impl(), createHTMLOutputElementWrapper);
       map.set(pTag.localName().impl(), createHTMLParagraphElementWrapper);
       map.set(paramTag.localName().impl(), createHTMLParamElementWrapper);
       map.set(plaintextTag.localName().impl(), createHTMLElementWrapper);
       map.set(preTag.localName().impl(), createHTMLPreElementWrapper);
#if ENABLE(PROGRESS_ELEMENT)
       map.set(progressTag.localName().impl(), createHTMLProgressElementWrapper);
#endif
       map.set(qTag.localName().impl(), createHTMLQuoteElementWrapper);
       map.set(rpTag.localName().impl(), createHTMLElementWrapper);
       map.set(rtTag.localName().impl(), createHTMLElementWrapper);
       map.set(rubyTag.localName().impl(), createHTMLElementWrapper);
       map.set(sTag.localName().impl(), createHTMLElementWrapper);
       map.set(sampTag.localName().impl(), createHTMLElementWrapper);
       map.set(scriptTag.localName().impl(), createHTMLScriptElementWrapper);
       map.set(sectionTag.localName().impl(), createHTMLElementWrapper);
       map.set(selectTag.localName().impl(), createHTMLSelectElementWrapper);
#if ENABLE(SHADOW_DOM)
       map.set(shadowTag.localName().impl(), createHTMLShadowElementWrapper);
#endif
       map.set(smallTag.localName().impl(), createHTMLElementWrapper);
#if ENABLE(VIDEO)
       map.set(sourceTag.localName().impl(), createHTMLSourceElementWrapper);
#endif
       map.set(spanTag.localName().impl(), createHTMLSpanElementWrapper);
       map.set(strikeTag.localName().impl(), createHTMLElementWrapper);
       map.set(strongTag.localName().impl(), createHTMLElementWrapper);
       map.set(styleTag.localName().impl(), createHTMLStyleElementWrapper);
       map.set(subTag.localName().impl(), createHTMLElementWrapper);
#if ENABLE(DETAILS_ELEMENT)
       map.set(summaryTag.localName().impl(), createHTMLElementWrapper);
#endif
       map.set(supTag.localName().impl(), createHTMLElementWrapper);
       map.set(tableTag.localName().impl(), createHTMLTableElementWrapper);
       map.set(tbodyTag.localName().impl(), createHTMLTableSectionElementWrapper);
       map.set(tdTag.localName().impl(), createHTMLTableCellElementWrapper);
#if ENABLE(TEMPLATE_ELEMENT)
       map.set(templateTag.localName().impl(), createHTMLTemplateElementWrapper);
#endif
       map.set(textareaTag.localName().impl(), createHTMLTextAreaElementWrapper);
       map.set(tfootTag.localName().impl(), createHTMLTableSectionElementWrapper);
       map.set(thTag.localName().impl(), createHTMLTableCellElementWrapper);
       map.set(theadTag.localName().impl(), createHTMLTableSectionElementWrapper);
       map.set(titleTag.localName().impl(), createHTMLTitleElementWrapper);
       map.set(trTag.localName().impl(), createHTMLTableRowElementWrapper);
#if ENABLE(VIDEO_TRACK)
       map.set(trackTag.localName().impl(), createHTMLTrackElementWrapper);
#endif
       map.set(ttTag.localName().impl(), createHTMLElementWrapper);
       map.set(uTag.localName().impl(), createHTMLElementWrapper);
       map.set(ulTag.localName().impl(), createHTMLUListElementWrapper);
       map.set(varTag.localName().impl(), createHTMLElementWrapper);
#if ENABLE(VIDEO)
       map.set(videoTag.localName().impl(), createHTMLVideoElementWrapper);
#endif
       map.set(wbrTag.localName().impl(), createHTMLElementWrapper);
       map.set(webkitInnerImageTag.localName().impl(), createHTMLElementWrapper);
       map.set(webkitShadowContentTag.localName().impl(), createHTMLElementWrapper);
       map.set(xmpTag.localName().impl(), createHTMLPreElementWrapper);
    }
    CreateHTMLElementWrapperFunction createWrapperFunction = map.get(element->localName().impl());
    if (createWrapperFunction)
    {
        if (createWrapperFunction == createHTMLElementWrapper)
           return V8HTMLElement::createWrapper(element, creationContext, isolate);
        return createWrapperFunction(element, creationContext, isolate);
    }
    return wrap(toHTMLUnknownElement(element), creationContext, isolate);
}

}

