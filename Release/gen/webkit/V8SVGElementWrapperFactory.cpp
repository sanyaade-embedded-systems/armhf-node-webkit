/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "config.h"
#include "V8SVGElementWrapperFactory.h"

#if ENABLE(SVG)

#include "V8SVGAElement.h"
#include "V8SVGAltGlyphElement.h"
#include "V8SVGAltGlyphDefElement.h"
#include "V8SVGAltGlyphItemElement.h"
#include "V8SVGAnimateElement.h"
#include "V8SVGAnimateColorElement.h"
#include "V8SVGAnimateMotionElement.h"
#include "V8SVGAnimateTransformElement.h"
#include "V8SVGCircleElement.h"
#include "V8SVGClipPathElement.h"
#include "V8SVGCursorElement.h"
#include "V8SVGDefsElement.h"
#include "V8SVGDescElement.h"
#include "V8SVGEllipseElement.h"
#include "V8SVGFEBlendElement.h"
#include "V8SVGFEColorMatrixElement.h"
#include "V8SVGFEComponentTransferElement.h"
#include "V8SVGFECompositeElement.h"
#include "V8SVGFEConvolveMatrixElement.h"
#include "V8SVGFEDiffuseLightingElement.h"
#include "V8SVGFEDisplacementMapElement.h"
#include "V8SVGFEDistantLightElement.h"
#include "V8SVGFEDropShadowElement.h"
#include "V8SVGFEFloodElement.h"
#include "V8SVGFEFuncAElement.h"
#include "V8SVGFEFuncBElement.h"
#include "V8SVGFEFuncGElement.h"
#include "V8SVGFEFuncRElement.h"
#include "V8SVGFEGaussianBlurElement.h"
#include "V8SVGFEImageElement.h"
#include "V8SVGFEMergeElement.h"
#include "V8SVGFEMergeNodeElement.h"
#include "V8SVGFEMorphologyElement.h"
#include "V8SVGFEOffsetElement.h"
#include "V8SVGFEPointLightElement.h"
#include "V8SVGFESpecularLightingElement.h"
#include "V8SVGFESpotLightElement.h"
#include "V8SVGFETileElement.h"
#include "V8SVGFETurbulenceElement.h"
#include "V8SVGFilterElement.h"
#include "V8SVGFontElement.h"
#include "V8SVGFontFaceElement.h"
#include "V8SVGFontFaceFormatElement.h"
#include "V8SVGFontFaceNameElement.h"
#include "V8SVGFontFaceSrcElement.h"
#include "V8SVGFontFaceUriElement.h"
#include "V8SVGForeignObjectElement.h"
#include "V8SVGGElement.h"
#include "V8SVGGlyphElement.h"
#include "V8SVGGlyphRefElement.h"
#include "V8SVGHKernElement.h"
#include "V8SVGImageElement.h"
#include "V8SVGLineElement.h"
#include "V8SVGLinearGradientElement.h"
#include "V8SVGMarkerElement.h"
#include "V8SVGMaskElement.h"
#include "V8SVGMetadataElement.h"
#include "V8SVGMissingGlyphElement.h"
#include "V8SVGMPathElement.h"
#include "V8SVGPathElement.h"
#include "V8SVGPatternElement.h"
#include "V8SVGPolygonElement.h"
#include "V8SVGPolylineElement.h"
#include "V8SVGRadialGradientElement.h"
#include "V8SVGRectElement.h"
#include "V8SVGScriptElement.h"
#include "V8SVGSetElement.h"
#include "V8SVGStopElement.h"
#include "V8SVGStyleElement.h"
#include "V8SVGSVGElement.h"
#include "V8SVGSwitchElement.h"
#include "V8SVGSymbolElement.h"
#include "V8SVGTextElement.h"
#include "V8SVGTextPathElement.h"
#include "V8SVGTitleElement.h"
#include "V8SVGTRefElement.h"
#include "V8SVGTSpanElement.h"
#include "V8SVGUseElement.h"
#include "V8SVGViewElement.h"
#include "V8SVGVKernElement.h"
#include "V8SVGElement.h"

#include "SVGNames.h"

#include "SVGAElement.h"
#include "SVGAltGlyphElement.h"
#include "SVGAltGlyphDefElement.h"
#include "SVGAltGlyphItemElement.h"
#include "SVGAnimateElement.h"
#include "SVGAnimateColorElement.h"
#include "SVGAnimateMotionElement.h"
#include "SVGAnimateTransformElement.h"
#include "SVGCircleElement.h"
#include "SVGClipPathElement.h"
#include "SVGCursorElement.h"
#include "SVGDefsElement.h"
#include "SVGDescElement.h"
#include "SVGEllipseElement.h"
#include "SVGFEBlendElement.h"
#include "SVGFEColorMatrixElement.h"
#include "SVGFEComponentTransferElement.h"
#include "SVGFECompositeElement.h"
#include "SVGFEConvolveMatrixElement.h"
#include "SVGFEDiffuseLightingElement.h"
#include "SVGFEDisplacementMapElement.h"
#include "SVGFEDistantLightElement.h"
#include "SVGFEDropShadowElement.h"
#include "SVGFEFloodElement.h"
#include "SVGFEFuncAElement.h"
#include "SVGFEFuncBElement.h"
#include "SVGFEFuncGElement.h"
#include "SVGFEFuncRElement.h"
#include "SVGFEGaussianBlurElement.h"
#include "SVGFEImageElement.h"
#include "SVGFEMergeElement.h"
#include "SVGFEMergeNodeElement.h"
#include "SVGFEMorphologyElement.h"
#include "SVGFEOffsetElement.h"
#include "SVGFEPointLightElement.h"
#include "SVGFESpecularLightingElement.h"
#include "SVGFESpotLightElement.h"
#include "SVGFETileElement.h"
#include "SVGFETurbulenceElement.h"
#include "SVGFilterElement.h"
#include "SVGFontElement.h"
#include "SVGFontFaceElement.h"
#include "SVGFontFaceFormatElement.h"
#include "SVGFontFaceNameElement.h"
#include "SVGFontFaceSrcElement.h"
#include "SVGFontFaceUriElement.h"
#include "SVGForeignObjectElement.h"
#include "SVGGElement.h"
#include "SVGGlyphElement.h"
#include "SVGGlyphRefElement.h"
#include "SVGHKernElement.h"
#include "SVGImageElement.h"
#include "SVGLineElement.h"
#include "SVGLinearGradientElement.h"
#include "SVGMarkerElement.h"
#include "SVGMaskElement.h"
#include "SVGMetadataElement.h"
#include "SVGMissingGlyphElement.h"
#include "SVGMPathElement.h"
#include "SVGPathElement.h"
#include "SVGPatternElement.h"
#include "SVGPolygonElement.h"
#include "SVGPolylineElement.h"
#include "SVGRadialGradientElement.h"
#include "SVGRectElement.h"
#include "SVGScriptElement.h"
#include "SVGSetElement.h"
#include "SVGStopElement.h"
#include "SVGStyleElement.h"
#include "SVGSVGElement.h"
#include "SVGSwitchElement.h"
#include "SVGSymbolElement.h"
#include "SVGTextElement.h"
#include "SVGTextPathElement.h"
#include "SVGTitleElement.h"
#include "SVGTRefElement.h"
#include "SVGTSpanElement.h"
#include "SVGUseElement.h"
#include "SVGViewElement.h"
#include "SVGVKernElement.h"
#include "SVGElement.h"

#include <wtf/StdLibExtras.h>

#include "ContextFeatures.h"
#include "RuntimeEnabledFeatures.h"

#if ENABLE(VIDEO)
#include "Document.h"
#include "Settings.h"
#endif

#include "V8SVGElement.h"
        
#include <v8.h>

namespace WebCore {

using namespace SVGNames;

typedef v8::Handle<v8::Object> (*CreateSVGElementWrapperFunction)(SVGElement*, v8::Handle<v8::Object> creationContext, v8::Isolate*);

static v8::Handle<v8::Object> createSVGAElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGAElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGAltGlyphElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGAltGlyphElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGAltGlyphDefElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGAltGlyphDefElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGAltGlyphItemElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGAltGlyphItemElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGAnimateElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGAnimateElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGAnimateColorElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGAnimateColorElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGAnimateMotionElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGAnimateMotionElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGAnimateTransformElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGAnimateTransformElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGCircleElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGCircleElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGClipPathElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGClipPathElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGCursorElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGCursorElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGDefsElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGDefsElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGDescElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGDescElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGEllipseElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGEllipseElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEBlendElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEBlendElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEColorMatrixElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEColorMatrixElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEComponentTransferElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEComponentTransferElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFECompositeElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFECompositeElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEConvolveMatrixElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEConvolveMatrixElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEDiffuseLightingElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEDiffuseLightingElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEDisplacementMapElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEDisplacementMapElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEDistantLightElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEDistantLightElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEDropShadowElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEDropShadowElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEFloodElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEFloodElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEFuncAElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEFuncAElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEFuncBElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEFuncBElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEFuncGElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEFuncGElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEFuncRElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEFuncRElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEGaussianBlurElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEGaussianBlurElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEImageElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEImageElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEMergeElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEMergeElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEMergeNodeElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEMergeNodeElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEMorphologyElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEMorphologyElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEOffsetElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEOffsetElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFEPointLightElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFEPointLightElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFESpecularLightingElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFESpecularLightingElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFESpotLightElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFESpotLightElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFETileElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFETileElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFETurbulenceElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFETurbulenceElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFilterElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFilterElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFontElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFontElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFontFaceElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFontFaceElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFontFaceFormatElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFontFaceFormatElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFontFaceNameElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFontFaceNameElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFontFaceSrcElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFontFaceSrcElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGFontFaceUriElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGFontFaceUriElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGForeignObjectElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGForeignObjectElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGGElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGGElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGGlyphElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGGlyphElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGGlyphRefElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGGlyphRefElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGHKernElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGHKernElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGImageElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGImageElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGLineElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGLineElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGLinearGradientElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGLinearGradientElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGMarkerElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGMarkerElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGMaskElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGMaskElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGMetadataElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGMetadataElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGMissingGlyphElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGMissingGlyphElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGMPathElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGMPathElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGPathElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGPathElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGPatternElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGPatternElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGPolygonElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGPolygonElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGPolylineElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGPolylineElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGRadialGradientElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGRadialGradientElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGRectElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGRectElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGScriptElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGScriptElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGSetElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGSetElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGStopElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGStopElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGStyleElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGStyleElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGSVGElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGSVGElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGSwitchElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGSwitchElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGSymbolElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGSymbolElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGTextElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGTextElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGTextPathElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGTextPathElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGTitleElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGTitleElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGTRefElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGTRefElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGTSpanElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGTSpanElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGUseElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGUseElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGViewElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGViewElement*>(element), creationContext, isolate);
}


static v8::Handle<v8::Object> createSVGVKernElementWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    return wrap(static_cast<SVGVKernElement*>(element), creationContext, isolate);
}


v8::Handle<v8::Object> createV8SVGWrapper(SVGElement* element, v8::Handle<v8::Object> creationContext, v8::Isolate* isolate)
{
    typedef HashMap<WTF::AtomicStringImpl*, CreateSVGElementWrapperFunction> FunctionMap;
    DEFINE_STATIC_LOCAL(FunctionMap, map, ());
    if (map.isEmpty()) {
       map.set(aTag.localName().impl(), createSVGAElementWrapper);
       map.set(altGlyphTag.localName().impl(), createSVGAltGlyphElementWrapper);
       map.set(altGlyphDefTag.localName().impl(), createSVGAltGlyphDefElementWrapper);
       map.set(altGlyphItemTag.localName().impl(), createSVGAltGlyphItemElementWrapper);
       map.set(animateTag.localName().impl(), createSVGAnimateElementWrapper);
       map.set(animateColorTag.localName().impl(), createSVGAnimateColorElementWrapper);
       map.set(animateMotionTag.localName().impl(), createSVGAnimateMotionElementWrapper);
       map.set(animateTransformTag.localName().impl(), createSVGAnimateTransformElementWrapper);
       map.set(circleTag.localName().impl(), createSVGCircleElementWrapper);
       map.set(clipPathTag.localName().impl(), createSVGClipPathElementWrapper);
       map.set(cursorTag.localName().impl(), createSVGCursorElementWrapper);
       map.set(defsTag.localName().impl(), createSVGDefsElementWrapper);
       map.set(descTag.localName().impl(), createSVGDescElementWrapper);
       map.set(ellipseTag.localName().impl(), createSVGEllipseElementWrapper);
       map.set(feBlendTag.localName().impl(), createSVGFEBlendElementWrapper);
       map.set(feColorMatrixTag.localName().impl(), createSVGFEColorMatrixElementWrapper);
       map.set(feComponentTransferTag.localName().impl(), createSVGFEComponentTransferElementWrapper);
       map.set(feCompositeTag.localName().impl(), createSVGFECompositeElementWrapper);
       map.set(feConvolveMatrixTag.localName().impl(), createSVGFEConvolveMatrixElementWrapper);
       map.set(feDiffuseLightingTag.localName().impl(), createSVGFEDiffuseLightingElementWrapper);
       map.set(feDisplacementMapTag.localName().impl(), createSVGFEDisplacementMapElementWrapper);
       map.set(feDistantLightTag.localName().impl(), createSVGFEDistantLightElementWrapper);
       map.set(feDropShadowTag.localName().impl(), createSVGFEDropShadowElementWrapper);
       map.set(feFloodTag.localName().impl(), createSVGFEFloodElementWrapper);
       map.set(feFuncATag.localName().impl(), createSVGFEFuncAElementWrapper);
       map.set(feFuncBTag.localName().impl(), createSVGFEFuncBElementWrapper);
       map.set(feFuncGTag.localName().impl(), createSVGFEFuncGElementWrapper);
       map.set(feFuncRTag.localName().impl(), createSVGFEFuncRElementWrapper);
       map.set(feGaussianBlurTag.localName().impl(), createSVGFEGaussianBlurElementWrapper);
       map.set(feImageTag.localName().impl(), createSVGFEImageElementWrapper);
       map.set(feMergeTag.localName().impl(), createSVGFEMergeElementWrapper);
       map.set(feMergeNodeTag.localName().impl(), createSVGFEMergeNodeElementWrapper);
       map.set(feMorphologyTag.localName().impl(), createSVGFEMorphologyElementWrapper);
       map.set(feOffsetTag.localName().impl(), createSVGFEOffsetElementWrapper);
       map.set(fePointLightTag.localName().impl(), createSVGFEPointLightElementWrapper);
       map.set(feSpecularLightingTag.localName().impl(), createSVGFESpecularLightingElementWrapper);
       map.set(feSpotLightTag.localName().impl(), createSVGFESpotLightElementWrapper);
       map.set(feTileTag.localName().impl(), createSVGFETileElementWrapper);
       map.set(feTurbulenceTag.localName().impl(), createSVGFETurbulenceElementWrapper);
       map.set(filterTag.localName().impl(), createSVGFilterElementWrapper);
       map.set(fontTag.localName().impl(), createSVGFontElementWrapper);
       map.set(font_faceTag.localName().impl(), createSVGFontFaceElementWrapper);
       map.set(font_face_formatTag.localName().impl(), createSVGFontFaceFormatElementWrapper);
       map.set(font_face_nameTag.localName().impl(), createSVGFontFaceNameElementWrapper);
       map.set(font_face_srcTag.localName().impl(), createSVGFontFaceSrcElementWrapper);
       map.set(font_face_uriTag.localName().impl(), createSVGFontFaceUriElementWrapper);
       map.set(foreignObjectTag.localName().impl(), createSVGForeignObjectElementWrapper);
       map.set(gTag.localName().impl(), createSVGGElementWrapper);
       map.set(glyphTag.localName().impl(), createSVGGlyphElementWrapper);
       map.set(glyphRefTag.localName().impl(), createSVGGlyphRefElementWrapper);
       map.set(hkernTag.localName().impl(), createSVGHKernElementWrapper);
       map.set(imageTag.localName().impl(), createSVGImageElementWrapper);
       map.set(lineTag.localName().impl(), createSVGLineElementWrapper);
       map.set(linearGradientTag.localName().impl(), createSVGLinearGradientElementWrapper);
       map.set(markerTag.localName().impl(), createSVGMarkerElementWrapper);
       map.set(maskTag.localName().impl(), createSVGMaskElementWrapper);
       map.set(metadataTag.localName().impl(), createSVGMetadataElementWrapper);
       map.set(missing_glyphTag.localName().impl(), createSVGMissingGlyphElementWrapper);
       map.set(mpathTag.localName().impl(), createSVGMPathElementWrapper);
       map.set(pathTag.localName().impl(), createSVGPathElementWrapper);
       map.set(patternTag.localName().impl(), createSVGPatternElementWrapper);
       map.set(polygonTag.localName().impl(), createSVGPolygonElementWrapper);
       map.set(polylineTag.localName().impl(), createSVGPolylineElementWrapper);
       map.set(radialGradientTag.localName().impl(), createSVGRadialGradientElementWrapper);
       map.set(rectTag.localName().impl(), createSVGRectElementWrapper);
       map.set(scriptTag.localName().impl(), createSVGScriptElementWrapper);
       map.set(setTag.localName().impl(), createSVGSetElementWrapper);
       map.set(stopTag.localName().impl(), createSVGStopElementWrapper);
       map.set(styleTag.localName().impl(), createSVGStyleElementWrapper);
       map.set(svgTag.localName().impl(), createSVGSVGElementWrapper);
       map.set(switchTag.localName().impl(), createSVGSwitchElementWrapper);
       map.set(symbolTag.localName().impl(), createSVGSymbolElementWrapper);
       map.set(textTag.localName().impl(), createSVGTextElementWrapper);
       map.set(textPathTag.localName().impl(), createSVGTextPathElementWrapper);
       map.set(titleTag.localName().impl(), createSVGTitleElementWrapper);
       map.set(trefTag.localName().impl(), createSVGTRefElementWrapper);
       map.set(tspanTag.localName().impl(), createSVGTSpanElementWrapper);
       map.set(useTag.localName().impl(), createSVGUseElementWrapper);
       map.set(viewTag.localName().impl(), createSVGViewElementWrapper);
       map.set(vkernTag.localName().impl(), createSVGVKernElementWrapper);
    }
    CreateSVGElementWrapperFunction createWrapperFunction = map.get(element->localName().impl());
    if (createWrapperFunction)
    {
        return createWrapperFunction(element, creationContext, isolate);
    }
    return V8SVGElement::createWrapper(element, creationContext, isolate);
}

}

#endif
