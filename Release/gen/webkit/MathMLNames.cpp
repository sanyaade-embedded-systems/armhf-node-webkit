/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "config.h"

#ifdef SKIP_STATIC_CONSTRUCTORS_ON_GCC
#define DOM_MathMLNAMES_HIDE_GLOBALS 1
#else
#define QNAME_DEFAULT_CONSTRUCTOR 1
#endif

#include "MathMLNames.h"

#include <wtf/StaticConstructors.h>
namespace WebCore {

namespace MathMLNames {

using namespace WebCore;

DEFINE_GLOBAL(AtomicString, mathmlNamespaceURI)

// Tags
DEFINE_GLOBAL(QualifiedName, annotation_xmlTag)
DEFINE_GLOBAL(QualifiedName, malignmarkTag)
DEFINE_GLOBAL(QualifiedName, mathTag)
DEFINE_GLOBAL(QualifiedName, mfencedTag)
DEFINE_GLOBAL(QualifiedName, mfracTag)
DEFINE_GLOBAL(QualifiedName, mglyphTag)
DEFINE_GLOBAL(QualifiedName, miTag)
DEFINE_GLOBAL(QualifiedName, mnTag)
DEFINE_GLOBAL(QualifiedName, moTag)
DEFINE_GLOBAL(QualifiedName, moverTag)
DEFINE_GLOBAL(QualifiedName, mrootTag)
DEFINE_GLOBAL(QualifiedName, mrowTag)
DEFINE_GLOBAL(QualifiedName, msTag)
DEFINE_GLOBAL(QualifiedName, msqrtTag)
DEFINE_GLOBAL(QualifiedName, msubTag)
DEFINE_GLOBAL(QualifiedName, msubsupTag)
DEFINE_GLOBAL(QualifiedName, msupTag)
DEFINE_GLOBAL(QualifiedName, mtableTag)
DEFINE_GLOBAL(QualifiedName, mtdTag)
DEFINE_GLOBAL(QualifiedName, mtextTag)
DEFINE_GLOBAL(QualifiedName, mtrTag)
DEFINE_GLOBAL(QualifiedName, munderTag)
DEFINE_GLOBAL(QualifiedName, munderoverTag)


WebCore::QualifiedName** getMathMLTags()
{
    static WebCore::QualifiedName* MathMLTags[] = {
        (WebCore::QualifiedName*)&annotation_xmlTag,
        (WebCore::QualifiedName*)&malignmarkTag,
        (WebCore::QualifiedName*)&mathTag,
        (WebCore::QualifiedName*)&mfencedTag,
        (WebCore::QualifiedName*)&mfracTag,
        (WebCore::QualifiedName*)&mglyphTag,
        (WebCore::QualifiedName*)&miTag,
        (WebCore::QualifiedName*)&mnTag,
        (WebCore::QualifiedName*)&moTag,
        (WebCore::QualifiedName*)&moverTag,
        (WebCore::QualifiedName*)&mrootTag,
        (WebCore::QualifiedName*)&mrowTag,
        (WebCore::QualifiedName*)&msTag,
        (WebCore::QualifiedName*)&msqrtTag,
        (WebCore::QualifiedName*)&msubTag,
        (WebCore::QualifiedName*)&msubsupTag,
        (WebCore::QualifiedName*)&msupTag,
        (WebCore::QualifiedName*)&mtableTag,
        (WebCore::QualifiedName*)&mtdTag,
        (WebCore::QualifiedName*)&mtextTag,
        (WebCore::QualifiedName*)&mtrTag,
        (WebCore::QualifiedName*)&munderTag,
        (WebCore::QualifiedName*)&munderoverTag,
    };
    return MathMLTags;
}

// Attributes
DEFINE_GLOBAL(QualifiedName, alttextAttr)
DEFINE_GLOBAL(QualifiedName, backgroundAttr)
DEFINE_GLOBAL(QualifiedName, closeAttr)
DEFINE_GLOBAL(QualifiedName, colorAttr)
DEFINE_GLOBAL(QualifiedName, columnspanAttr)
DEFINE_GLOBAL(QualifiedName, definitionURLAttr)
DEFINE_GLOBAL(QualifiedName, denomalignAttr)
DEFINE_GLOBAL(QualifiedName, encodingAttr)
DEFINE_GLOBAL(QualifiedName, fontfamilyAttr)
DEFINE_GLOBAL(QualifiedName, fontsizeAttr)
DEFINE_GLOBAL(QualifiedName, fontstyleAttr)
DEFINE_GLOBAL(QualifiedName, fontweightAttr)
DEFINE_GLOBAL(QualifiedName, linethicknessAttr)
DEFINE_GLOBAL(QualifiedName, mathbackgroundAttr)
DEFINE_GLOBAL(QualifiedName, mathcolorAttr)
DEFINE_GLOBAL(QualifiedName, mathsizeAttr)
DEFINE_GLOBAL(QualifiedName, mathvariantAttr)
DEFINE_GLOBAL(QualifiedName, numalignAttr)
DEFINE_GLOBAL(QualifiedName, openAttr)
DEFINE_GLOBAL(QualifiedName, rowspanAttr)
DEFINE_GLOBAL(QualifiedName, separatorsAttr)
DEFINE_GLOBAL(QualifiedName, stretchyAttr)


WebCore::QualifiedName** getMathMLAttrs()
{
    static WebCore::QualifiedName* MathMLAttr[] = {
        (WebCore::QualifiedName*)&alttextAttr,
        (WebCore::QualifiedName*)&backgroundAttr,
        (WebCore::QualifiedName*)&closeAttr,
        (WebCore::QualifiedName*)&colorAttr,
        (WebCore::QualifiedName*)&columnspanAttr,
        (WebCore::QualifiedName*)&definitionURLAttr,
        (WebCore::QualifiedName*)&denomalignAttr,
        (WebCore::QualifiedName*)&encodingAttr,
        (WebCore::QualifiedName*)&fontfamilyAttr,
        (WebCore::QualifiedName*)&fontsizeAttr,
        (WebCore::QualifiedName*)&fontstyleAttr,
        (WebCore::QualifiedName*)&fontweightAttr,
        (WebCore::QualifiedName*)&linethicknessAttr,
        (WebCore::QualifiedName*)&mathbackgroundAttr,
        (WebCore::QualifiedName*)&mathcolorAttr,
        (WebCore::QualifiedName*)&mathsizeAttr,
        (WebCore::QualifiedName*)&mathvariantAttr,
        (WebCore::QualifiedName*)&numalignAttr,
        (WebCore::QualifiedName*)&openAttr,
        (WebCore::QualifiedName*)&rowspanAttr,
        (WebCore::QualifiedName*)&separatorsAttr,
        (WebCore::QualifiedName*)&stretchyAttr,
    };
    return MathMLAttr;
}

void init()
{
    static bool initialized = false;
    if (initialized)
        return;
    initialized = true;

    // Use placement new to initialize the globals.

    AtomicString::init();
    AtomicString mathmlNS("http://www.w3.org/1998/Math/MathML", AtomicString::ConstructFromLiteral);

    // Namespace
    new ((void*)&mathmlNamespaceURI) AtomicString(mathmlNS);

    // Tags
    createQualifiedName((void*)&annotation_xmlTag, "annotation-xml", 14, mathmlNS);
    createQualifiedName((void*)&malignmarkTag, "malignmark", 10, mathmlNS);
    createQualifiedName((void*)&mathTag, "math", 4, mathmlNS);
    createQualifiedName((void*)&mfencedTag, "mfenced", 7, mathmlNS);
    createQualifiedName((void*)&mfracTag, "mfrac", 5, mathmlNS);
    createQualifiedName((void*)&mglyphTag, "mglyph", 6, mathmlNS);
    createQualifiedName((void*)&miTag, "mi", 2, mathmlNS);
    createQualifiedName((void*)&mnTag, "mn", 2, mathmlNS);
    createQualifiedName((void*)&moTag, "mo", 2, mathmlNS);
    createQualifiedName((void*)&moverTag, "mover", 5, mathmlNS);
    createQualifiedName((void*)&mrootTag, "mroot", 5, mathmlNS);
    createQualifiedName((void*)&mrowTag, "mrow", 4, mathmlNS);
    createQualifiedName((void*)&msTag, "ms", 2, mathmlNS);
    createQualifiedName((void*)&msqrtTag, "msqrt", 5, mathmlNS);
    createQualifiedName((void*)&msubTag, "msub", 4, mathmlNS);
    createQualifiedName((void*)&msubsupTag, "msubsup", 7, mathmlNS);
    createQualifiedName((void*)&msupTag, "msup", 4, mathmlNS);
    createQualifiedName((void*)&mtableTag, "mtable", 6, mathmlNS);
    createQualifiedName((void*)&mtdTag, "mtd", 3, mathmlNS);
    createQualifiedName((void*)&mtextTag, "mtext", 5, mathmlNS);
    createQualifiedName((void*)&mtrTag, "mtr", 3, mathmlNS);
    createQualifiedName((void*)&munderTag, "munder", 6, mathmlNS);
    createQualifiedName((void*)&munderoverTag, "munderover", 10, mathmlNS);
    // Attributes
    createQualifiedName((void*)&alttextAttr, "alttext", 7);
    createQualifiedName((void*)&backgroundAttr, "background", 10);
    createQualifiedName((void*)&closeAttr, "close", 5);
    createQualifiedName((void*)&colorAttr, "color", 5);
    createQualifiedName((void*)&columnspanAttr, "columnspan", 10);
    createQualifiedName((void*)&definitionURLAttr, "definitionURL", 13);
    createQualifiedName((void*)&denomalignAttr, "denomalign", 10);
    createQualifiedName((void*)&encodingAttr, "encoding", 8);
    createQualifiedName((void*)&fontfamilyAttr, "fontfamily", 10);
    createQualifiedName((void*)&fontsizeAttr, "fontsize", 8);
    createQualifiedName((void*)&fontstyleAttr, "fontstyle", 9);
    createQualifiedName((void*)&fontweightAttr, "fontweight", 10);
    createQualifiedName((void*)&linethicknessAttr, "linethickness", 13);
    createQualifiedName((void*)&mathbackgroundAttr, "mathbackground", 14);
    createQualifiedName((void*)&mathcolorAttr, "mathcolor", 9);
    createQualifiedName((void*)&mathsizeAttr, "mathsize", 8);
    createQualifiedName((void*)&mathvariantAttr, "mathvariant", 11);
    createQualifiedName((void*)&numalignAttr, "numalign", 8);
    createQualifiedName((void*)&openAttr, "open", 4);
    createQualifiedName((void*)&rowspanAttr, "rowspan", 7);
    createQualifiedName((void*)&separatorsAttr, "separators", 10);
    createQualifiedName((void*)&stretchyAttr, "stretchy", 8);
}

} }

